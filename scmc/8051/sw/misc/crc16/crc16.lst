                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module crc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _printf
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _FL
                                     21 	.globl _P
                                     22 	.globl _TF2
                                     23 	.globl _EXF2
                                     24 	.globl _RCLK
                                     25 	.globl _TCLK
                                     26 	.globl _EXEN2
                                     27 	.globl _TR2
                                     28 	.globl _C_T2
                                     29 	.globl _CP_RL2
                                     30 	.globl _T2CON_7
                                     31 	.globl _T2CON_6
                                     32 	.globl _T2CON_5
                                     33 	.globl _T2CON_4
                                     34 	.globl _T2CON_3
                                     35 	.globl _T2CON_2
                                     36 	.globl _T2CON_1
                                     37 	.globl _T2CON_0
                                     38 	.globl _PT2
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ET2
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _T2EX
                                     84 	.globl _T2
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _B
                                    110 	.globl _A
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _TH2
                                    114 	.globl _TL2
                                    115 	.globl _RCAP2H
                                    116 	.globl _RCAP2L
                                    117 	.globl _T2MOD
                                    118 	.globl _T2CON
                                    119 	.globl _IP
                                    120 	.globl _P3
                                    121 	.globl _IE
                                    122 	.globl _P2
                                    123 	.globl _SBUF
                                    124 	.globl _SCON
                                    125 	.globl _P1
                                    126 	.globl _TH1
                                    127 	.globl _TH0
                                    128 	.globl _TL1
                                    129 	.globl _TL0
                                    130 	.globl _TMOD
                                    131 	.globl _TCON
                                    132 	.globl _PCON
                                    133 	.globl _DPH
                                    134 	.globl _DPL
                                    135 	.globl _SP
                                    136 	.globl _P0
                                    137 	.globl _intr
                                    138 	.globl _putchar
                                    139 	.globl _getchar
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0	=	0x0080
                           000081   146 _SP	=	0x0081
                           000082   147 _DPL	=	0x0082
                           000083   148 _DPH	=	0x0083
                           000087   149 _PCON	=	0x0087
                           000088   150 _TCON	=	0x0088
                           000089   151 _TMOD	=	0x0089
                           00008A   152 _TL0	=	0x008a
                           00008B   153 _TL1	=	0x008b
                           00008C   154 _TH0	=	0x008c
                           00008D   155 _TH1	=	0x008d
                           000090   156 _P1	=	0x0090
                           000098   157 _SCON	=	0x0098
                           000099   158 _SBUF	=	0x0099
                           0000A0   159 _P2	=	0x00a0
                           0000A8   160 _IE	=	0x00a8
                           0000B0   161 _P3	=	0x00b0
                           0000B8   162 _IP	=	0x00b8
                           0000C8   163 _T2CON	=	0x00c8
                           0000C9   164 _T2MOD	=	0x00c9
                           0000CA   165 _RCAP2L	=	0x00ca
                           0000CB   166 _RCAP2H	=	0x00cb
                           0000CC   167 _TL2	=	0x00cc
                           0000CD   168 _TH2	=	0x00cd
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000E0   171 _A	=	0x00e0
                           0000F0   172 _B	=	0x00f0
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000090   202 _T2	=	0x0090
                           000091   203 _T2EX	=	0x0091
                           000098   204 _RI	=	0x0098
                           000099   205 _TI	=	0x0099
                           00009A   206 _RB8	=	0x009a
                           00009B   207 _TB8	=	0x009b
                           00009C   208 _REN	=	0x009c
                           00009D   209 _SM2	=	0x009d
                           00009E   210 _SM1	=	0x009e
                           00009F   211 _SM0	=	0x009f
                           0000A0   212 _P2_0	=	0x00a0
                           0000A1   213 _P2_1	=	0x00a1
                           0000A2   214 _P2_2	=	0x00a2
                           0000A3   215 _P2_3	=	0x00a3
                           0000A4   216 _P2_4	=	0x00a4
                           0000A5   217 _P2_5	=	0x00a5
                           0000A6   218 _P2_6	=	0x00a6
                           0000A7   219 _P2_7	=	0x00a7
                           0000A8   220 _EX0	=	0x00a8
                           0000A9   221 _ET0	=	0x00a9
                           0000AA   222 _EX1	=	0x00aa
                           0000AB   223 _ET1	=	0x00ab
                           0000AC   224 _ES	=	0x00ac
                           0000AD   225 _ET2	=	0x00ad
                           0000AF   226 _EA	=	0x00af
                           0000B0   227 _P3_0	=	0x00b0
                           0000B1   228 _P3_1	=	0x00b1
                           0000B2   229 _P3_2	=	0x00b2
                           0000B3   230 _P3_3	=	0x00b3
                           0000B4   231 _P3_4	=	0x00b4
                           0000B5   232 _P3_5	=	0x00b5
                           0000B6   233 _P3_6	=	0x00b6
                           0000B7   234 _P3_7	=	0x00b7
                           0000B0   235 _RXD	=	0x00b0
                           0000B1   236 _TXD	=	0x00b1
                           0000B2   237 _INT0	=	0x00b2
                           0000B3   238 _INT1	=	0x00b3
                           0000B4   239 _T0	=	0x00b4
                           0000B5   240 _T1	=	0x00b5
                           0000B6   241 _WR	=	0x00b6
                           0000B7   242 _RD	=	0x00b7
                           0000B8   243 _PX0	=	0x00b8
                           0000B9   244 _PT0	=	0x00b9
                           0000BA   245 _PX1	=	0x00ba
                           0000BB   246 _PT1	=	0x00bb
                           0000BC   247 _PS	=	0x00bc
                           0000BD   248 _PT2	=	0x00bd
                           0000C8   249 _T2CON_0	=	0x00c8
                           0000C9   250 _T2CON_1	=	0x00c9
                           0000CA   251 _T2CON_2	=	0x00ca
                           0000CB   252 _T2CON_3	=	0x00cb
                           0000CC   253 _T2CON_4	=	0x00cc
                           0000CD   254 _T2CON_5	=	0x00cd
                           0000CE   255 _T2CON_6	=	0x00ce
                           0000CF   256 _T2CON_7	=	0x00cf
                           0000C8   257 _CP_RL2	=	0x00c8
                           0000C9   258 _C_T2	=	0x00c9
                           0000CA   259 _TR2	=	0x00ca
                           0000CB   260 _EXEN2	=	0x00cb
                           0000CC   261 _TCLK	=	0x00cc
                           0000CD   262 _RCLK	=	0x00cd
                           0000CE   263 _EXF2	=	0x00ce
                           0000CF   264 _TF2	=	0x00cf
                           0000D0   265 _P	=	0x00d0
                           0000D1   266 _FL	=	0x00d1
                           0000D2   267 _OV	=	0x00d2
                           0000D3   268 _RS0	=	0x00d3
                           0000D4   269 _RS1	=	0x00d4
                           0000D5   270 _F0	=	0x00d5
                           0000D6   271 _AC	=	0x00d6
                           0000D7   272 _CY	=	0x00d7
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; overlayable bit register bank
                                    282 ;--------------------------------------------------------
                                    283 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        284 bits:
      000000                        285 	.ds 1
                           008000   286 	b0 = bits[0]
                           008100   287 	b1 = bits[1]
                           008200   288 	b2 = bits[2]
                           008300   289 	b3 = bits[3]
                           008400   290 	b4 = bits[4]
                           008500   291 	b5 = bits[5]
                           008600   292 	b6 = bits[6]
                           008700   293 	b7 = bits[7]
                                    294 ;--------------------------------------------------------
                                    295 ; internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area DSEG    (DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable items in internal ram 
                                    300 ;--------------------------------------------------------
                                    301 ;--------------------------------------------------------
                                    302 ; Stack segment in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 	.area	SSEG
      000000                        305 __start__stack:
      000000                        306 	.ds	1
                                    307 
                                    308 ;--------------------------------------------------------
                                    309 ; indirectly addressable internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area ISEG    (DATA)
      000000                        312 _intr::
      000000                        313 	.ds 1
                                    314 ;--------------------------------------------------------
                                    315 ; absolute internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area IABS    (ABS,DATA)
                                    318 	.area IABS    (ABS,DATA)
                                    319 ;--------------------------------------------------------
                                    320 ; bit data
                                    321 ;--------------------------------------------------------
                                    322 	.area BSEG    (BIT)
                                    323 ;--------------------------------------------------------
                                    324 ; paged external ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area PSEG    (PAG,XDATA)
                                    327 ;--------------------------------------------------------
                                    328 ; external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XSEG    (XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r00r1A         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	crc16.c:8: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	crc16.c:13: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	crc16.c:14: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	crc16.c:16: int getchar(void) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	crc16.c:22: __endasm;
      000005 12 00 32         [24]  409 	lcall	0x0032
      000008 F5 82            [12]  410 	mov	dpl, a
      00000A 75 83 00         [24]  411 	mov	dph, #0
      00000D 22               [24]  412 	ret
                                    413 ;	crc16.c:23: }
                                    414 ;	naked function: no epilogue.
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'int0'
                                    417 ;------------------------------------------------------------
                                    418 ;	crc16.c:46: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    419 ;	-----------------------------------------
                                    420 ;	 function int0
                                    421 ;	-----------------------------------------
      00000E                        422 _int0:
                           00000F   423 	ar7 = 0x0f
                           00000E   424 	ar6 = 0x0e
                           00000D   425 	ar5 = 0x0d
                           00000C   426 	ar4 = 0x0c
                           00000B   427 	ar3 = 0x0b
                           00000A   428 	ar2 = 0x0a
                           000009   429 	ar1 = 0x09
                           000008   430 	ar0 = 0x08
      00000E C0 D0            [24]  431 	push	psw
      000010 75 D0 08         [24]  432 	mov	psw,#0x08
                                    433 ;	crc16.c:47: intr = 1u;
      000013 78r00            [12]  434 	mov	r0,#_intr
      000015 76 01            [12]  435 	mov	@r0,#0x01
                                    436 ;	crc16.c:48: }
      000017 D0 D0            [24]  437 	pop	psw
      000019 32               [24]  438 	reti
                                    439 ;	eliminated unneeded push/pop dpl
                                    440 ;	eliminated unneeded push/pop dph
                                    441 ;	eliminated unneeded push/pop b
                                    442 ;	eliminated unneeded push/pop acc
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'main'
                                    445 ;------------------------------------------------------------
                                    446 ;base                      Allocated to stack - _bp +1
                                    447 ;t                         Allocated to stack - _bp +3
                                    448 ;len                       Allocated to registers 
                                    449 ;off                       Allocated to stack - _bp +5
                                    450 ;crc                       Allocated to registers r6 r7 
                                    451 ;bitp                      Allocated to registers r3 
                                    452 ;------------------------------------------------------------
                                    453 ;	crc16.c:53: void main(void) {
                                    454 ;	-----------------------------------------
                                    455 ;	 function main
                                    456 ;	-----------------------------------------
      00001A                        457 _main:
                           000007   458 	ar7 = 0x07
                           000006   459 	ar6 = 0x06
                           000005   460 	ar5 = 0x05
                           000004   461 	ar4 = 0x04
                           000003   462 	ar3 = 0x03
                           000002   463 	ar2 = 0x02
                           000001   464 	ar1 = 0x01
                           000000   465 	ar0 = 0x00
      00001A C0*00            [24]  466 	push	_bp
      00001C E5 81            [12]  467 	mov	a,sp
      00001E F5*00            [12]  468 	mov	_bp,a
      000020 24 06            [12]  469 	add	a,#0x06
      000022 F5 81            [12]  470 	mov	sp,a
                                    471 ;	crc16.c:58: intr = 0u;
      000024 78r00            [12]  472 	mov	r0,#_intr
      000026 76 00            [12]  473 	mov	@r0,#0x00
                                    474 ;	crc16.c:60: IT0 = 1;
                                    475 ;	assignBit
      000028 D2 88            [12]  476 	setb	_IT0
                                    477 ;	crc16.c:61: EX0 = 1;	
                                    478 ;	assignBit
      00002A D2 A8            [12]  479 	setb	_EX0
                                    480 ;	crc16.c:62: EA = 1;
                                    481 ;	assignBit
      00002C D2 AF            [12]  482 	setb	_EA
                                    483 ;	crc16.c:64: while (!intr) {
      00002E                        484 00131$:
      00002E 78r00            [12]  485 	mov	r0,#_intr
      000030 E6               [12]  486 	mov	a,@r0
      000031 60 03            [24]  487 	jz	00227$
      000033 02r02r3B         [24]  488 	ljmp	00133$
      000036                        489 00227$:
                                    490 ;	crc16.c:65: base = (pxd_uint8_t)0x0u;
      000036 A8*00            [24]  491 	mov	r0,_bp
      000038 08               [12]  492 	inc	r0
      000039 E4               [12]  493 	clr	a
      00003A F6               [12]  494 	mov	@r0,a
      00003B 08               [12]  495 	inc	r0
      00003C F6               [12]  496 	mov	@r0,a
                                    497 ;	crc16.c:67: printf("COMPLETE base=0x%04x ", (unsigned int)base);
      00003D A8*00            [24]  498 	mov	r0,_bp
      00003F 08               [12]  499 	inc	r0
      000040 86 06            [24]  500 	mov	ar6,@r0
      000042 08               [12]  501 	inc	r0
      000043 86 07            [24]  502 	mov	ar7,@r0
      000045 C0 06            [24]  503 	push	ar6
      000047 C0 07            [24]  504 	push	ar7
      000049 74r00            [12]  505 	mov	a,#___str_0
      00004B C0 E0            [24]  506 	push	acc
      00004D 74s00            [12]  507 	mov	a,#(___str_0 >> 8)
      00004F C0 E0            [24]  508 	push	acc
      000051 74 80            [12]  509 	mov	a,#0x80
      000053 C0 E0            [24]  510 	push	acc
      000055 12r00r00         [24]  511 	lcall	_printf
      000058 E5 81            [12]  512 	mov	a,sp
      00005A 24 FB            [12]  513 	add	a,#0xfb
      00005C F5 81            [12]  514 	mov	sp,a
                                    515 ;	crc16.c:68: printf("len=0x%04x ", len);
      00005E 74 FF            [12]  516 	mov	a,#0xff
      000060 C0 E0            [24]  517 	push	acc
      000062 C0 E0            [24]  518 	push	acc
      000064 74r16            [12]  519 	mov	a,#___str_1
      000066 C0 E0            [24]  520 	push	acc
      000068 74s00            [12]  521 	mov	a,#(___str_1 >> 8)
      00006A C0 E0            [24]  522 	push	acc
      00006C 74 80            [12]  523 	mov	a,#0x80
      00006E C0 E0            [24]  524 	push	acc
      000070 12r00r00         [24]  525 	lcall	_printf
      000073 E5 81            [12]  526 	mov	a,sp
      000075 24 FB            [12]  527 	add	a,#0xfb
      000077 F5 81            [12]  528 	mov	sp,a
                                    529 ;	crc16.c:69: CCRCB_INIT(crc);
      000079 7E FF            [12]  530 	mov	r6,#0xff
      00007B 7F FF            [12]  531 	mov	r7,#0xff
                                    532 ;	crc16.c:70: for (off = 0u; off < len; off++)
      00007D E5*00            [12]  533 	mov	a,_bp
      00007F 24 05            [12]  534 	add	a,#0x05
      000081 F8               [12]  535 	mov	r0,a
      000082 E4               [12]  536 	clr	a
      000083 F6               [12]  537 	mov	@r0,a
      000084 08               [12]  538 	inc	r0
      000085 F6               [12]  539 	mov	@r0,a
      000086                        540 00137$:
      000086 E5*00            [12]  541 	mov	a,_bp
      000088 24 05            [12]  542 	add	a,#0x05
      00008A F8               [12]  543 	mov	r0,a
      00008B C3               [12]  544 	clr	c
      00008C E6               [12]  545 	mov	a,@r0
      00008D 94 FF            [12]  546 	subb	a,#0xff
      00008F 08               [12]  547 	inc	r0
      000090 E6               [12]  548 	mov	a,@r0
      000091 94 FF            [12]  549 	subb	a,#0xff
      000093 50 65            [24]  550 	jnc	00109$
                                    551 ;	crc16.c:71: CCRCB(crc, base[off], bitp);
      000095 7B 80            [12]  552 	mov	r3,#0x80
      000097                        553 00134$:
      000097 EF               [12]  554 	mov	a,r7
      000098 23               [12]  555 	rl	a
      000099 54 01            [12]  556 	anl	a,#0x01
      00009B FA               [12]  557 	mov	r2,a
      00009C 7D 00            [12]  558 	mov	r5,#0x00
      00009E A8*00            [24]  559 	mov	r0,_bp
      0000A0 08               [12]  560 	inc	r0
      0000A1 E5*00            [12]  561 	mov	a,_bp
      0000A3 24 05            [12]  562 	add	a,#0x05
      0000A5 F9               [12]  563 	mov	r1,a
      0000A6 E7               [12]  564 	mov	a,@r1
      0000A7 26               [12]  565 	add	a,@r0
      0000A8 F5 82            [12]  566 	mov	dpl,a
      0000AA 09               [12]  567 	inc	r1
      0000AB E7               [12]  568 	mov	a,@r1
      0000AC 08               [12]  569 	inc	r0
      0000AD 36               [12]  570 	addc	a,@r0
      0000AE F5 83            [12]  571 	mov	dph,a
      0000B0 E0               [24]  572 	movx	a,@dptr
      0000B1 FC               [12]  573 	mov	r4,a
      0000B2 EB               [12]  574 	mov	a,r3
      0000B3 52 04            [12]  575 	anl	ar4,a
      0000B5 EC               [12]  576 	mov	a,r4
      0000B6 B4 01 00         [24]  577 	cjne	a,#0x01,00229$
      0000B9                        578 00229$:
      0000B9 B3               [12]  579 	cpl	c
      0000BA 92*00            [24]  580 	mov	b0,c
      0000BC C0 03            [24]  581 	push	ar3
      0000BE A2*00            [12]  582 	mov	c,b0
      0000C0 E4               [12]  583 	clr	a
      0000C1 33               [12]  584 	rlc	a
      0000C2 7C 00            [12]  585 	mov	r4,#0x00
      0000C4 62 02            [12]  586 	xrl	ar2,a
      0000C6 EC               [12]  587 	mov	a,r4
      0000C7 62 05            [12]  588 	xrl	ar5,a
      0000C9 D0 03            [24]  589 	pop	ar3
      0000CB EA               [12]  590 	mov	a,r2
      0000CC 4D               [12]  591 	orl	a,r5
      0000CD 60 0E            [24]  592 	jz	00146$
      0000CF EE               [12]  593 	mov	a,r6
      0000D0 2E               [12]  594 	add	a,r6
      0000D1 FC               [12]  595 	mov	r4,a
      0000D2 EF               [12]  596 	mov	a,r7
      0000D3 33               [12]  597 	rlc	a
      0000D4 FD               [12]  598 	mov	r5,a
      0000D5 63 04 21         [24]  599 	xrl	ar4,#0x21
      0000D8 63 05 10         [24]  600 	xrl	ar5,#0x10
      0000DB 80 06            [24]  601 	sjmp	00147$
      0000DD                        602 00146$:
      0000DD EE               [12]  603 	mov	a,r6
      0000DE 2E               [12]  604 	add	a,r6
      0000DF FC               [12]  605 	mov	r4,a
      0000E0 EF               [12]  606 	mov	a,r7
      0000E1 33               [12]  607 	rlc	a
      0000E2 FD               [12]  608 	mov	r5,a
      0000E3                        609 00147$:
      0000E3 8C 06            [24]  610 	mov	ar6,r4
      0000E5 8D 07            [24]  611 	mov	ar7,r5
      0000E7 EB               [12]  612 	mov	a,r3
      0000E8 C3               [12]  613 	clr	c
      0000E9 13               [12]  614 	rrc	a
      0000EA FB               [12]  615 	mov	r3,a
      0000EB 70 AA            [24]  616 	jnz	00134$
                                    617 ;	crc16.c:70: for (off = 0u; off < len; off++)
      0000ED E5*00            [12]  618 	mov	a,_bp
      0000EF 24 05            [12]  619 	add	a,#0x05
      0000F1 F8               [12]  620 	mov	r0,a
      0000F2 06               [12]  621 	inc	@r0
      0000F3 B6 00 02         [24]  622 	cjne	@r0,#0x00,00232$
      0000F6 08               [12]  623 	inc	r0
      0000F7 06               [12]  624 	inc	@r0
      0000F8                        625 00232$:
                                    626 ;	crc16.c:72: CCRCB_FINISH(crc);
      0000F8 80 8C            [24]  627 	sjmp	00137$
      0000FA                        628 00109$:
                                    629 ;	crc16.c:73: printf("CRC16=0x%04x\r\n", crc);
      0000FA C0 06            [24]  630 	push	ar6
      0000FC C0 07            [24]  631 	push	ar7
      0000FE 74r22            [12]  632 	mov	a,#___str_2
      000100 C0 E0            [24]  633 	push	acc
      000102 74s00            [12]  634 	mov	a,#(___str_2 >> 8)
      000104 C0 E0            [24]  635 	push	acc
      000106 74 80            [12]  636 	mov	a,#0x80
      000108 C0 E0            [24]  637 	push	acc
      00010A 12r00r00         [24]  638 	lcall	_printf
      00010D E5 81            [12]  639 	mov	a,sp
      00010F 24 FB            [12]  640 	add	a,#0xfb
      000111 F5 81            [12]  641 	mov	sp,a
                                    642 ;	crc16.c:76: while (1) {
      000113                        643 00129$:
                                    644 ;	crc16.c:77: printf("PARTIAL base=0x%04x ", (unsigned int)base);
      000113 A8*00            [24]  645 	mov	r0,_bp
      000115 08               [12]  646 	inc	r0
      000116 86 06            [24]  647 	mov	ar6,@r0
      000118 08               [12]  648 	inc	r0
      000119 86 07            [24]  649 	mov	ar7,@r0
      00011B C0 06            [24]  650 	push	ar6
      00011D C0 07            [24]  651 	push	ar7
      00011F 74r31            [12]  652 	mov	a,#___str_3
      000121 C0 E0            [24]  653 	push	acc
      000123 74s00            [12]  654 	mov	a,#(___str_3 >> 8)
      000125 C0 E0            [24]  655 	push	acc
      000127 74 80            [12]  656 	mov	a,#0x80
      000129 C0 E0            [24]  657 	push	acc
      00012B 12r00r00         [24]  658 	lcall	_printf
      00012E E5 81            [12]  659 	mov	a,sp
      000130 24 FB            [12]  660 	add	a,#0xfb
      000132 F5 81            [12]  661 	mov	sp,a
                                    662 ;	crc16.c:78: printf("len=0x%04x ", len);
      000134 E4               [12]  663 	clr	a
      000135 C0 E0            [24]  664 	push	acc
      000137 74 20            [12]  665 	mov	a,#0x20
      000139 C0 E0            [24]  666 	push	acc
      00013B 74r16            [12]  667 	mov	a,#___str_1
      00013D C0 E0            [24]  668 	push	acc
      00013F 74s00            [12]  669 	mov	a,#(___str_1 >> 8)
      000141 C0 E0            [24]  670 	push	acc
      000143 74 80            [12]  671 	mov	a,#0x80
      000145 C0 E0            [24]  672 	push	acc
      000147 12r00r00         [24]  673 	lcall	_printf
      00014A E5 81            [12]  674 	mov	a,sp
      00014C 24 FB            [12]  675 	add	a,#0xfb
      00014E F5 81            [12]  676 	mov	sp,a
                                    677 ;	crc16.c:79: CCRCB_INIT(crc);
      000150 7E FF            [12]  678 	mov	r6,#0xff
      000152 7F FF            [12]  679 	mov	r7,#0xff
                                    680 ;	crc16.c:80: for (off = 0u; off < len; off++)
      000154 E5*00            [12]  681 	mov	a,_bp
      000156 24 05            [12]  682 	add	a,#0x05
      000158 F8               [12]  683 	mov	r0,a
      000159 E4               [12]  684 	clr	a
      00015A F6               [12]  685 	mov	@r0,a
      00015B 08               [12]  686 	inc	r0
      00015C F6               [12]  687 	mov	@r0,a
      00015D                        688 00142$:
      00015D E5*00            [12]  689 	mov	a,_bp
      00015F 24 05            [12]  690 	add	a,#0x05
      000161 F8               [12]  691 	mov	r0,a
      000162 C3               [12]  692 	clr	c
      000163 08               [12]  693 	inc	r0
      000164 E6               [12]  694 	mov	a,@r0
      000165 94 20            [12]  695 	subb	a,#0x20
      000167 50 65            [24]  696 	jnc	00120$
                                    697 ;	crc16.c:81: CCRCB(crc, base[off], bitp);
      000169 7B 80            [12]  698 	mov	r3,#0x80
      00016B                        699 00139$:
      00016B EF               [12]  700 	mov	a,r7
      00016C 23               [12]  701 	rl	a
      00016D 54 01            [12]  702 	anl	a,#0x01
      00016F FA               [12]  703 	mov	r2,a
      000170 7D 00            [12]  704 	mov	r5,#0x00
      000172 A8*00            [24]  705 	mov	r0,_bp
      000174 08               [12]  706 	inc	r0
      000175 E5*00            [12]  707 	mov	a,_bp
      000177 24 05            [12]  708 	add	a,#0x05
      000179 F9               [12]  709 	mov	r1,a
      00017A E7               [12]  710 	mov	a,@r1
      00017B 26               [12]  711 	add	a,@r0
      00017C F5 82            [12]  712 	mov	dpl,a
      00017E 09               [12]  713 	inc	r1
      00017F E7               [12]  714 	mov	a,@r1
      000180 08               [12]  715 	inc	r0
      000181 36               [12]  716 	addc	a,@r0
      000182 F5 83            [12]  717 	mov	dph,a
      000184 E0               [24]  718 	movx	a,@dptr
      000185 FC               [12]  719 	mov	r4,a
      000186 EB               [12]  720 	mov	a,r3
      000187 52 04            [12]  721 	anl	ar4,a
      000189 EC               [12]  722 	mov	a,r4
      00018A B4 01 00         [24]  723 	cjne	a,#0x01,00234$
      00018D                        724 00234$:
      00018D B3               [12]  725 	cpl	c
      00018E 92*00            [24]  726 	mov	b0,c
      000190 C0 03            [24]  727 	push	ar3
      000192 A2*00            [12]  728 	mov	c,b0
      000194 E4               [12]  729 	clr	a
      000195 33               [12]  730 	rlc	a
      000196 7C 00            [12]  731 	mov	r4,#0x00
      000198 62 02            [12]  732 	xrl	ar2,a
      00019A EC               [12]  733 	mov	a,r4
      00019B 62 05            [12]  734 	xrl	ar5,a
      00019D D0 03            [24]  735 	pop	ar3
      00019F EA               [12]  736 	mov	a,r2
      0001A0 4D               [12]  737 	orl	a,r5
      0001A1 60 0E            [24]  738 	jz	00148$
      0001A3 EE               [12]  739 	mov	a,r6
      0001A4 2E               [12]  740 	add	a,r6
      0001A5 FC               [12]  741 	mov	r4,a
      0001A6 EF               [12]  742 	mov	a,r7
      0001A7 33               [12]  743 	rlc	a
      0001A8 FD               [12]  744 	mov	r5,a
      0001A9 63 04 21         [24]  745 	xrl	ar4,#0x21
      0001AC 63 05 10         [24]  746 	xrl	ar5,#0x10
      0001AF 80 06            [24]  747 	sjmp	00149$
      0001B1                        748 00148$:
      0001B1 EE               [12]  749 	mov	a,r6
      0001B2 2E               [12]  750 	add	a,r6
      0001B3 FC               [12]  751 	mov	r4,a
      0001B4 EF               [12]  752 	mov	a,r7
      0001B5 33               [12]  753 	rlc	a
      0001B6 FD               [12]  754 	mov	r5,a
      0001B7                        755 00149$:
      0001B7 8C 06            [24]  756 	mov	ar6,r4
      0001B9 8D 07            [24]  757 	mov	ar7,r5
      0001BB EB               [12]  758 	mov	a,r3
      0001BC C3               [12]  759 	clr	c
      0001BD 13               [12]  760 	rrc	a
      0001BE FB               [12]  761 	mov	r3,a
      0001BF 70 AA            [24]  762 	jnz	00139$
                                    763 ;	crc16.c:80: for (off = 0u; off < len; off++)
      0001C1 E5*00            [12]  764 	mov	a,_bp
      0001C3 24 05            [12]  765 	add	a,#0x05
      0001C5 F8               [12]  766 	mov	r0,a
      0001C6 06               [12]  767 	inc	@r0
      0001C7 B6 00 02         [24]  768 	cjne	@r0,#0x00,00237$
      0001CA 08               [12]  769 	inc	r0
      0001CB 06               [12]  770 	inc	@r0
      0001CC                        771 00237$:
                                    772 ;	crc16.c:82: CCRCB_FINISH(crc);
      0001CC 80 8F            [24]  773 	sjmp	00142$
      0001CE                        774 00120$:
                                    775 ;	crc16.c:83: printf("CRC16=0x%04x\r\n", crc);
      0001CE C0 06            [24]  776 	push	ar6
      0001D0 C0 07            [24]  777 	push	ar7
      0001D2 74r22            [12]  778 	mov	a,#___str_2
      0001D4 C0 E0            [24]  779 	push	acc
      0001D6 74s00            [12]  780 	mov	a,#(___str_2 >> 8)
      0001D8 C0 E0            [24]  781 	push	acc
      0001DA 74 80            [12]  782 	mov	a,#0x80
      0001DC C0 E0            [24]  783 	push	acc
      0001DE 12r00r00         [24]  784 	lcall	_printf
      0001E1 E5 81            [12]  785 	mov	a,sp
      0001E3 24 FB            [12]  786 	add	a,#0xfb
      0001E5 F5 81            [12]  787 	mov	sp,a
                                    788 ;	crc16.c:85: if (intr) {
      0001E7 78r00            [12]  789 	mov	r0,#_intr
      0001E9 E6               [12]  790 	mov	a,@r0
      0001EA 60 1A            [24]  791 	jz	00124$
                                    792 ;	crc16.c:86: EA = 0;
                                    793 ;	assignBit
      0001EC C2 AF            [12]  794 	clr	_EA
                                    795 ;	crc16.c:87: printf("interrupted\n");
      0001EE 74r46            [12]  796 	mov	a,#___str_4
      0001F0 C0 E0            [24]  797 	push	acc
      0001F2 74s00            [12]  798 	mov	a,#(___str_4 >> 8)
      0001F4 C0 E0            [24]  799 	push	acc
      0001F6 74 80            [12]  800 	mov	a,#0x80
      0001F8 C0 E0            [24]  801 	push	acc
      0001FA 12r00r00         [24]  802 	lcall	_printf
      0001FD 15 81            [12]  803 	dec	sp
      0001FF 15 81            [12]  804 	dec	sp
      000201 15 81            [12]  805 	dec	sp
                                    806 ;	crc16.c:88: break;
      000203 02r00r2E         [24]  807 	ljmp	00131$
      000206                        808 00124$:
                                    809 ;	crc16.c:91: t = base + (len >> 1);
      000206 A8*00            [24]  810 	mov	r0,_bp
      000208 08               [12]  811 	inc	r0
      000209 E5*00            [12]  812 	mov	a,_bp
      00020B 24 03            [12]  813 	add	a,#0x03
      00020D F9               [12]  814 	mov	r1,a
      00020E E6               [12]  815 	mov	a,@r0
      00020F F7               [12]  816 	mov	@r1,a
      000210 74 10            [12]  817 	mov	a,#0x10
      000212 08               [12]  818 	inc	r0
      000213 26               [12]  819 	add	a,@r0
      000214 09               [12]  820 	inc	r1
      000215 F7               [12]  821 	mov	@r1,a
                                    822 ;	crc16.c:92: if (t < base) break;
      000216 E5*00            [12]  823 	mov	a,_bp
      000218 24 03            [12]  824 	add	a,#0x03
      00021A F8               [12]  825 	mov	r0,a
      00021B A9*00            [24]  826 	mov	r1,_bp
      00021D 09               [12]  827 	inc	r1
      00021E C3               [12]  828 	clr	c
      00021F E6               [12]  829 	mov	a,@r0
      000220 97               [12]  830 	subb	a,@r1
      000221 08               [12]  831 	inc	r0
      000222 E6               [12]  832 	mov	a,@r0
      000223 09               [12]  833 	inc	r1
      000224 97               [12]  834 	subb	a,@r1
      000225 50 03            [24]  835 	jnc	00239$
      000227 02r00r2E         [24]  836 	ljmp	00131$
      00022A                        837 00239$:
                                    838 ;	crc16.c:93: else base = t;
      00022A E5*00            [12]  839 	mov	a,_bp
      00022C 24 03            [12]  840 	add	a,#0x03
      00022E F8               [12]  841 	mov	r0,a
      00022F A9*00            [24]  842 	mov	r1,_bp
      000231 09               [12]  843 	inc	r1
      000232 E6               [12]  844 	mov	a,@r0
      000233 F7               [12]  845 	mov	@r1,a
      000234 08               [12]  846 	inc	r0
      000235 09               [12]  847 	inc	r1
      000236 E6               [12]  848 	mov	a,@r0
      000237 F7               [12]  849 	mov	@r1,a
      000238 02r01r13         [24]  850 	ljmp	00129$
      00023B                        851 00133$:
                                    852 ;	crc16.c:97: PCON |= 2;
      00023B 43 87 02         [24]  853 	orl	_PCON,#0x02
                                    854 ;	crc16.c:99: return;
                                    855 ;	crc16.c:100: }
      00023E 85*00 81         [24]  856 	mov	sp,_bp
      000241 D0*00            [24]  857 	pop	_bp
      000243 22               [24]  858 	ret
                                    859 	.area CSEG    (CODE)
                                    860 	.area CONST   (CODE)
                                    861 	.area CONST   (CODE)
      000000                        862 ___str_0:
      000000 43 4F 4D 50 4C 45 54   863 	.ascii "COMPLETE base=0x%04x "
             45 20 62 61 73 65 3D
             30 78 25 30 34 78 20
      000015 00                     864 	.db 0x00
                                    865 	.area CSEG    (CODE)
                                    866 	.area CONST   (CODE)
      000016                        867 ___str_1:
      000016 6C 65 6E 3D 30 78 25   868 	.ascii "len=0x%04x "
             30 34 78 20
      000021 00                     869 	.db 0x00
                                    870 	.area CSEG    (CODE)
                                    871 	.area CONST   (CODE)
      000022                        872 ___str_2:
      000022 43 52 43 31 36 3D 30   873 	.ascii "CRC16=0x%04x"
             78 25 30 34 78
      00002E 0D                     874 	.db 0x0d
      00002F 0A                     875 	.db 0x0a
      000030 00                     876 	.db 0x00
                                    877 	.area CSEG    (CODE)
                                    878 	.area CONST   (CODE)
      000031                        879 ___str_3:
      000031 50 41 52 54 49 41 4C   880 	.ascii "PARTIAL base=0x%04x "
             20 62 61 73 65 3D 30
             78 25 30 34 78 20
      000045 00                     881 	.db 0x00
                                    882 	.area CSEG    (CODE)
                                    883 	.area CONST   (CODE)
      000046                        884 ___str_4:
      000046 69 6E 74 65 72 72 75   885 	.ascii "interrupted"
             70 74 65 64
      000051 0A                     886 	.db 0x0a
      000052 00                     887 	.db 0x00
                                    888 	.area CSEG    (CODE)
                                    889 	.area XINIT   (CODE)
                                    890 	.area CABS    (ABS,CODE)
