                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module crc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _printf
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _FL
                                     21 	.globl _P
                                     22 	.globl _TF2
                                     23 	.globl _EXF2
                                     24 	.globl _RCLK
                                     25 	.globl _TCLK
                                     26 	.globl _EXEN2
                                     27 	.globl _TR2
                                     28 	.globl _C_T2
                                     29 	.globl _CP_RL2
                                     30 	.globl _T2CON_7
                                     31 	.globl _T2CON_6
                                     32 	.globl _T2CON_5
                                     33 	.globl _T2CON_4
                                     34 	.globl _T2CON_3
                                     35 	.globl _T2CON_2
                                     36 	.globl _T2CON_1
                                     37 	.globl _T2CON_0
                                     38 	.globl _PT2
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ET2
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _T2EX
                                     84 	.globl _T2
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _B
                                    110 	.globl _A
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _TH2
                                    114 	.globl _TL2
                                    115 	.globl _RCAP2H
                                    116 	.globl _RCAP2L
                                    117 	.globl _T2MOD
                                    118 	.globl _T2CON
                                    119 	.globl _IP
                                    120 	.globl _P3
                                    121 	.globl _IE
                                    122 	.globl _P2
                                    123 	.globl _SBUF
                                    124 	.globl _SCON
                                    125 	.globl _P1
                                    126 	.globl _TH1
                                    127 	.globl _TH0
                                    128 	.globl _TL1
                                    129 	.globl _TL0
                                    130 	.globl _TMOD
                                    131 	.globl _TCON
                                    132 	.globl _PCON
                                    133 	.globl _DPH
                                    134 	.globl _DPL
                                    135 	.globl _SP
                                    136 	.globl _P0
                                    137 	.globl _intr
                                    138 	.globl _putchar
                                    139 	.globl _getchar
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0	=	0x0080
                           000081   146 _SP	=	0x0081
                           000082   147 _DPL	=	0x0082
                           000083   148 _DPH	=	0x0083
                           000087   149 _PCON	=	0x0087
                           000088   150 _TCON	=	0x0088
                           000089   151 _TMOD	=	0x0089
                           00008A   152 _TL0	=	0x008a
                           00008B   153 _TL1	=	0x008b
                           00008C   154 _TH0	=	0x008c
                           00008D   155 _TH1	=	0x008d
                           000090   156 _P1	=	0x0090
                           000098   157 _SCON	=	0x0098
                           000099   158 _SBUF	=	0x0099
                           0000A0   159 _P2	=	0x00a0
                           0000A8   160 _IE	=	0x00a8
                           0000B0   161 _P3	=	0x00b0
                           0000B8   162 _IP	=	0x00b8
                           0000C8   163 _T2CON	=	0x00c8
                           0000C9   164 _T2MOD	=	0x00c9
                           0000CA   165 _RCAP2L	=	0x00ca
                           0000CB   166 _RCAP2H	=	0x00cb
                           0000CC   167 _TL2	=	0x00cc
                           0000CD   168 _TH2	=	0x00cd
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000E0   171 _A	=	0x00e0
                           0000F0   172 _B	=	0x00f0
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000090   202 _T2	=	0x0090
                           000091   203 _T2EX	=	0x0091
                           000098   204 _RI	=	0x0098
                           000099   205 _TI	=	0x0099
                           00009A   206 _RB8	=	0x009a
                           00009B   207 _TB8	=	0x009b
                           00009C   208 _REN	=	0x009c
                           00009D   209 _SM2	=	0x009d
                           00009E   210 _SM1	=	0x009e
                           00009F   211 _SM0	=	0x009f
                           0000A0   212 _P2_0	=	0x00a0
                           0000A1   213 _P2_1	=	0x00a1
                           0000A2   214 _P2_2	=	0x00a2
                           0000A3   215 _P2_3	=	0x00a3
                           0000A4   216 _P2_4	=	0x00a4
                           0000A5   217 _P2_5	=	0x00a5
                           0000A6   218 _P2_6	=	0x00a6
                           0000A7   219 _P2_7	=	0x00a7
                           0000A8   220 _EX0	=	0x00a8
                           0000A9   221 _ET0	=	0x00a9
                           0000AA   222 _EX1	=	0x00aa
                           0000AB   223 _ET1	=	0x00ab
                           0000AC   224 _ES	=	0x00ac
                           0000AD   225 _ET2	=	0x00ad
                           0000AF   226 _EA	=	0x00af
                           0000B0   227 _P3_0	=	0x00b0
                           0000B1   228 _P3_1	=	0x00b1
                           0000B2   229 _P3_2	=	0x00b2
                           0000B3   230 _P3_3	=	0x00b3
                           0000B4   231 _P3_4	=	0x00b4
                           0000B5   232 _P3_5	=	0x00b5
                           0000B6   233 _P3_6	=	0x00b6
                           0000B7   234 _P3_7	=	0x00b7
                           0000B0   235 _RXD	=	0x00b0
                           0000B1   236 _TXD	=	0x00b1
                           0000B2   237 _INT0	=	0x00b2
                           0000B3   238 _INT1	=	0x00b3
                           0000B4   239 _T0	=	0x00b4
                           0000B5   240 _T1	=	0x00b5
                           0000B6   241 _WR	=	0x00b6
                           0000B7   242 _RD	=	0x00b7
                           0000B8   243 _PX0	=	0x00b8
                           0000B9   244 _PT0	=	0x00b9
                           0000BA   245 _PX1	=	0x00ba
                           0000BB   246 _PT1	=	0x00bb
                           0000BC   247 _PS	=	0x00bc
                           0000BD   248 _PT2	=	0x00bd
                           0000C8   249 _T2CON_0	=	0x00c8
                           0000C9   250 _T2CON_1	=	0x00c9
                           0000CA   251 _T2CON_2	=	0x00ca
                           0000CB   252 _T2CON_3	=	0x00cb
                           0000CC   253 _T2CON_4	=	0x00cc
                           0000CD   254 _T2CON_5	=	0x00cd
                           0000CE   255 _T2CON_6	=	0x00ce
                           0000CF   256 _T2CON_7	=	0x00cf
                           0000C8   257 _CP_RL2	=	0x00c8
                           0000C9   258 _C_T2	=	0x00c9
                           0000CA   259 _TR2	=	0x00ca
                           0000CB   260 _EXEN2	=	0x00cb
                           0000CC   261 _TCLK	=	0x00cc
                           0000CD   262 _RCLK	=	0x00cd
                           0000CE   263 _EXF2	=	0x00ce
                           0000CF   264 _TF2	=	0x00cf
                           0000D0   265 _P	=	0x00d0
                           0000D1   266 _FL	=	0x00d1
                           0000D2   267 _OV	=	0x00d2
                           0000D3   268 _RS0	=	0x00d3
                           0000D4   269 _RS1	=	0x00d4
                           0000D5   270 _F0	=	0x00d5
                           0000D6   271 _AC	=	0x00d6
                           0000D7   272 _CY	=	0x00d7
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; internal ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area DSEG    (DATA)
                                    284 ;--------------------------------------------------------
                                    285 ; overlayable items in internal ram 
                                    286 ;--------------------------------------------------------
                                    287 ;--------------------------------------------------------
                                    288 ; Stack segment in internal ram 
                                    289 ;--------------------------------------------------------
                                    290 	.area	SSEG
      000000                        291 __start__stack:
      000000                        292 	.ds	1
                                    293 
                                    294 ;--------------------------------------------------------
                                    295 ; indirectly addressable internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area ISEG    (DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; absolute internal ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area IABS    (ABS,DATA)
                                    302 	.area IABS    (ABS,DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; bit data
                                    305 ;--------------------------------------------------------
                                    306 	.area BSEG    (BIT)
                                    307 ;--------------------------------------------------------
                                    308 ; paged external ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area PSEG    (PAG,XDATA)
                                    311 ;--------------------------------------------------------
                                    312 ; external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area XSEG    (XDATA)
      000000                        315 _intr::
      000000                        316 	.ds 2
      000002                        317 _ccrcb_init_r_65536_20:
      000002                        318 	.ds 3
      000005                        319 _ccrcb_PARM_2:
      000005                        320 	.ds 1
      000006                        321 _ccrcb_r_65536_22:
      000006                        322 	.ds 3
      000009                        323 _ccrcb_rt_65536_23:
      000009                        324 	.ds 2
      00000B                        325 _ccrcb_bitp_65536_23:
      00000B                        326 	.ds 1
      00000C                        327 _ccrcb_finish_r_65536_25:
      00000C                        328 	.ds 3
      00000F                        329 _calc_crc_PARM_2:
      00000F                        330 	.ds 2
      000011                        331 _calc_crc_base_65536_27:
      000011                        332 	.ds 3
      000014                        333 _calc_crc_crc_65536_28:
      000014                        334 	.ds 2
                                    335 ;--------------------------------------------------------
                                    336 ; absolute external ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XABS    (ABS,XDATA)
                                    339 ;--------------------------------------------------------
                                    340 ; external initialized ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area XISEG   (XDATA)
                                    343 	.area HOME    (CODE)
                                    344 	.area GSINIT0 (CODE)
                                    345 	.area GSINIT1 (CODE)
                                    346 	.area GSINIT2 (CODE)
                                    347 	.area GSINIT3 (CODE)
                                    348 	.area GSINIT4 (CODE)
                                    349 	.area GSINIT5 (CODE)
                                    350 	.area GSINIT  (CODE)
                                    351 	.area GSFINAL (CODE)
                                    352 	.area CSEG    (CODE)
                                    353 ;--------------------------------------------------------
                                    354 ; interrupt vector 
                                    355 ;--------------------------------------------------------
                                    356 	.area HOME    (CODE)
      000000                        357 __interrupt_vect:
      000000 02r00r00         [24]  358 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0D         [24]  359 	ljmp	_int0
                                    360 ;--------------------------------------------------------
                                    361 ; global & static initialisations
                                    362 ;--------------------------------------------------------
                                    363 	.area HOME    (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.area GSFINAL (CODE)
                                    366 	.area GSINIT  (CODE)
                                    367 	.globl __sdcc_gsinit_startup
                                    368 	.globl __sdcc_program_startup
                                    369 	.globl __start__stack
                                    370 	.globl __mcs51_genXINIT
                                    371 	.globl __mcs51_genXRAMCLEAR
                                    372 	.globl __mcs51_genRAMCLEAR
                                    373 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  374 	ljmp	__sdcc_program_startup
                                    375 ;--------------------------------------------------------
                                    376 ; Home
                                    377 ;--------------------------------------------------------
                                    378 	.area HOME    (CODE)
                                    379 	.area HOME    (CODE)
      000006                        380 __sdcc_program_startup:
      000006 02r01rCF         [24]  381 	ljmp	_main
                                    382 ;	return from main will return to caller
                                    383 ;--------------------------------------------------------
                                    384 ; code
                                    385 ;--------------------------------------------------------
                                    386 	.area CSEG    (CODE)
                                    387 ;------------------------------------------------------------
                                    388 ;Allocation info for local variables in function 'putchar'
                                    389 ;------------------------------------------------------------
                                    390 ;c                         Allocated with name '_putchar_c_65536_14'
                                    391 ;------------------------------------------------------------
                                    392 ;	crc16.c:11: int putchar(int c) __naked {
                                    393 ;	-----------------------------------------
                                    394 ;	 function putchar
                                    395 ;	-----------------------------------------
      000000                        396 _putchar:
                                    397 ;	naked function: no prologue.
                                    398 ;	crc16.c:16: __endasm;
      000000 E5 82            [12]  399 	mov	a, dpl
      000002 02 00 30         [24]  400 	ljmp	0x0030
                                    401 ;	crc16.c:17: }
                                    402 ;	naked function: no epilogue.
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'getchar'
                                    405 ;------------------------------------------------------------
                                    406 ;	crc16.c:19: int getchar(void) {
                                    407 ;	-----------------------------------------
                                    408 ;	 function getchar
                                    409 ;	-----------------------------------------
      000005                        410 _getchar:
                           000007   411 	ar7 = 0x07
                           000006   412 	ar6 = 0x06
                           000005   413 	ar5 = 0x05
                           000004   414 	ar4 = 0x04
                           000003   415 	ar3 = 0x03
                           000002   416 	ar2 = 0x02
                           000001   417 	ar1 = 0x01
                           000000   418 	ar0 = 0x00
                                    419 ;	crc16.c:24: __endasm;
      000005 12 00 32         [24]  420 	lcall	0x0032
      000008 C2 83            [12]  421 	clr	dph
      00000A F5 82            [12]  422 	mov	dpl, a
                                    423 ;	crc16.c:25: }
      00000C 22               [24]  424 	ret
                                    425 ;------------------------------------------------------------
                                    426 ;Allocation info for local variables in function 'int0'
                                    427 ;------------------------------------------------------------
                                    428 ;	crc16.c:29: void int0(void) __interrupt 0 __using 1 {
                                    429 ;	-----------------------------------------
                                    430 ;	 function int0
                                    431 ;	-----------------------------------------
      00000D                        432 _int0:
                           00000F   433 	ar7 = 0x0f
                           00000E   434 	ar6 = 0x0e
                           00000D   435 	ar5 = 0x0d
                           00000C   436 	ar4 = 0x0c
                           00000B   437 	ar3 = 0x0b
                           00000A   438 	ar2 = 0x0a
                           000009   439 	ar1 = 0x09
                           000008   440 	ar0 = 0x08
      00000D C0 E0            [24]  441 	push	acc
      00000F C0 82            [24]  442 	push	dpl
      000011 C0 83            [24]  443 	push	dph
                                    444 ;	crc16.c:30: intr = 1;
      000013 90r00r00         [24]  445 	mov	dptr,#_intr
      000016 74 01            [12]  446 	mov	a,#0x01
      000018 F0               [24]  447 	movx	@dptr,a
      000019 E4               [12]  448 	clr	a
      00001A A3               [24]  449 	inc	dptr
      00001B F0               [24]  450 	movx	@dptr,a
                                    451 ;	crc16.c:31: }
      00001C D0 83            [24]  452 	pop	dph
      00001E D0 82            [24]  453 	pop	dpl
      000020 D0 E0            [24]  454 	pop	acc
      000022 32               [24]  455 	reti
                                    456 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    457 ;	eliminated unneeded push/pop psw
                                    458 ;	eliminated unneeded push/pop b
                                    459 ;------------------------------------------------------------
                                    460 ;Allocation info for local variables in function 'ccrcb_init'
                                    461 ;------------------------------------------------------------
                                    462 ;r                         Allocated with name '_ccrcb_init_r_65536_20'
                                    463 ;------------------------------------------------------------
                                    464 ;	crc16.c:33: static void ccrcb_init(unsigned int *r) {
                                    465 ;	-----------------------------------------
                                    466 ;	 function ccrcb_init
                                    467 ;	-----------------------------------------
      000023                        468 _ccrcb_init:
                           000007   469 	ar7 = 0x07
                           000006   470 	ar6 = 0x06
                           000005   471 	ar5 = 0x05
                           000004   472 	ar4 = 0x04
                           000003   473 	ar3 = 0x03
                           000002   474 	ar2 = 0x02
                           000001   475 	ar1 = 0x01
                           000000   476 	ar0 = 0x00
      000023 AF F0            [24]  477 	mov	r7,b
      000025 AE 83            [24]  478 	mov	r6,dph
      000027 E5 82            [12]  479 	mov	a,dpl
      000029 90r00r02         [24]  480 	mov	dptr,#_ccrcb_init_r_65536_20
      00002C F0               [24]  481 	movx	@dptr,a
      00002D EE               [12]  482 	mov	a,r6
      00002E A3               [24]  483 	inc	dptr
      00002F F0               [24]  484 	movx	@dptr,a
      000030 EF               [12]  485 	mov	a,r7
      000031 A3               [24]  486 	inc	dptr
      000032 F0               [24]  487 	movx	@dptr,a
                                    488 ;	crc16.c:34: *r = ACC_INITIAL;
      000033 90r00r02         [24]  489 	mov	dptr,#_ccrcb_init_r_65536_20
      000036 E0               [24]  490 	movx	a,@dptr
      000037 FD               [12]  491 	mov	r5,a
      000038 A3               [24]  492 	inc	dptr
      000039 E0               [24]  493 	movx	a,@dptr
      00003A FE               [12]  494 	mov	r6,a
      00003B A3               [24]  495 	inc	dptr
      00003C E0               [24]  496 	movx	a,@dptr
      00003D FF               [12]  497 	mov	r7,a
      00003E 8D 82            [24]  498 	mov	dpl,r5
      000040 8E 83            [24]  499 	mov	dph,r6
      000042 8F F0            [24]  500 	mov	b,r7
      000044 74 FF            [12]  501 	mov	a,#0xff
      000046 12r00r00         [24]  502 	lcall	__gptrput
      000049 A3               [24]  503 	inc	dptr
                                    504 ;	crc16.c:35: return;
                                    505 ;	crc16.c:36: }
      00004A 02r00r00         [24]  506 	ljmp	__gptrput
                                    507 ;------------------------------------------------------------
                                    508 ;Allocation info for local variables in function 'ccrcb'
                                    509 ;------------------------------------------------------------
                                    510 ;oct                       Allocated with name '_ccrcb_PARM_2'
                                    511 ;r                         Allocated with name '_ccrcb_r_65536_22'
                                    512 ;rt                        Allocated with name '_ccrcb_rt_65536_23'
                                    513 ;bitp                      Allocated with name '_ccrcb_bitp_65536_23'
                                    514 ;------------------------------------------------------------
                                    515 ;	crc16.c:38: static void ccrcb(unsigned int *r, unsigned char oct) {
                                    516 ;	-----------------------------------------
                                    517 ;	 function ccrcb
                                    518 ;	-----------------------------------------
      00004D                        519 _ccrcb:
      00004D AF F0            [24]  520 	mov	r7,b
      00004F AE 83            [24]  521 	mov	r6,dph
      000051 E5 82            [12]  522 	mov	a,dpl
      000053 90r00r06         [24]  523 	mov	dptr,#_ccrcb_r_65536_22
      000056 F0               [24]  524 	movx	@dptr,a
      000057 EE               [12]  525 	mov	a,r6
      000058 A3               [24]  526 	inc	dptr
      000059 F0               [24]  527 	movx	@dptr,a
      00005A EF               [12]  528 	mov	a,r7
      00005B A3               [24]  529 	inc	dptr
      00005C F0               [24]  530 	movx	@dptr,a
                                    531 ;	crc16.c:42: for (rt = *r, bitp = 0x80u; bitp; bitp >>= 1)
      00005D 90r00r06         [24]  532 	mov	dptr,#_ccrcb_r_65536_22
      000060 E0               [24]  533 	movx	a,@dptr
      000061 FD               [12]  534 	mov	r5,a
      000062 A3               [24]  535 	inc	dptr
      000063 E0               [24]  536 	movx	a,@dptr
      000064 FE               [12]  537 	mov	r6,a
      000065 A3               [24]  538 	inc	dptr
      000066 E0               [24]  539 	movx	a,@dptr
      000067 FF               [12]  540 	mov	r7,a
      000068 8D 82            [24]  541 	mov	dpl,r5
      00006A 8E 83            [24]  542 	mov	dph,r6
      00006C 8F F0            [24]  543 	mov	b,r7
      00006E 12r00r00         [24]  544 	lcall	__gptrget
      000071 FD               [12]  545 	mov	r5,a
      000072 A3               [24]  546 	inc	dptr
      000073 12r00r00         [24]  547 	lcall	__gptrget
      000076 FE               [12]  548 	mov	r6,a
      000077 90r00r09         [24]  549 	mov	dptr,#_ccrcb_rt_65536_23
      00007A ED               [12]  550 	mov	a,r5
      00007B F0               [24]  551 	movx	@dptr,a
      00007C EE               [12]  552 	mov	a,r6
      00007D A3               [24]  553 	inc	dptr
      00007E F0               [24]  554 	movx	@dptr,a
      00007F 90r00r0B         [24]  555 	mov	dptr,#_ccrcb_bitp_65536_23
      000082 74 80            [12]  556 	mov	a,#0x80
      000084 F0               [24]  557 	movx	@dptr,a
      000085 90r00r05         [24]  558 	mov	dptr,#_ccrcb_PARM_2
      000088 E0               [24]  559 	movx	a,@dptr
      000089 FF               [12]  560 	mov	r7,a
      00008A                        561 00103$:
      00008A 90r00r0B         [24]  562 	mov	dptr,#_ccrcb_bitp_65536_23
      00008D E0               [24]  563 	movx	a,@dptr
      00008E FE               [12]  564 	mov	r6,a
      00008F E0               [24]  565 	movx	a,@dptr
      000090 60 4D            [24]  566 	jz	00101$
                                    567 ;	crc16.c:43: rt = ((rt >> 15) ^ (!!(oct & bitp))) ? ((rt << 1) ^ POLY) : (rt << 1);
      000092 90r00r09         [24]  568 	mov	dptr,#_ccrcb_rt_65536_23
      000095 E0               [24]  569 	movx	a,@dptr
      000096 FC               [12]  570 	mov	r4,a
      000097 A3               [24]  571 	inc	dptr
      000098 E0               [24]  572 	movx	a,@dptr
      000099 FD               [12]  573 	mov	r5,a
      00009A 23               [12]  574 	rl	a
      00009B 54 01            [12]  575 	anl	a,#0x01
      00009D FA               [12]  576 	mov	r2,a
      00009E 7B 00            [12]  577 	mov	r3,#0x00
      0000A0 EF               [12]  578 	mov	a,r7
      0000A1 52 06            [12]  579 	anl	ar6,a
      0000A3 EE               [12]  580 	mov	a,r6
      0000A4 B4 01 00         [24]  581 	cjne	a,#0x01,00122$
      0000A7                        582 00122$:
      0000A7 B3               [12]  583 	cpl	c
      0000A8 E4               [12]  584 	clr	a
      0000A9 33               [12]  585 	rlc	a
      0000AA F9               [12]  586 	mov	r1,a
      0000AB 33               [12]  587 	rlc	a
      0000AC 95 E0            [12]  588 	subb	a,acc
      0000AE FE               [12]  589 	mov	r6,a
      0000AF E9               [12]  590 	mov	a,r1
      0000B0 62 02            [12]  591 	xrl	ar2,a
      0000B2 EE               [12]  592 	mov	a,r6
      0000B3 62 03            [12]  593 	xrl	ar3,a
      0000B5 EA               [12]  594 	mov	a,r2
      0000B6 4B               [12]  595 	orl	a,r3
      0000B7 60 0E            [24]  596 	jz	00107$
      0000B9 EC               [12]  597 	mov	a,r4
      0000BA 2C               [12]  598 	add	a,r4
      0000BB FB               [12]  599 	mov	r3,a
      0000BC ED               [12]  600 	mov	a,r5
      0000BD 33               [12]  601 	rlc	a
      0000BE FE               [12]  602 	mov	r6,a
      0000BF 63 03 21         [24]  603 	xrl	ar3,#0x21
      0000C2 63 06 10         [24]  604 	xrl	ar6,#0x10
      0000C5 80 06            [24]  605 	sjmp	00108$
      0000C7                        606 00107$:
      0000C7 EC               [12]  607 	mov	a,r4
      0000C8 2C               [12]  608 	add	a,r4
      0000C9 FB               [12]  609 	mov	r3,a
      0000CA ED               [12]  610 	mov	a,r5
      0000CB 33               [12]  611 	rlc	a
      0000CC FE               [12]  612 	mov	r6,a
      0000CD                        613 00108$:
      0000CD 90r00r09         [24]  614 	mov	dptr,#_ccrcb_rt_65536_23
      0000D0 EB               [12]  615 	mov	a,r3
      0000D1 F0               [24]  616 	movx	@dptr,a
      0000D2 EE               [12]  617 	mov	a,r6
      0000D3 A3               [24]  618 	inc	dptr
      0000D4 F0               [24]  619 	movx	@dptr,a
                                    620 ;	crc16.c:42: for (rt = *r, bitp = 0x80u; bitp; bitp >>= 1)
      0000D5 90r00r0B         [24]  621 	mov	dptr,#_ccrcb_bitp_65536_23
      0000D8 E0               [24]  622 	movx	a,@dptr
      0000D9 C3               [12]  623 	clr	c
      0000DA 13               [12]  624 	rrc	a
      0000DB FE               [12]  625 	mov	r6,a
      0000DC F0               [24]  626 	movx	@dptr,a
      0000DD 80 AB            [24]  627 	sjmp	00103$
      0000DF                        628 00101$:
                                    629 ;	crc16.c:44: *r = rt;
      0000DF 90r00r06         [24]  630 	mov	dptr,#_ccrcb_r_65536_22
      0000E2 E0               [24]  631 	movx	a,@dptr
      0000E3 FD               [12]  632 	mov	r5,a
      0000E4 A3               [24]  633 	inc	dptr
      0000E5 E0               [24]  634 	movx	a,@dptr
      0000E6 FE               [12]  635 	mov	r6,a
      0000E7 A3               [24]  636 	inc	dptr
      0000E8 E0               [24]  637 	movx	a,@dptr
      0000E9 FF               [12]  638 	mov	r7,a
      0000EA 90r00r09         [24]  639 	mov	dptr,#_ccrcb_rt_65536_23
      0000ED E0               [24]  640 	movx	a,@dptr
      0000EE FB               [12]  641 	mov	r3,a
      0000EF A3               [24]  642 	inc	dptr
      0000F0 E0               [24]  643 	movx	a,@dptr
      0000F1 FC               [12]  644 	mov	r4,a
      0000F2 8D 82            [24]  645 	mov	dpl,r5
      0000F4 8E 83            [24]  646 	mov	dph,r6
      0000F6 8F F0            [24]  647 	mov	b,r7
      0000F8 EB               [12]  648 	mov	a,r3
      0000F9 12r00r00         [24]  649 	lcall	__gptrput
      0000FC A3               [24]  650 	inc	dptr
      0000FD EC               [12]  651 	mov	a,r4
                                    652 ;	crc16.c:45: }
      0000FE 02r00r00         [24]  653 	ljmp	__gptrput
                                    654 ;------------------------------------------------------------
                                    655 ;Allocation info for local variables in function 'ccrcb_finish'
                                    656 ;------------------------------------------------------------
                                    657 ;r                         Allocated with name '_ccrcb_finish_r_65536_25'
                                    658 ;------------------------------------------------------------
                                    659 ;	crc16.c:47: static void ccrcb_finish(unsigned int *r) {
                                    660 ;	-----------------------------------------
                                    661 ;	 function ccrcb_finish
                                    662 ;	-----------------------------------------
      000101                        663 _ccrcb_finish:
      000101 AF F0            [24]  664 	mov	r7,b
      000103 AE 83            [24]  665 	mov	r6,dph
      000105 E5 82            [12]  666 	mov	a,dpl
      000107 90r00r0C         [24]  667 	mov	dptr,#_ccrcb_finish_r_65536_25
      00010A F0               [24]  668 	movx	@dptr,a
      00010B EE               [12]  669 	mov	a,r6
      00010C A3               [24]  670 	inc	dptr
      00010D F0               [24]  671 	movx	@dptr,a
      00010E EF               [12]  672 	mov	a,r7
      00010F A3               [24]  673 	inc	dptr
      000110 F0               [24]  674 	movx	@dptr,a
                                    675 ;	crc16.c:48: *r ^= ACC_FINAL;
      000111 90r00r0C         [24]  676 	mov	dptr,#_ccrcb_finish_r_65536_25
      000114 E0               [24]  677 	movx	a,@dptr
      000115 FD               [12]  678 	mov	r5,a
      000116 A3               [24]  679 	inc	dptr
      000117 E0               [24]  680 	movx	a,@dptr
      000118 FE               [12]  681 	mov	r6,a
      000119 A3               [24]  682 	inc	dptr
      00011A E0               [24]  683 	movx	a,@dptr
      00011B FF               [12]  684 	mov	r7,a
      00011C 8D 82            [24]  685 	mov	dpl,r5
      00011E 8E 83            [24]  686 	mov	dph,r6
      000120 8F F0            [24]  687 	mov	b,r7
      000122 12r00r00         [24]  688 	lcall	__gptrget
      000125 FB               [12]  689 	mov	r3,a
      000126 A3               [24]  690 	inc	dptr
      000127 12r00r00         [24]  691 	lcall	__gptrget
      00012A FC               [12]  692 	mov	r4,a
      00012B 8D 82            [24]  693 	mov	dpl,r5
      00012D 8E 83            [24]  694 	mov	dph,r6
      00012F 8F F0            [24]  695 	mov	b,r7
      000131 EB               [12]  696 	mov	a,r3
      000132 12r00r00         [24]  697 	lcall	__gptrput
      000135 A3               [24]  698 	inc	dptr
      000136 EC               [12]  699 	mov	a,r4
                                    700 ;	crc16.c:49: }
      000137 02r00r00         [24]  701 	ljmp	__gptrput
                                    702 ;------------------------------------------------------------
                                    703 ;Allocation info for local variables in function 'calc_crc'
                                    704 ;------------------------------------------------------------
                                    705 ;len                       Allocated with name '_calc_crc_PARM_2'
                                    706 ;base                      Allocated with name '_calc_crc_base_65536_27'
                                    707 ;off                       Allocated with name '_calc_crc_off_65536_28'
                                    708 ;crc                       Allocated with name '_calc_crc_crc_65536_28'
                                    709 ;------------------------------------------------------------
                                    710 ;	crc16.c:51: static unsigned int calc_crc(unsigned char *base, unsigned int len) {
                                    711 ;	-----------------------------------------
                                    712 ;	 function calc_crc
                                    713 ;	-----------------------------------------
      00013A                        714 _calc_crc:
      00013A AF F0            [24]  715 	mov	r7,b
      00013C AE 83            [24]  716 	mov	r6,dph
      00013E E5 82            [12]  717 	mov	a,dpl
      000140 90r00r11         [24]  718 	mov	dptr,#_calc_crc_base_65536_27
      000143 F0               [24]  719 	movx	@dptr,a
      000144 EE               [12]  720 	mov	a,r6
      000145 A3               [24]  721 	inc	dptr
      000146 F0               [24]  722 	movx	@dptr,a
      000147 EF               [12]  723 	mov	a,r7
      000148 A3               [24]  724 	inc	dptr
      000149 F0               [24]  725 	movx	@dptr,a
                                    726 ;	crc16.c:54: ccrcb_init(&crc);
      00014A 90r00r14         [24]  727 	mov	dptr,#_calc_crc_crc_65536_28
      00014D 75 F0 00         [24]  728 	mov	b,#0x00
      000150 12r00r23         [24]  729 	lcall	_ccrcb_init
                                    730 ;	crc16.c:55: for (off = 0u; off < len; off++)
      000153 90r00r11         [24]  731 	mov	dptr,#_calc_crc_base_65536_27
      000156 E0               [24]  732 	movx	a,@dptr
      000157 FD               [12]  733 	mov	r5,a
      000158 A3               [24]  734 	inc	dptr
      000159 E0               [24]  735 	movx	a,@dptr
      00015A FE               [12]  736 	mov	r6,a
      00015B A3               [24]  737 	inc	dptr
      00015C E0               [24]  738 	movx	a,@dptr
      00015D FF               [12]  739 	mov	r7,a
      00015E 90r00r0F         [24]  740 	mov	dptr,#_calc_crc_PARM_2
      000161 E0               [24]  741 	movx	a,@dptr
      000162 FB               [12]  742 	mov	r3,a
      000163 A3               [24]  743 	inc	dptr
      000164 E0               [24]  744 	movx	a,@dptr
      000165 FC               [12]  745 	mov	r4,a
      000166 79 00            [12]  746 	mov	r1,#0x00
      000168 7A 00            [12]  747 	mov	r2,#0x00
      00016A                        748 00103$:
      00016A C3               [12]  749 	clr	c
      00016B E9               [12]  750 	mov	a,r1
      00016C 9B               [12]  751 	subb	a,r3
      00016D EA               [12]  752 	mov	a,r2
      00016E 9C               [12]  753 	subb	a,r4
      00016F 50 49            [24]  754 	jnc	00101$
                                    755 ;	crc16.c:56: ccrcb(&crc, base[off]);
      000171 C0 03            [24]  756 	push	ar3
      000173 C0 04            [24]  757 	push	ar4
      000175 E9               [12]  758 	mov	a,r1
      000176 2D               [12]  759 	add	a,r5
      000177 F8               [12]  760 	mov	r0,a
      000178 EA               [12]  761 	mov	a,r2
      000179 3E               [12]  762 	addc	a,r6
      00017A FB               [12]  763 	mov	r3,a
      00017B 8F 04            [24]  764 	mov	ar4,r7
      00017D 88 82            [24]  765 	mov	dpl,r0
      00017F 8B 83            [24]  766 	mov	dph,r3
      000181 8C F0            [24]  767 	mov	b,r4
      000183 12r00r00         [24]  768 	lcall	__gptrget
      000186 90r00r05         [24]  769 	mov	dptr,#_ccrcb_PARM_2
      000189 F0               [24]  770 	movx	@dptr,a
      00018A 90r00r14         [24]  771 	mov	dptr,#_calc_crc_crc_65536_28
      00018D 75 F0 00         [24]  772 	mov	b,#0x00
      000190 C0 07            [24]  773 	push	ar7
      000192 C0 06            [24]  774 	push	ar6
      000194 C0 05            [24]  775 	push	ar5
      000196 C0 04            [24]  776 	push	ar4
      000198 C0 03            [24]  777 	push	ar3
      00019A C0 02            [24]  778 	push	ar2
      00019C C0 01            [24]  779 	push	ar1
      00019E 12r00r4D         [24]  780 	lcall	_ccrcb
      0001A1 D0 01            [24]  781 	pop	ar1
      0001A3 D0 02            [24]  782 	pop	ar2
      0001A5 D0 03            [24]  783 	pop	ar3
      0001A7 D0 04            [24]  784 	pop	ar4
      0001A9 D0 05            [24]  785 	pop	ar5
      0001AB D0 06            [24]  786 	pop	ar6
      0001AD D0 07            [24]  787 	pop	ar7
                                    788 ;	crc16.c:55: for (off = 0u; off < len; off++)
      0001AF 09               [12]  789 	inc	r1
      0001B0 B9 00 01         [24]  790 	cjne	r1,#0x00,00117$
      0001B3 0A               [12]  791 	inc	r2
      0001B4                        792 00117$:
      0001B4 D0 04            [24]  793 	pop	ar4
      0001B6 D0 03            [24]  794 	pop	ar3
      0001B8 80 B0            [24]  795 	sjmp	00103$
      0001BA                        796 00101$:
                                    797 ;	crc16.c:57: ccrcb_finish(&crc);
      0001BA 90r00r14         [24]  798 	mov	dptr,#_calc_crc_crc_65536_28
      0001BD 75 F0 00         [24]  799 	mov	b,#0x00
      0001C0 12r01r01         [24]  800 	lcall	_ccrcb_finish
                                    801 ;	crc16.c:59: return crc;
      0001C3 90r00r14         [24]  802 	mov	dptr,#_calc_crc_crc_65536_28
      0001C6 E0               [24]  803 	movx	a,@dptr
      0001C7 FE               [12]  804 	mov	r6,a
      0001C8 A3               [24]  805 	inc	dptr
      0001C9 E0               [24]  806 	movx	a,@dptr
                                    807 ;	crc16.c:60: }
      0001CA 8E 82            [24]  808 	mov	dpl,r6
      0001CC F5 83            [12]  809 	mov	dph,a
      0001CE 22               [24]  810 	ret
                                    811 ;------------------------------------------------------------
                                    812 ;Allocation info for local variables in function 'main'
                                    813 ;------------------------------------------------------------
                                    814 ;base                      Allocated with name '_main_base_65536_31'
                                    815 ;len                       Allocated with name '_main_len_65536_31'
                                    816 ;crc                       Allocated with name '_main_crc_65536_31'
                                    817 ;------------------------------------------------------------
                                    818 ;	crc16.c:64: void main(void) {
                                    819 ;	-----------------------------------------
                                    820 ;	 function main
                                    821 ;	-----------------------------------------
      0001CF                        822 _main:
                                    823 ;	crc16.c:69: intr = 0;
      0001CF 90r00r00         [24]  824 	mov	dptr,#_intr
      0001D2 E4               [12]  825 	clr	a
      0001D3 F0               [24]  826 	movx	@dptr,a
      0001D4 A3               [24]  827 	inc	dptr
      0001D5 F0               [24]  828 	movx	@dptr,a
                                    829 ;	crc16.c:71: IT0 = 1;
                                    830 ;	assignBit
      0001D6 D2 88            [12]  831 	setb	_IT0
                                    832 ;	crc16.c:72: EX0 = 1;
                                    833 ;	assignBit
      0001D8 D2 A8            [12]  834 	setb	_EX0
                                    835 ;	crc16.c:73: EA = 1;
                                    836 ;	assignBit
      0001DA D2 AF            [12]  837 	setb	_EA
                                    838 ;	crc16.c:75: for (base = (unsigned char *)0x0u; 1; base += (len >> 1)) {
      0001DC 7D 00            [12]  839 	mov	r5,#0x00
      0001DE 7E 00            [12]  840 	mov	r6,#0x00
      0001E0 7F 00            [12]  841 	mov	r7,#0x00
      0001E2                        842 00104$:
                                    843 ;	crc16.c:76: printf("base=0x%04x ", (unsigned int)base);
      0001E2 8D 02            [24]  844 	mov	ar2,r5
      0001E4 8E 03            [24]  845 	mov	ar3,r6
      0001E6 8F 04            [24]  846 	mov	ar4,r7
      0001E8 C0 07            [24]  847 	push	ar7
      0001EA C0 06            [24]  848 	push	ar6
      0001EC C0 05            [24]  849 	push	ar5
      0001EE C0 02            [24]  850 	push	ar2
      0001F0 C0 03            [24]  851 	push	ar3
      0001F2 74r00            [12]  852 	mov	a,#___str_0
      0001F4 C0 E0            [24]  853 	push	acc
      0001F6 74s00            [12]  854 	mov	a,#(___str_0 >> 8)
      0001F8 C0 E0            [24]  855 	push	acc
      0001FA 74 80            [12]  856 	mov	a,#0x80
      0001FC C0 E0            [24]  857 	push	acc
      0001FE 12r00r00         [24]  858 	lcall	_printf
      000201 E5 81            [12]  859 	mov	a,sp
      000203 24 FB            [12]  860 	add	a,#0xfb
      000205 F5 81            [12]  861 	mov	sp,a
                                    862 ;	crc16.c:77: printf("len=0x%04x ", len);
      000207 E4               [12]  863 	clr	a
      000208 C0 E0            [24]  864 	push	acc
      00020A 74 20            [12]  865 	mov	a,#0x20
      00020C C0 E0            [24]  866 	push	acc
      00020E 74r0D            [12]  867 	mov	a,#___str_1
      000210 C0 E0            [24]  868 	push	acc
      000212 74s00            [12]  869 	mov	a,#(___str_1 >> 8)
      000214 C0 E0            [24]  870 	push	acc
      000216 74 80            [12]  871 	mov	a,#0x80
      000218 C0 E0            [24]  872 	push	acc
      00021A 12r00r00         [24]  873 	lcall	_printf
      00021D E5 81            [12]  874 	mov	a,sp
      00021F 24 FB            [12]  875 	add	a,#0xfb
      000221 F5 81            [12]  876 	mov	sp,a
      000223 D0 05            [24]  877 	pop	ar5
      000225 D0 06            [24]  878 	pop	ar6
      000227 D0 07            [24]  879 	pop	ar7
                                    880 ;	crc16.c:78: crc = calc_crc(base, len);
      000229 90r00r0F         [24]  881 	mov	dptr,#_calc_crc_PARM_2
      00022C E4               [12]  882 	clr	a
      00022D F0               [24]  883 	movx	@dptr,a
      00022E 74 20            [12]  884 	mov	a,#0x20
      000230 A3               [24]  885 	inc	dptr
      000231 F0               [24]  886 	movx	@dptr,a
      000232 8D 82            [24]  887 	mov	dpl,r5
      000234 8E 83            [24]  888 	mov	dph,r6
      000236 8F F0            [24]  889 	mov	b,r7
      000238 C0 07            [24]  890 	push	ar7
      00023A C0 06            [24]  891 	push	ar6
      00023C C0 05            [24]  892 	push	ar5
      00023E 12r01r3A         [24]  893 	lcall	_calc_crc
      000241 AB 82            [24]  894 	mov	r3,dpl
      000243 AC 83            [24]  895 	mov	r4,dph
                                    896 ;	crc16.c:79: printf("CRC16=0x%04x\n\r", crc);
      000245 C0 03            [24]  897 	push	ar3
      000247 C0 04            [24]  898 	push	ar4
      000249 74r19            [12]  899 	mov	a,#___str_2
      00024B C0 E0            [24]  900 	push	acc
      00024D 74s00            [12]  901 	mov	a,#(___str_2 >> 8)
      00024F C0 E0            [24]  902 	push	acc
      000251 74 80            [12]  903 	mov	a,#0x80
      000253 C0 E0            [24]  904 	push	acc
      000255 12r00r00         [24]  905 	lcall	_printf
      000258 E5 81            [12]  906 	mov	a,sp
      00025A 24 FB            [12]  907 	add	a,#0xfb
      00025C F5 81            [12]  908 	mov	sp,a
      00025E D0 05            [24]  909 	pop	ar5
      000260 D0 06            [24]  910 	pop	ar6
      000262 D0 07            [24]  911 	pop	ar7
                                    912 ;	crc16.c:81: if (intr) {
      000264 90r00r00         [24]  913 	mov	dptr,#_intr
      000267 E0               [24]  914 	movx	a,@dptr
      000268 F5 F0            [12]  915 	mov	b,a
      00026A A3               [24]  916 	inc	dptr
      00026B E0               [24]  917 	movx	a,@dptr
      00026C 45 F0            [12]  918 	orl	a,b
      00026E 60 17            [24]  919 	jz	00105$
                                    920 ;	crc16.c:82: printf("interrupted\n");
      000270 74r28            [12]  921 	mov	a,#___str_3
      000272 C0 E0            [24]  922 	push	acc
      000274 74s00            [12]  923 	mov	a,#(___str_3 >> 8)
      000276 C0 E0            [24]  924 	push	acc
      000278 74 80            [12]  925 	mov	a,#0x80
      00027A C0 E0            [24]  926 	push	acc
      00027C 12r00r00         [24]  927 	lcall	_printf
      00027F 15 81            [12]  928 	dec	sp
      000281 15 81            [12]  929 	dec	sp
      000283 15 81            [12]  930 	dec	sp
                                    931 ;	crc16.c:83: break;
      000285 80 07            [24]  932 	sjmp	00103$
      000287                        933 00105$:
                                    934 ;	crc16.c:75: for (base = (unsigned char *)0x0u; 1; base += (len >> 1)) {
      000287 74 10            [12]  935 	mov	a,#0x10
      000289 2E               [12]  936 	add	a,r6
      00028A FE               [12]  937 	mov	r6,a
      00028B 02r01rE2         [24]  938 	ljmp	00104$
      00028E                        939 00103$:
                                    940 ;	crc16.c:90: __endasm;
      00028E 02 00 00         [24]  941 	ljmp	0
                                    942 ;	crc16.c:95: }
      000291 22               [24]  943 	ret
                                    944 	.area CSEG    (CODE)
                                    945 	.area CONST   (CODE)
                                    946 	.area CONST   (CODE)
      000000                        947 ___str_0:
      000000 62 61 73 65 3D 30 78   948 	.ascii "base=0x%04x "
             25 30 34 78 20
      00000C 00                     949 	.db 0x00
                                    950 	.area CSEG    (CODE)
                                    951 	.area CONST   (CODE)
      00000D                        952 ___str_1:
      00000D 6C 65 6E 3D 30 78 25   953 	.ascii "len=0x%04x "
             30 34 78 20
      000018 00                     954 	.db 0x00
                                    955 	.area CSEG    (CODE)
                                    956 	.area CONST   (CODE)
      000019                        957 ___str_2:
      000019 43 52 43 31 36 3D 30   958 	.ascii "CRC16=0x%04x"
             78 25 30 34 78
      000025 0A                     959 	.db 0x0a
      000026 0D                     960 	.db 0x0d
      000027 00                     961 	.db 0x00
                                    962 	.area CSEG    (CODE)
                                    963 	.area CONST   (CODE)
      000028                        964 ___str_3:
      000028 69 6E 74 65 72 72 75   965 	.ascii "interrupted"
             70 74 65 64
      000033 0A                     966 	.db 0x0a
      000034 00                     967 	.db 0x00
                                    968 	.area CSEG    (CODE)
                                    969 	.area XINIT   (CODE)
                                    970 	.area CABS    (ABS,CODE)
