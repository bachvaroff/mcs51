                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module crc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _printf
                                     13 	.globl _CY
                                     14 	.globl _AC
                                     15 	.globl _F0
                                     16 	.globl _RS1
                                     17 	.globl _RS0
                                     18 	.globl _OV
                                     19 	.globl _FL
                                     20 	.globl _P
                                     21 	.globl _TF2
                                     22 	.globl _EXF2
                                     23 	.globl _RCLK
                                     24 	.globl _TCLK
                                     25 	.globl _EXEN2
                                     26 	.globl _TR2
                                     27 	.globl _C_T2
                                     28 	.globl _CP_RL2
                                     29 	.globl _T2CON_7
                                     30 	.globl _T2CON_6
                                     31 	.globl _T2CON_5
                                     32 	.globl _T2CON_4
                                     33 	.globl _T2CON_3
                                     34 	.globl _T2CON_2
                                     35 	.globl _T2CON_1
                                     36 	.globl _T2CON_0
                                     37 	.globl _PT2
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ET2
                                     61 	.globl _ES
                                     62 	.globl _ET1
                                     63 	.globl _EX1
                                     64 	.globl _ET0
                                     65 	.globl _EX0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _SM0
                                     75 	.globl _SM1
                                     76 	.globl _SM2
                                     77 	.globl _REN
                                     78 	.globl _TB8
                                     79 	.globl _RB8
                                     80 	.globl _TI
                                     81 	.globl _RI
                                     82 	.globl _T2EX
                                     83 	.globl _T2
                                     84 	.globl _P1_7
                                     85 	.globl _P1_6
                                     86 	.globl _P1_5
                                     87 	.globl _P1_4
                                     88 	.globl _P1_3
                                     89 	.globl _P1_2
                                     90 	.globl _P1_1
                                     91 	.globl _P1_0
                                     92 	.globl _TF1
                                     93 	.globl _TR1
                                     94 	.globl _TF0
                                     95 	.globl _TR0
                                     96 	.globl _IE1
                                     97 	.globl _IT1
                                     98 	.globl _IE0
                                     99 	.globl _IT0
                                    100 	.globl _P0_7
                                    101 	.globl _P0_6
                                    102 	.globl _P0_5
                                    103 	.globl _P0_4
                                    104 	.globl _P0_3
                                    105 	.globl _P0_2
                                    106 	.globl _P0_1
                                    107 	.globl _P0_0
                                    108 	.globl _B
                                    109 	.globl _A
                                    110 	.globl _ACC
                                    111 	.globl _PSW
                                    112 	.globl _TH2
                                    113 	.globl _TL2
                                    114 	.globl _RCAP2H
                                    115 	.globl _RCAP2L
                                    116 	.globl _T2MOD
                                    117 	.globl _T2CON
                                    118 	.globl _IP
                                    119 	.globl _P3
                                    120 	.globl _IE
                                    121 	.globl _P2
                                    122 	.globl _SBUF
                                    123 	.globl _SCON
                                    124 	.globl _P1
                                    125 	.globl _TH1
                                    126 	.globl _TH0
                                    127 	.globl _TL1
                                    128 	.globl _TL0
                                    129 	.globl _TMOD
                                    130 	.globl _TCON
                                    131 	.globl _PCON
                                    132 	.globl _DPH
                                    133 	.globl _DPL
                                    134 	.globl _SP
                                    135 	.globl _P0
                                    136 	.globl _putchar
                                    137 	.globl _getchar
                                    138 ;--------------------------------------------------------
                                    139 ; special function registers
                                    140 ;--------------------------------------------------------
                                    141 	.area RSEG    (ABS,DATA)
      000000                        142 	.org 0x0000
                           000080   143 _P0	=	0x0080
                           000081   144 _SP	=	0x0081
                           000082   145 _DPL	=	0x0082
                           000083   146 _DPH	=	0x0083
                           000087   147 _PCON	=	0x0087
                           000088   148 _TCON	=	0x0088
                           000089   149 _TMOD	=	0x0089
                           00008A   150 _TL0	=	0x008a
                           00008B   151 _TL1	=	0x008b
                           00008C   152 _TH0	=	0x008c
                           00008D   153 _TH1	=	0x008d
                           000090   154 _P1	=	0x0090
                           000098   155 _SCON	=	0x0098
                           000099   156 _SBUF	=	0x0099
                           0000A0   157 _P2	=	0x00a0
                           0000A8   158 _IE	=	0x00a8
                           0000B0   159 _P3	=	0x00b0
                           0000B8   160 _IP	=	0x00b8
                           0000C8   161 _T2CON	=	0x00c8
                           0000C9   162 _T2MOD	=	0x00c9
                           0000CA   163 _RCAP2L	=	0x00ca
                           0000CB   164 _RCAP2H	=	0x00cb
                           0000CC   165 _TL2	=	0x00cc
                           0000CD   166 _TH2	=	0x00cd
                           0000D0   167 _PSW	=	0x00d0
                           0000E0   168 _ACC	=	0x00e0
                           0000E0   169 _A	=	0x00e0
                           0000F0   170 _B	=	0x00f0
                                    171 ;--------------------------------------------------------
                                    172 ; special function bits
                                    173 ;--------------------------------------------------------
                                    174 	.area RSEG    (ABS,DATA)
      000000                        175 	.org 0x0000
                           000080   176 _P0_0	=	0x0080
                           000081   177 _P0_1	=	0x0081
                           000082   178 _P0_2	=	0x0082
                           000083   179 _P0_3	=	0x0083
                           000084   180 _P0_4	=	0x0084
                           000085   181 _P0_5	=	0x0085
                           000086   182 _P0_6	=	0x0086
                           000087   183 _P0_7	=	0x0087
                           000088   184 _IT0	=	0x0088
                           000089   185 _IE0	=	0x0089
                           00008A   186 _IT1	=	0x008a
                           00008B   187 _IE1	=	0x008b
                           00008C   188 _TR0	=	0x008c
                           00008D   189 _TF0	=	0x008d
                           00008E   190 _TR1	=	0x008e
                           00008F   191 _TF1	=	0x008f
                           000090   192 _P1_0	=	0x0090
                           000091   193 _P1_1	=	0x0091
                           000092   194 _P1_2	=	0x0092
                           000093   195 _P1_3	=	0x0093
                           000094   196 _P1_4	=	0x0094
                           000095   197 _P1_5	=	0x0095
                           000096   198 _P1_6	=	0x0096
                           000097   199 _P1_7	=	0x0097
                           000090   200 _T2	=	0x0090
                           000091   201 _T2EX	=	0x0091
                           000098   202 _RI	=	0x0098
                           000099   203 _TI	=	0x0099
                           00009A   204 _RB8	=	0x009a
                           00009B   205 _TB8	=	0x009b
                           00009C   206 _REN	=	0x009c
                           00009D   207 _SM2	=	0x009d
                           00009E   208 _SM1	=	0x009e
                           00009F   209 _SM0	=	0x009f
                           0000A0   210 _P2_0	=	0x00a0
                           0000A1   211 _P2_1	=	0x00a1
                           0000A2   212 _P2_2	=	0x00a2
                           0000A3   213 _P2_3	=	0x00a3
                           0000A4   214 _P2_4	=	0x00a4
                           0000A5   215 _P2_5	=	0x00a5
                           0000A6   216 _P2_6	=	0x00a6
                           0000A7   217 _P2_7	=	0x00a7
                           0000A8   218 _EX0	=	0x00a8
                           0000A9   219 _ET0	=	0x00a9
                           0000AA   220 _EX1	=	0x00aa
                           0000AB   221 _ET1	=	0x00ab
                           0000AC   222 _ES	=	0x00ac
                           0000AD   223 _ET2	=	0x00ad
                           0000AF   224 _EA	=	0x00af
                           0000B0   225 _P3_0	=	0x00b0
                           0000B1   226 _P3_1	=	0x00b1
                           0000B2   227 _P3_2	=	0x00b2
                           0000B3   228 _P3_3	=	0x00b3
                           0000B4   229 _P3_4	=	0x00b4
                           0000B5   230 _P3_5	=	0x00b5
                           0000B6   231 _P3_6	=	0x00b6
                           0000B7   232 _P3_7	=	0x00b7
                           0000B0   233 _RXD	=	0x00b0
                           0000B1   234 _TXD	=	0x00b1
                           0000B2   235 _INT0	=	0x00b2
                           0000B3   236 _INT1	=	0x00b3
                           0000B4   237 _T0	=	0x00b4
                           0000B5   238 _T1	=	0x00b5
                           0000B6   239 _WR	=	0x00b6
                           0000B7   240 _RD	=	0x00b7
                           0000B8   241 _PX0	=	0x00b8
                           0000B9   242 _PT0	=	0x00b9
                           0000BA   243 _PX1	=	0x00ba
                           0000BB   244 _PT1	=	0x00bb
                           0000BC   245 _PS	=	0x00bc
                           0000BD   246 _PT2	=	0x00bd
                           0000C8   247 _T2CON_0	=	0x00c8
                           0000C9   248 _T2CON_1	=	0x00c9
                           0000CA   249 _T2CON_2	=	0x00ca
                           0000CB   250 _T2CON_3	=	0x00cb
                           0000CC   251 _T2CON_4	=	0x00cc
                           0000CD   252 _T2CON_5	=	0x00cd
                           0000CE   253 _T2CON_6	=	0x00ce
                           0000CF   254 _T2CON_7	=	0x00cf
                           0000C8   255 _CP_RL2	=	0x00c8
                           0000C9   256 _C_T2	=	0x00c9
                           0000CA   257 _TR2	=	0x00ca
                           0000CB   258 _EXEN2	=	0x00cb
                           0000CC   259 _TCLK	=	0x00cc
                           0000CD   260 _RCLK	=	0x00cd
                           0000CE   261 _EXF2	=	0x00ce
                           0000CF   262 _TF2	=	0x00cf
                           0000D0   263 _P	=	0x00d0
                           0000D1   264 _FL	=	0x00d1
                           0000D2   265 _OV	=	0x00d2
                           0000D3   266 _RS0	=	0x00d3
                           0000D4   267 _RS1	=	0x00d4
                           0000D5   268 _F0	=	0x00d5
                           0000D6   269 _AC	=	0x00d6
                           0000D7   270 _CY	=	0x00d7
                                    271 ;--------------------------------------------------------
                                    272 ; overlayable register banks
                                    273 ;--------------------------------------------------------
                                    274 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        275 	.ds 8
                                    276 ;--------------------------------------------------------
                                    277 ; internal ram data
                                    278 ;--------------------------------------------------------
                                    279 	.area DSEG    (DATA)
                                    280 ;--------------------------------------------------------
                                    281 ; overlayable items in internal ram 
                                    282 ;--------------------------------------------------------
                                    283 ;--------------------------------------------------------
                                    284 ; Stack segment in internal ram 
                                    285 ;--------------------------------------------------------
                                    286 	.area	SSEG
      000000                        287 __start__stack:
      000000                        288 	.ds	1
                                    289 
                                    290 ;--------------------------------------------------------
                                    291 ; indirectly addressable internal ram data
                                    292 ;--------------------------------------------------------
                                    293 	.area ISEG    (DATA)
                                    294 ;--------------------------------------------------------
                                    295 ; absolute internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area IABS    (ABS,DATA)
                                    298 	.area IABS    (ABS,DATA)
                                    299 ;--------------------------------------------------------
                                    300 ; bit data
                                    301 ;--------------------------------------------------------
                                    302 	.area BSEG    (BIT)
                                    303 ;--------------------------------------------------------
                                    304 ; paged external ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area PSEG    (PAG,XDATA)
                                    307 ;--------------------------------------------------------
                                    308 ; external ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area XSEG    (XDATA)
      000000                        311 _ccrcb_init_r_65536_18:
      000000                        312 	.ds 3
      000003                        313 _ccrcb_PARM_2:
      000003                        314 	.ds 1
      000004                        315 _ccrcb_r_65536_20:
      000004                        316 	.ds 3
      000007                        317 _ccrcb_rt_65536_21:
      000007                        318 	.ds 2
      000009                        319 _ccrcb_bitp_65536_21:
      000009                        320 	.ds 1
      00000A                        321 _ccrcb_finish_r_65536_23:
      00000A                        322 	.ds 3
      00000D                        323 _calc_crc_PARM_2:
      00000D                        324 	.ds 2
      00000F                        325 _calc_crc_base_65536_25:
      00000F                        326 	.ds 3
      000012                        327 _calc_crc_crc_65536_26:
      000012                        328 	.ds 2
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT0 (CODE)
                                    339 	.area GSINIT1 (CODE)
                                    340 	.area GSINIT2 (CODE)
                                    341 	.area GSINIT3 (CODE)
                                    342 	.area GSINIT4 (CODE)
                                    343 	.area GSINIT5 (CODE)
                                    344 	.area GSINIT  (CODE)
                                    345 	.area GSFINAL (CODE)
                                    346 	.area CSEG    (CODE)
                                    347 ;--------------------------------------------------------
                                    348 ; interrupt vector 
                                    349 ;--------------------------------------------------------
                                    350 	.area HOME    (CODE)
      000000                        351 __interrupt_vect:
      000000 02r00r00         [24]  352 	ljmp	__sdcc_gsinit_startup
                                    353 ;--------------------------------------------------------
                                    354 ; global & static initialisations
                                    355 ;--------------------------------------------------------
                                    356 	.area HOME    (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.area GSFINAL (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.globl __sdcc_gsinit_startup
                                    361 	.globl __sdcc_program_startup
                                    362 	.globl __start__stack
                                    363 	.globl __mcs51_genXINIT
                                    364 	.globl __mcs51_genXRAMCLEAR
                                    365 	.globl __mcs51_genRAMCLEAR
                                    366 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  367 	ljmp	__sdcc_program_startup
                                    368 ;--------------------------------------------------------
                                    369 ; Home
                                    370 ;--------------------------------------------------------
                                    371 	.area HOME    (CODE)
                                    372 	.area HOME    (CODE)
      000003                        373 __sdcc_program_startup:
      000003 02r01rB9         [24]  374 	ljmp	_main
                                    375 ;	return from main will return to caller
                                    376 ;--------------------------------------------------------
                                    377 ; code
                                    378 ;--------------------------------------------------------
                                    379 	.area CSEG    (CODE)
                                    380 ;------------------------------------------------------------
                                    381 ;Allocation info for local variables in function 'putchar'
                                    382 ;------------------------------------------------------------
                                    383 ;c                         Allocated with name '_putchar_c_65536_14'
                                    384 ;------------------------------------------------------------
                                    385 ;	crc16.c:11: int putchar(int c) __naked {
                                    386 ;	-----------------------------------------
                                    387 ;	 function putchar
                                    388 ;	-----------------------------------------
      000000                        389 _putchar:
                                    390 ;	naked function: no prologue.
                                    391 ;	crc16.c:16: __endasm;
      000000 E5 82            [12]  392 	mov	a, dpl
      000002 02 00 30         [24]  393 	ljmp	0x0030
                                    394 ;	crc16.c:17: }
                                    395 ;	naked function: no epilogue.
                                    396 ;------------------------------------------------------------
                                    397 ;Allocation info for local variables in function 'getchar'
                                    398 ;------------------------------------------------------------
                                    399 ;	crc16.c:19: int getchar(void) {
                                    400 ;	-----------------------------------------
                                    401 ;	 function getchar
                                    402 ;	-----------------------------------------
      000005                        403 _getchar:
                           000007   404 	ar7 = 0x07
                           000006   405 	ar6 = 0x06
                           000005   406 	ar5 = 0x05
                           000004   407 	ar4 = 0x04
                           000003   408 	ar3 = 0x03
                           000002   409 	ar2 = 0x02
                           000001   410 	ar1 = 0x01
                           000000   411 	ar0 = 0x00
                                    412 ;	crc16.c:24: __endasm;
      000005 12 00 32         [24]  413 	lcall	0x0032
      000008 C2 83            [12]  414 	clr	dph
      00000A F5 82            [12]  415 	mov	dpl, a
                                    416 ;	crc16.c:25: }
      00000C 22               [24]  417 	ret
                                    418 ;------------------------------------------------------------
                                    419 ;Allocation info for local variables in function 'ccrcb_init'
                                    420 ;------------------------------------------------------------
                                    421 ;r                         Allocated with name '_ccrcb_init_r_65536_18'
                                    422 ;------------------------------------------------------------
                                    423 ;	crc16.c:27: static void ccrcb_init(unsigned int *r) {
                                    424 ;	-----------------------------------------
                                    425 ;	 function ccrcb_init
                                    426 ;	-----------------------------------------
      00000D                        427 _ccrcb_init:
      00000D AF F0            [24]  428 	mov	r7,b
      00000F AE 83            [24]  429 	mov	r6,dph
      000011 E5 82            [12]  430 	mov	a,dpl
      000013 90r00r00         [24]  431 	mov	dptr,#_ccrcb_init_r_65536_18
      000016 F0               [24]  432 	movx	@dptr,a
      000017 EE               [12]  433 	mov	a,r6
      000018 A3               [24]  434 	inc	dptr
      000019 F0               [24]  435 	movx	@dptr,a
      00001A EF               [12]  436 	mov	a,r7
      00001B A3               [24]  437 	inc	dptr
      00001C F0               [24]  438 	movx	@dptr,a
                                    439 ;	crc16.c:28: *r = ACC_INITIAL;
      00001D 90r00r00         [24]  440 	mov	dptr,#_ccrcb_init_r_65536_18
      000020 E0               [24]  441 	movx	a,@dptr
      000021 FD               [12]  442 	mov	r5,a
      000022 A3               [24]  443 	inc	dptr
      000023 E0               [24]  444 	movx	a,@dptr
      000024 FE               [12]  445 	mov	r6,a
      000025 A3               [24]  446 	inc	dptr
      000026 E0               [24]  447 	movx	a,@dptr
      000027 FF               [12]  448 	mov	r7,a
      000028 8D 82            [24]  449 	mov	dpl,r5
      00002A 8E 83            [24]  450 	mov	dph,r6
      00002C 8F F0            [24]  451 	mov	b,r7
      00002E 74 FF            [12]  452 	mov	a,#0xff
      000030 12r00r00         [24]  453 	lcall	__gptrput
      000033 A3               [24]  454 	inc	dptr
                                    455 ;	crc16.c:29: return;
                                    456 ;	crc16.c:30: }
      000034 02r00r00         [24]  457 	ljmp	__gptrput
                                    458 ;------------------------------------------------------------
                                    459 ;Allocation info for local variables in function 'ccrcb'
                                    460 ;------------------------------------------------------------
                                    461 ;oct                       Allocated with name '_ccrcb_PARM_2'
                                    462 ;r                         Allocated with name '_ccrcb_r_65536_20'
                                    463 ;rt                        Allocated with name '_ccrcb_rt_65536_21'
                                    464 ;bitp                      Allocated with name '_ccrcb_bitp_65536_21'
                                    465 ;------------------------------------------------------------
                                    466 ;	crc16.c:32: static void ccrcb(unsigned int *r, unsigned char oct) {
                                    467 ;	-----------------------------------------
                                    468 ;	 function ccrcb
                                    469 ;	-----------------------------------------
      000037                        470 _ccrcb:
      000037 AF F0            [24]  471 	mov	r7,b
      000039 AE 83            [24]  472 	mov	r6,dph
      00003B E5 82            [12]  473 	mov	a,dpl
      00003D 90r00r04         [24]  474 	mov	dptr,#_ccrcb_r_65536_20
      000040 F0               [24]  475 	movx	@dptr,a
      000041 EE               [12]  476 	mov	a,r6
      000042 A3               [24]  477 	inc	dptr
      000043 F0               [24]  478 	movx	@dptr,a
      000044 EF               [12]  479 	mov	a,r7
      000045 A3               [24]  480 	inc	dptr
      000046 F0               [24]  481 	movx	@dptr,a
                                    482 ;	crc16.c:36: for (rt = *r, bitp = 0x80u; bitp; bitp >>= 1)
      000047 90r00r04         [24]  483 	mov	dptr,#_ccrcb_r_65536_20
      00004A E0               [24]  484 	movx	a,@dptr
      00004B FD               [12]  485 	mov	r5,a
      00004C A3               [24]  486 	inc	dptr
      00004D E0               [24]  487 	movx	a,@dptr
      00004E FE               [12]  488 	mov	r6,a
      00004F A3               [24]  489 	inc	dptr
      000050 E0               [24]  490 	movx	a,@dptr
      000051 FF               [12]  491 	mov	r7,a
      000052 8D 82            [24]  492 	mov	dpl,r5
      000054 8E 83            [24]  493 	mov	dph,r6
      000056 8F F0            [24]  494 	mov	b,r7
      000058 12r00r00         [24]  495 	lcall	__gptrget
      00005B FD               [12]  496 	mov	r5,a
      00005C A3               [24]  497 	inc	dptr
      00005D 12r00r00         [24]  498 	lcall	__gptrget
      000060 FE               [12]  499 	mov	r6,a
      000061 90r00r07         [24]  500 	mov	dptr,#_ccrcb_rt_65536_21
      000064 ED               [12]  501 	mov	a,r5
      000065 F0               [24]  502 	movx	@dptr,a
      000066 EE               [12]  503 	mov	a,r6
      000067 A3               [24]  504 	inc	dptr
      000068 F0               [24]  505 	movx	@dptr,a
      000069 90r00r09         [24]  506 	mov	dptr,#_ccrcb_bitp_65536_21
      00006C 74 80            [12]  507 	mov	a,#0x80
      00006E F0               [24]  508 	movx	@dptr,a
      00006F 90r00r03         [24]  509 	mov	dptr,#_ccrcb_PARM_2
      000072 E0               [24]  510 	movx	a,@dptr
      000073 FF               [12]  511 	mov	r7,a
      000074                        512 00103$:
      000074 90r00r09         [24]  513 	mov	dptr,#_ccrcb_bitp_65536_21
      000077 E0               [24]  514 	movx	a,@dptr
      000078 FE               [12]  515 	mov	r6,a
      000079 E0               [24]  516 	movx	a,@dptr
      00007A 60 4D            [24]  517 	jz	00101$
                                    518 ;	crc16.c:37: rt = ((rt >> 15) ^ (!!(oct & bitp))) ? ((rt << 1) ^ POLY) : (rt << 1);
      00007C 90r00r07         [24]  519 	mov	dptr,#_ccrcb_rt_65536_21
      00007F E0               [24]  520 	movx	a,@dptr
      000080 FC               [12]  521 	mov	r4,a
      000081 A3               [24]  522 	inc	dptr
      000082 E0               [24]  523 	movx	a,@dptr
      000083 FD               [12]  524 	mov	r5,a
      000084 23               [12]  525 	rl	a
      000085 54 01            [12]  526 	anl	a,#0x01
      000087 FA               [12]  527 	mov	r2,a
      000088 7B 00            [12]  528 	mov	r3,#0x00
      00008A EF               [12]  529 	mov	a,r7
      00008B 52 06            [12]  530 	anl	ar6,a
      00008D EE               [12]  531 	mov	a,r6
      00008E B4 01 00         [24]  532 	cjne	a,#0x01,00122$
      000091                        533 00122$:
      000091 B3               [12]  534 	cpl	c
      000092 E4               [12]  535 	clr	a
      000093 33               [12]  536 	rlc	a
      000094 F9               [12]  537 	mov	r1,a
      000095 33               [12]  538 	rlc	a
      000096 95 E0            [12]  539 	subb	a,acc
      000098 FE               [12]  540 	mov	r6,a
      000099 E9               [12]  541 	mov	a,r1
      00009A 62 02            [12]  542 	xrl	ar2,a
      00009C EE               [12]  543 	mov	a,r6
      00009D 62 03            [12]  544 	xrl	ar3,a
      00009F EA               [12]  545 	mov	a,r2
      0000A0 4B               [12]  546 	orl	a,r3
      0000A1 60 0E            [24]  547 	jz	00107$
      0000A3 EC               [12]  548 	mov	a,r4
      0000A4 2C               [12]  549 	add	a,r4
      0000A5 FB               [12]  550 	mov	r3,a
      0000A6 ED               [12]  551 	mov	a,r5
      0000A7 33               [12]  552 	rlc	a
      0000A8 FE               [12]  553 	mov	r6,a
      0000A9 63 03 21         [24]  554 	xrl	ar3,#0x21
      0000AC 63 06 10         [24]  555 	xrl	ar6,#0x10
      0000AF 80 06            [24]  556 	sjmp	00108$
      0000B1                        557 00107$:
      0000B1 EC               [12]  558 	mov	a,r4
      0000B2 2C               [12]  559 	add	a,r4
      0000B3 FB               [12]  560 	mov	r3,a
      0000B4 ED               [12]  561 	mov	a,r5
      0000B5 33               [12]  562 	rlc	a
      0000B6 FE               [12]  563 	mov	r6,a
      0000B7                        564 00108$:
      0000B7 90r00r07         [24]  565 	mov	dptr,#_ccrcb_rt_65536_21
      0000BA EB               [12]  566 	mov	a,r3
      0000BB F0               [24]  567 	movx	@dptr,a
      0000BC EE               [12]  568 	mov	a,r6
      0000BD A3               [24]  569 	inc	dptr
      0000BE F0               [24]  570 	movx	@dptr,a
                                    571 ;	crc16.c:36: for (rt = *r, bitp = 0x80u; bitp; bitp >>= 1)
      0000BF 90r00r09         [24]  572 	mov	dptr,#_ccrcb_bitp_65536_21
      0000C2 E0               [24]  573 	movx	a,@dptr
      0000C3 C3               [12]  574 	clr	c
      0000C4 13               [12]  575 	rrc	a
      0000C5 FE               [12]  576 	mov	r6,a
      0000C6 F0               [24]  577 	movx	@dptr,a
      0000C7 80 AB            [24]  578 	sjmp	00103$
      0000C9                        579 00101$:
                                    580 ;	crc16.c:38: *r = rt;
      0000C9 90r00r04         [24]  581 	mov	dptr,#_ccrcb_r_65536_20
      0000CC E0               [24]  582 	movx	a,@dptr
      0000CD FD               [12]  583 	mov	r5,a
      0000CE A3               [24]  584 	inc	dptr
      0000CF E0               [24]  585 	movx	a,@dptr
      0000D0 FE               [12]  586 	mov	r6,a
      0000D1 A3               [24]  587 	inc	dptr
      0000D2 E0               [24]  588 	movx	a,@dptr
      0000D3 FF               [12]  589 	mov	r7,a
      0000D4 90r00r07         [24]  590 	mov	dptr,#_ccrcb_rt_65536_21
      0000D7 E0               [24]  591 	movx	a,@dptr
      0000D8 FB               [12]  592 	mov	r3,a
      0000D9 A3               [24]  593 	inc	dptr
      0000DA E0               [24]  594 	movx	a,@dptr
      0000DB FC               [12]  595 	mov	r4,a
      0000DC 8D 82            [24]  596 	mov	dpl,r5
      0000DE 8E 83            [24]  597 	mov	dph,r6
      0000E0 8F F0            [24]  598 	mov	b,r7
      0000E2 EB               [12]  599 	mov	a,r3
      0000E3 12r00r00         [24]  600 	lcall	__gptrput
      0000E6 A3               [24]  601 	inc	dptr
      0000E7 EC               [12]  602 	mov	a,r4
                                    603 ;	crc16.c:39: }
      0000E8 02r00r00         [24]  604 	ljmp	__gptrput
                                    605 ;------------------------------------------------------------
                                    606 ;Allocation info for local variables in function 'ccrcb_finish'
                                    607 ;------------------------------------------------------------
                                    608 ;r                         Allocated with name '_ccrcb_finish_r_65536_23'
                                    609 ;------------------------------------------------------------
                                    610 ;	crc16.c:41: static void ccrcb_finish(unsigned int *r) {
                                    611 ;	-----------------------------------------
                                    612 ;	 function ccrcb_finish
                                    613 ;	-----------------------------------------
      0000EB                        614 _ccrcb_finish:
      0000EB AF F0            [24]  615 	mov	r7,b
      0000ED AE 83            [24]  616 	mov	r6,dph
      0000EF E5 82            [12]  617 	mov	a,dpl
      0000F1 90r00r0A         [24]  618 	mov	dptr,#_ccrcb_finish_r_65536_23
      0000F4 F0               [24]  619 	movx	@dptr,a
      0000F5 EE               [12]  620 	mov	a,r6
      0000F6 A3               [24]  621 	inc	dptr
      0000F7 F0               [24]  622 	movx	@dptr,a
      0000F8 EF               [12]  623 	mov	a,r7
      0000F9 A3               [24]  624 	inc	dptr
      0000FA F0               [24]  625 	movx	@dptr,a
                                    626 ;	crc16.c:42: *r ^= ACC_FINAL;
      0000FB 90r00r0A         [24]  627 	mov	dptr,#_ccrcb_finish_r_65536_23
      0000FE E0               [24]  628 	movx	a,@dptr
      0000FF FD               [12]  629 	mov	r5,a
      000100 A3               [24]  630 	inc	dptr
      000101 E0               [24]  631 	movx	a,@dptr
      000102 FE               [12]  632 	mov	r6,a
      000103 A3               [24]  633 	inc	dptr
      000104 E0               [24]  634 	movx	a,@dptr
      000105 FF               [12]  635 	mov	r7,a
      000106 8D 82            [24]  636 	mov	dpl,r5
      000108 8E 83            [24]  637 	mov	dph,r6
      00010A 8F F0            [24]  638 	mov	b,r7
      00010C 12r00r00         [24]  639 	lcall	__gptrget
      00010F FB               [12]  640 	mov	r3,a
      000110 A3               [24]  641 	inc	dptr
      000111 12r00r00         [24]  642 	lcall	__gptrget
      000114 FC               [12]  643 	mov	r4,a
      000115 8D 82            [24]  644 	mov	dpl,r5
      000117 8E 83            [24]  645 	mov	dph,r6
      000119 8F F0            [24]  646 	mov	b,r7
      00011B EB               [12]  647 	mov	a,r3
      00011C 12r00r00         [24]  648 	lcall	__gptrput
      00011F A3               [24]  649 	inc	dptr
      000120 EC               [12]  650 	mov	a,r4
                                    651 ;	crc16.c:43: }
      000121 02r00r00         [24]  652 	ljmp	__gptrput
                                    653 ;------------------------------------------------------------
                                    654 ;Allocation info for local variables in function 'calc_crc'
                                    655 ;------------------------------------------------------------
                                    656 ;len                       Allocated with name '_calc_crc_PARM_2'
                                    657 ;base                      Allocated with name '_calc_crc_base_65536_25'
                                    658 ;off                       Allocated with name '_calc_crc_off_65536_26'
                                    659 ;crc                       Allocated with name '_calc_crc_crc_65536_26'
                                    660 ;------------------------------------------------------------
                                    661 ;	crc16.c:45: static unsigned int calc_crc(unsigned char *base, unsigned int len) {
                                    662 ;	-----------------------------------------
                                    663 ;	 function calc_crc
                                    664 ;	-----------------------------------------
      000124                        665 _calc_crc:
      000124 AF F0            [24]  666 	mov	r7,b
      000126 AE 83            [24]  667 	mov	r6,dph
      000128 E5 82            [12]  668 	mov	a,dpl
      00012A 90r00r0F         [24]  669 	mov	dptr,#_calc_crc_base_65536_25
      00012D F0               [24]  670 	movx	@dptr,a
      00012E EE               [12]  671 	mov	a,r6
      00012F A3               [24]  672 	inc	dptr
      000130 F0               [24]  673 	movx	@dptr,a
      000131 EF               [12]  674 	mov	a,r7
      000132 A3               [24]  675 	inc	dptr
      000133 F0               [24]  676 	movx	@dptr,a
                                    677 ;	crc16.c:48: ccrcb_init(&crc);
      000134 90r00r12         [24]  678 	mov	dptr,#_calc_crc_crc_65536_26
      000137 75 F0 00         [24]  679 	mov	b,#0x00
      00013A 12r00r0D         [24]  680 	lcall	_ccrcb_init
                                    681 ;	crc16.c:49: for (off = 0u; off < len; off++)
      00013D 90r00r0F         [24]  682 	mov	dptr,#_calc_crc_base_65536_25
      000140 E0               [24]  683 	movx	a,@dptr
      000141 FD               [12]  684 	mov	r5,a
      000142 A3               [24]  685 	inc	dptr
      000143 E0               [24]  686 	movx	a,@dptr
      000144 FE               [12]  687 	mov	r6,a
      000145 A3               [24]  688 	inc	dptr
      000146 E0               [24]  689 	movx	a,@dptr
      000147 FF               [12]  690 	mov	r7,a
      000148 90r00r0D         [24]  691 	mov	dptr,#_calc_crc_PARM_2
      00014B E0               [24]  692 	movx	a,@dptr
      00014C FB               [12]  693 	mov	r3,a
      00014D A3               [24]  694 	inc	dptr
      00014E E0               [24]  695 	movx	a,@dptr
      00014F FC               [12]  696 	mov	r4,a
      000150 79 00            [12]  697 	mov	r1,#0x00
      000152 7A 00            [12]  698 	mov	r2,#0x00
      000154                        699 00103$:
      000154 C3               [12]  700 	clr	c
      000155 E9               [12]  701 	mov	a,r1
      000156 9B               [12]  702 	subb	a,r3
      000157 EA               [12]  703 	mov	a,r2
      000158 9C               [12]  704 	subb	a,r4
      000159 50 49            [24]  705 	jnc	00101$
                                    706 ;	crc16.c:50: ccrcb(&crc, base[off]);
      00015B C0 03            [24]  707 	push	ar3
      00015D C0 04            [24]  708 	push	ar4
      00015F E9               [12]  709 	mov	a,r1
      000160 2D               [12]  710 	add	a,r5
      000161 F8               [12]  711 	mov	r0,a
      000162 EA               [12]  712 	mov	a,r2
      000163 3E               [12]  713 	addc	a,r6
      000164 FB               [12]  714 	mov	r3,a
      000165 8F 04            [24]  715 	mov	ar4,r7
      000167 88 82            [24]  716 	mov	dpl,r0
      000169 8B 83            [24]  717 	mov	dph,r3
      00016B 8C F0            [24]  718 	mov	b,r4
      00016D 12r00r00         [24]  719 	lcall	__gptrget
      000170 90r00r03         [24]  720 	mov	dptr,#_ccrcb_PARM_2
      000173 F0               [24]  721 	movx	@dptr,a
      000174 90r00r12         [24]  722 	mov	dptr,#_calc_crc_crc_65536_26
      000177 75 F0 00         [24]  723 	mov	b,#0x00
      00017A C0 07            [24]  724 	push	ar7
      00017C C0 06            [24]  725 	push	ar6
      00017E C0 05            [24]  726 	push	ar5
      000180 C0 04            [24]  727 	push	ar4
      000182 C0 03            [24]  728 	push	ar3
      000184 C0 02            [24]  729 	push	ar2
      000186 C0 01            [24]  730 	push	ar1
      000188 12r00r37         [24]  731 	lcall	_ccrcb
      00018B D0 01            [24]  732 	pop	ar1
      00018D D0 02            [24]  733 	pop	ar2
      00018F D0 03            [24]  734 	pop	ar3
      000191 D0 04            [24]  735 	pop	ar4
      000193 D0 05            [24]  736 	pop	ar5
      000195 D0 06            [24]  737 	pop	ar6
      000197 D0 07            [24]  738 	pop	ar7
                                    739 ;	crc16.c:49: for (off = 0u; off < len; off++)
      000199 09               [12]  740 	inc	r1
      00019A B9 00 01         [24]  741 	cjne	r1,#0x00,00117$
      00019D 0A               [12]  742 	inc	r2
      00019E                        743 00117$:
      00019E D0 04            [24]  744 	pop	ar4
      0001A0 D0 03            [24]  745 	pop	ar3
      0001A2 80 B0            [24]  746 	sjmp	00103$
      0001A4                        747 00101$:
                                    748 ;	crc16.c:51: ccrcb_finish(&crc);
      0001A4 90r00r12         [24]  749 	mov	dptr,#_calc_crc_crc_65536_26
      0001A7 75 F0 00         [24]  750 	mov	b,#0x00
      0001AA 12r00rEB         [24]  751 	lcall	_ccrcb_finish
                                    752 ;	crc16.c:53: return crc;
      0001AD 90r00r12         [24]  753 	mov	dptr,#_calc_crc_crc_65536_26
      0001B0 E0               [24]  754 	movx	a,@dptr
      0001B1 FE               [12]  755 	mov	r6,a
      0001B2 A3               [24]  756 	inc	dptr
      0001B3 E0               [24]  757 	movx	a,@dptr
                                    758 ;	crc16.c:54: }
      0001B4 8E 82            [24]  759 	mov	dpl,r6
      0001B6 F5 83            [12]  760 	mov	dph,a
      0001B8 22               [24]  761 	ret
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function 'main'
                                    764 ;------------------------------------------------------------
                                    765 ;base                      Allocated with name '_main_base_65536_29'
                                    766 ;len                       Allocated with name '_main_len_65536_29'
                                    767 ;crc                       Allocated with name '_main_crc_65536_29'
                                    768 ;------------------------------------------------------------
                                    769 ;	crc16.c:58: void main(void) {
                                    770 ;	-----------------------------------------
                                    771 ;	 function main
                                    772 ;	-----------------------------------------
      0001B9                        773 _main:
                                    774 ;	crc16.c:63: for (base = (unsigned char *)0x0u; 1; base += (len >> 1)) {
      0001B9 7D 00            [12]  775 	mov	r5,#0x00
      0001BB 7E 00            [12]  776 	mov	r6,#0x00
      0001BD 7F 00            [12]  777 	mov	r7,#0x00
      0001BF                        778 00102$:
                                    779 ;	crc16.c:64: printf("base=0x%04x ", (unsigned int)base);
      0001BF 8D 02            [24]  780 	mov	ar2,r5
      0001C1 8E 03            [24]  781 	mov	ar3,r6
      0001C3 8F 04            [24]  782 	mov	ar4,r7
      0001C5 C0 07            [24]  783 	push	ar7
      0001C7 C0 06            [24]  784 	push	ar6
      0001C9 C0 05            [24]  785 	push	ar5
      0001CB C0 02            [24]  786 	push	ar2
      0001CD C0 03            [24]  787 	push	ar3
      0001CF 74r00            [12]  788 	mov	a,#___str_0
      0001D1 C0 E0            [24]  789 	push	acc
      0001D3 74s00            [12]  790 	mov	a,#(___str_0 >> 8)
      0001D5 C0 E0            [24]  791 	push	acc
      0001D7 74 80            [12]  792 	mov	a,#0x80
      0001D9 C0 E0            [24]  793 	push	acc
      0001DB 12r00r00         [24]  794 	lcall	_printf
      0001DE E5 81            [12]  795 	mov	a,sp
      0001E0 24 FB            [12]  796 	add	a,#0xfb
      0001E2 F5 81            [12]  797 	mov	sp,a
                                    798 ;	crc16.c:65: printf("len=0x%04x ", len);
      0001E4 E4               [12]  799 	clr	a
      0001E5 C0 E0            [24]  800 	push	acc
      0001E7 74 20            [12]  801 	mov	a,#0x20
      0001E9 C0 E0            [24]  802 	push	acc
      0001EB 74r0D            [12]  803 	mov	a,#___str_1
      0001ED C0 E0            [24]  804 	push	acc
      0001EF 74s00            [12]  805 	mov	a,#(___str_1 >> 8)
      0001F1 C0 E0            [24]  806 	push	acc
      0001F3 74 80            [12]  807 	mov	a,#0x80
      0001F5 C0 E0            [24]  808 	push	acc
      0001F7 12r00r00         [24]  809 	lcall	_printf
      0001FA E5 81            [12]  810 	mov	a,sp
      0001FC 24 FB            [12]  811 	add	a,#0xfb
      0001FE F5 81            [12]  812 	mov	sp,a
      000200 D0 05            [24]  813 	pop	ar5
      000202 D0 06            [24]  814 	pop	ar6
      000204 D0 07            [24]  815 	pop	ar7
                                    816 ;	crc16.c:66: crc = calc_crc(base, len);
      000206 90r00r0D         [24]  817 	mov	dptr,#_calc_crc_PARM_2
      000209 E4               [12]  818 	clr	a
      00020A F0               [24]  819 	movx	@dptr,a
      00020B 74 20            [12]  820 	mov	a,#0x20
      00020D A3               [24]  821 	inc	dptr
      00020E F0               [24]  822 	movx	@dptr,a
      00020F 8D 82            [24]  823 	mov	dpl,r5
      000211 8E 83            [24]  824 	mov	dph,r6
      000213 8F F0            [24]  825 	mov	b,r7
      000215 C0 07            [24]  826 	push	ar7
      000217 C0 06            [24]  827 	push	ar6
      000219 C0 05            [24]  828 	push	ar5
      00021B 12r01r24         [24]  829 	lcall	_calc_crc
      00021E AB 82            [24]  830 	mov	r3,dpl
      000220 AC 83            [24]  831 	mov	r4,dph
                                    832 ;	crc16.c:67: printf("CRC16=0x%04x\n\r", crc);
      000222 C0 03            [24]  833 	push	ar3
      000224 C0 04            [24]  834 	push	ar4
      000226 74r19            [12]  835 	mov	a,#___str_2
      000228 C0 E0            [24]  836 	push	acc
      00022A 74s00            [12]  837 	mov	a,#(___str_2 >> 8)
      00022C C0 E0            [24]  838 	push	acc
      00022E 74 80            [12]  839 	mov	a,#0x80
      000230 C0 E0            [24]  840 	push	acc
      000232 12r00r00         [24]  841 	lcall	_printf
      000235 E5 81            [12]  842 	mov	a,sp
      000237 24 FB            [12]  843 	add	a,#0xfb
      000239 F5 81            [12]  844 	mov	sp,a
      00023B D0 05            [24]  845 	pop	ar5
      00023D D0 06            [24]  846 	pop	ar6
      00023F D0 07            [24]  847 	pop	ar7
                                    848 ;	crc16.c:63: for (base = (unsigned char *)0x0u; 1; base += (len >> 1)) {
      000241 74 10            [12]  849 	mov	a,#0x10
      000243 2E               [12]  850 	add	a,r6
      000244 FE               [12]  851 	mov	r6,a
                                    852 ;	crc16.c:72: __endasm;
                                    853 ;	crc16.c:73: }
      000245 02r01rBF         [24]  854 	ljmp	00102$
                                    855 	.area CSEG    (CODE)
                                    856 	.area CONST   (CODE)
                                    857 	.area CONST   (CODE)
      000000                        858 ___str_0:
      000000 62 61 73 65 3D 30 78   859 	.ascii "base=0x%04x "
             25 30 34 78 20
      00000C 00                     860 	.db 0x00
                                    861 	.area CSEG    (CODE)
                                    862 	.area CONST   (CODE)
      00000D                        863 ___str_1:
      00000D 6C 65 6E 3D 30 78 25   864 	.ascii "len=0x%04x "
             30 34 78 20
      000018 00                     865 	.db 0x00
                                    866 	.area CSEG    (CODE)
                                    867 	.area CONST   (CODE)
      000019                        868 ___str_2:
      000019 43 52 43 31 36 3D 30   869 	.ascii "CRC16=0x%04x"
             78 25 30 34 78
      000025 0A                     870 	.db 0x0a
      000026 0D                     871 	.db 0x0d
      000027 00                     872 	.db 0x00
                                    873 	.area CSEG    (CODE)
                                    874 	.area XINIT   (CODE)
                                    875 	.area CABS    (ABS,CODE)
