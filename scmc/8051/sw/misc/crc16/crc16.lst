                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module crc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _printf
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _FL
                                     21 	.globl _P
                                     22 	.globl _TF2
                                     23 	.globl _EXF2
                                     24 	.globl _RCLK
                                     25 	.globl _TCLK
                                     26 	.globl _EXEN2
                                     27 	.globl _TR2
                                     28 	.globl _C_T2
                                     29 	.globl _CP_RL2
                                     30 	.globl _T2CON_7
                                     31 	.globl _T2CON_6
                                     32 	.globl _T2CON_5
                                     33 	.globl _T2CON_4
                                     34 	.globl _T2CON_3
                                     35 	.globl _T2CON_2
                                     36 	.globl _T2CON_1
                                     37 	.globl _T2CON_0
                                     38 	.globl _PT2
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ET2
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _T2EX
                                     84 	.globl _T2
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _B
                                    110 	.globl _A
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _TH2
                                    114 	.globl _TL2
                                    115 	.globl _RCAP2H
                                    116 	.globl _RCAP2L
                                    117 	.globl _T2MOD
                                    118 	.globl _T2CON
                                    119 	.globl _IP
                                    120 	.globl _P3
                                    121 	.globl _IE
                                    122 	.globl _P2
                                    123 	.globl _SBUF
                                    124 	.globl _SCON
                                    125 	.globl _P1
                                    126 	.globl _TH1
                                    127 	.globl _TH0
                                    128 	.globl _TL1
                                    129 	.globl _TL0
                                    130 	.globl _TMOD
                                    131 	.globl _TCON
                                    132 	.globl _PCON
                                    133 	.globl _DPH
                                    134 	.globl _DPL
                                    135 	.globl _SP
                                    136 	.globl _P0
                                    137 	.globl _intr
                                    138 	.globl _putchar
                                    139 	.globl _getchar
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0	=	0x0080
                           000081   146 _SP	=	0x0081
                           000082   147 _DPL	=	0x0082
                           000083   148 _DPH	=	0x0083
                           000087   149 _PCON	=	0x0087
                           000088   150 _TCON	=	0x0088
                           000089   151 _TMOD	=	0x0089
                           00008A   152 _TL0	=	0x008a
                           00008B   153 _TL1	=	0x008b
                           00008C   154 _TH0	=	0x008c
                           00008D   155 _TH1	=	0x008d
                           000090   156 _P1	=	0x0090
                           000098   157 _SCON	=	0x0098
                           000099   158 _SBUF	=	0x0099
                           0000A0   159 _P2	=	0x00a0
                           0000A8   160 _IE	=	0x00a8
                           0000B0   161 _P3	=	0x00b0
                           0000B8   162 _IP	=	0x00b8
                           0000C8   163 _T2CON	=	0x00c8
                           0000C9   164 _T2MOD	=	0x00c9
                           0000CA   165 _RCAP2L	=	0x00ca
                           0000CB   166 _RCAP2H	=	0x00cb
                           0000CC   167 _TL2	=	0x00cc
                           0000CD   168 _TH2	=	0x00cd
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000E0   171 _A	=	0x00e0
                           0000F0   172 _B	=	0x00f0
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000090   202 _T2	=	0x0090
                           000091   203 _T2EX	=	0x0091
                           000098   204 _RI	=	0x0098
                           000099   205 _TI	=	0x0099
                           00009A   206 _RB8	=	0x009a
                           00009B   207 _TB8	=	0x009b
                           00009C   208 _REN	=	0x009c
                           00009D   209 _SM2	=	0x009d
                           00009E   210 _SM1	=	0x009e
                           00009F   211 _SM0	=	0x009f
                           0000A0   212 _P2_0	=	0x00a0
                           0000A1   213 _P2_1	=	0x00a1
                           0000A2   214 _P2_2	=	0x00a2
                           0000A3   215 _P2_3	=	0x00a3
                           0000A4   216 _P2_4	=	0x00a4
                           0000A5   217 _P2_5	=	0x00a5
                           0000A6   218 _P2_6	=	0x00a6
                           0000A7   219 _P2_7	=	0x00a7
                           0000A8   220 _EX0	=	0x00a8
                           0000A9   221 _ET0	=	0x00a9
                           0000AA   222 _EX1	=	0x00aa
                           0000AB   223 _ET1	=	0x00ab
                           0000AC   224 _ES	=	0x00ac
                           0000AD   225 _ET2	=	0x00ad
                           0000AF   226 _EA	=	0x00af
                           0000B0   227 _P3_0	=	0x00b0
                           0000B1   228 _P3_1	=	0x00b1
                           0000B2   229 _P3_2	=	0x00b2
                           0000B3   230 _P3_3	=	0x00b3
                           0000B4   231 _P3_4	=	0x00b4
                           0000B5   232 _P3_5	=	0x00b5
                           0000B6   233 _P3_6	=	0x00b6
                           0000B7   234 _P3_7	=	0x00b7
                           0000B0   235 _RXD	=	0x00b0
                           0000B1   236 _TXD	=	0x00b1
                           0000B2   237 _INT0	=	0x00b2
                           0000B3   238 _INT1	=	0x00b3
                           0000B4   239 _T0	=	0x00b4
                           0000B5   240 _T1	=	0x00b5
                           0000B6   241 _WR	=	0x00b6
                           0000B7   242 _RD	=	0x00b7
                           0000B8   243 _PX0	=	0x00b8
                           0000B9   244 _PT0	=	0x00b9
                           0000BA   245 _PX1	=	0x00ba
                           0000BB   246 _PT1	=	0x00bb
                           0000BC   247 _PS	=	0x00bc
                           0000BD   248 _PT2	=	0x00bd
                           0000C8   249 _T2CON_0	=	0x00c8
                           0000C9   250 _T2CON_1	=	0x00c9
                           0000CA   251 _T2CON_2	=	0x00ca
                           0000CB   252 _T2CON_3	=	0x00cb
                           0000CC   253 _T2CON_4	=	0x00cc
                           0000CD   254 _T2CON_5	=	0x00cd
                           0000CE   255 _T2CON_6	=	0x00ce
                           0000CF   256 _T2CON_7	=	0x00cf
                           0000C8   257 _CP_RL2	=	0x00c8
                           0000C9   258 _C_T2	=	0x00c9
                           0000CA   259 _TR2	=	0x00ca
                           0000CB   260 _EXEN2	=	0x00cb
                           0000CC   261 _TCLK	=	0x00cc
                           0000CD   262 _RCLK	=	0x00cd
                           0000CE   263 _EXF2	=	0x00ce
                           0000CF   264 _TF2	=	0x00cf
                           0000D0   265 _P	=	0x00d0
                           0000D1   266 _FL	=	0x00d1
                           0000D2   267 _OV	=	0x00d2
                           0000D3   268 _RS0	=	0x00d3
                           0000D4   269 _RS1	=	0x00d4
                           0000D5   270 _F0	=	0x00d5
                           0000D6   271 _AC	=	0x00d6
                           0000D7   272 _CY	=	0x00d7
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; overlayable bit register bank
                                    282 ;--------------------------------------------------------
                                    283 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        284 bits:
      000000                        285 	.ds 1
                           008000   286 	b0 = bits[0]
                           008100   287 	b1 = bits[1]
                           008200   288 	b2 = bits[2]
                           008300   289 	b3 = bits[3]
                           008400   290 	b4 = bits[4]
                           008500   291 	b5 = bits[5]
                           008600   292 	b6 = bits[6]
                           008700   293 	b7 = bits[7]
                                    294 ;--------------------------------------------------------
                                    295 ; internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area DSEG    (DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable items in internal ram 
                                    300 ;--------------------------------------------------------
                                    301 ;--------------------------------------------------------
                                    302 ; Stack segment in internal ram 
                                    303 ;--------------------------------------------------------
                                    304 	.area	SSEG
      000000                        305 __start__stack:
      000000                        306 	.ds	1
                                    307 
                                    308 ;--------------------------------------------------------
                                    309 ; indirectly addressable internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area ISEG    (DATA)
                                    312 ;--------------------------------------------------------
                                    313 ; absolute internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area IABS    (ABS,DATA)
                                    316 	.area IABS    (ABS,DATA)
                                    317 ;--------------------------------------------------------
                                    318 ; bit data
                                    319 ;--------------------------------------------------------
                                    320 	.area BSEG    (BIT)
                                    321 ;--------------------------------------------------------
                                    322 ; paged external ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area PSEG    (PAG,XDATA)
                                    325 ;--------------------------------------------------------
                                    326 ; external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XSEG    (XDATA)
      000000                        329 _intr::
      000000                        330 	.ds 2
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r00r24         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'putchar'
                                    385 ;------------------------------------------------------------
                                    386 ;c                         Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	crc16.c:8: int putchar(int c) __naked {
                                    389 ;	-----------------------------------------
                                    390 ;	 function putchar
                                    391 ;	-----------------------------------------
      000000                        392 _putchar:
                                    393 ;	naked function: no prologue.
                                    394 ;	crc16.c:13: __endasm;
      000000 E5 82            [12]  395 	mov	a, dpl
      000002 02 00 30         [24]  396 	ljmp	0x0030
                                    397 ;	crc16.c:14: }
                                    398 ;	naked function: no epilogue.
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'getchar'
                                    401 ;------------------------------------------------------------
                                    402 ;	crc16.c:16: int getchar(void) __naked {
                                    403 ;	-----------------------------------------
                                    404 ;	 function getchar
                                    405 ;	-----------------------------------------
      000005                        406 _getchar:
                                    407 ;	naked function: no prologue.
                                    408 ;	crc16.c:22: __endasm;
      000005 12 00 32         [24]  409 	lcall	0x0032
      000008 F5 82            [12]  410 	mov	dpl, a
      00000A 75 83 00         [24]  411 	mov	dph, #0
      00000D 22               [24]  412 	ret
                                    413 ;	crc16.c:23: }
                                    414 ;	naked function: no epilogue.
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'int0'
                                    417 ;------------------------------------------------------------
                                    418 ;	crc16.c:46: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    419 ;	-----------------------------------------
                                    420 ;	 function int0
                                    421 ;	-----------------------------------------
      00000E                        422 _int0:
                           00000F   423 	ar7 = 0x0f
                           00000E   424 	ar6 = 0x0e
                           00000D   425 	ar5 = 0x0d
                           00000C   426 	ar4 = 0x0c
                           00000B   427 	ar3 = 0x0b
                           00000A   428 	ar2 = 0x0a
                           000009   429 	ar1 = 0x09
                           000008   430 	ar0 = 0x08
      00000E C0 E0            [24]  431 	push	acc
      000010 C0 82            [24]  432 	push	dpl
      000012 C0 83            [24]  433 	push	dph
                                    434 ;	crc16.c:47: intr = 1;
      000014 90r00r00         [24]  435 	mov	dptr,#_intr
      000017 74 01            [12]  436 	mov	a,#0x01
      000019 F0               [24]  437 	movx	@dptr,a
      00001A E4               [12]  438 	clr	a
      00001B A3               [24]  439 	inc	dptr
      00001C F0               [24]  440 	movx	@dptr,a
                                    441 ;	crc16.c:48: }
      00001D D0 83            [24]  442 	pop	dph
      00001F D0 82            [24]  443 	pop	dpl
      000021 D0 E0            [24]  444 	pop	acc
      000023 32               [24]  445 	reti
                                    446 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    447 ;	eliminated unneeded push/pop psw
                                    448 ;	eliminated unneeded push/pop b
                                    449 ;------------------------------------------------------------
                                    450 ;Allocation info for local variables in function 'main'
                                    451 ;------------------------------------------------------------
                                    452 ;base                      Allocated to stack - _bp +1
                                    453 ;t                         Allocated to stack - _bp +3
                                    454 ;len                       Allocated to registers 
                                    455 ;off                       Allocated to stack - _bp +5
                                    456 ;crc                       Allocated to registers r6 r7 
                                    457 ;bitp                      Allocated to registers r3 
                                    458 ;------------------------------------------------------------
                                    459 ;	crc16.c:53: void main(void) {
                                    460 ;	-----------------------------------------
                                    461 ;	 function main
                                    462 ;	-----------------------------------------
      000024                        463 _main:
                           000007   464 	ar7 = 0x07
                           000006   465 	ar6 = 0x06
                           000005   466 	ar5 = 0x05
                           000004   467 	ar4 = 0x04
                           000003   468 	ar3 = 0x03
                           000002   469 	ar2 = 0x02
                           000001   470 	ar1 = 0x01
                           000000   471 	ar0 = 0x00
      000024 C0*00            [24]  472 	push	_bp
      000026 E5 81            [12]  473 	mov	a,sp
      000028 F5*00            [12]  474 	mov	_bp,a
      00002A 24 06            [12]  475 	add	a,#0x06
      00002C F5 81            [12]  476 	mov	sp,a
                                    477 ;	crc16.c:58: intr = 0;
      00002E 90r00r00         [24]  478 	mov	dptr,#_intr
      000031 E4               [12]  479 	clr	a
      000032 F0               [24]  480 	movx	@dptr,a
      000033 A3               [24]  481 	inc	dptr
      000034 F0               [24]  482 	movx	@dptr,a
                                    483 ;	crc16.c:60: IT0 = 1;
                                    484 ;	assignBit
      000035 D2 88            [12]  485 	setb	_IT0
                                    486 ;	crc16.c:61: EX0 = 1;	
                                    487 ;	assignBit
      000037 D2 A8            [12]  488 	setb	_EX0
                                    489 ;	crc16.c:62: EA = 1;
                                    490 ;	assignBit
      000039 D2 AF            [12]  491 	setb	_EA
                                    492 ;	crc16.c:64: while (!intr) {
      00003B                        493 00131$:
      00003B 90r00r00         [24]  494 	mov	dptr,#_intr
      00003E E0               [24]  495 	movx	a,@dptr
      00003F F5 F0            [12]  496 	mov	b,a
      000041 A3               [24]  497 	inc	dptr
      000042 E0               [24]  498 	movx	a,@dptr
      000043 45 F0            [12]  499 	orl	a,b
      000045 60 03            [24]  500 	jz	00227$
      000047 02 00 00         [24]  501 	ljmp	0
      00004A                        502 00227$:
                                    503 ;	crc16.c:65: base = (ppd_uint8_t)0x0u;
      00004A A8*00            [24]  504 	mov	r0,_bp
      00004C 08               [12]  505 	inc	r0
      00004D E4               [12]  506 	clr	a
      00004E F6               [12]  507 	mov	@r0,a
      00004F 08               [12]  508 	inc	r0
      000050 F6               [12]  509 	mov	@r0,a
                                    510 ;	crc16.c:67: printf("COMPLETE base=0x%04x ", (unsigned int)base);
      000051 A8*00            [24]  511 	mov	r0,_bp
      000053 08               [12]  512 	inc	r0
      000054 86 06            [24]  513 	mov	ar6,@r0
      000056 08               [12]  514 	inc	r0
      000057 86 07            [24]  515 	mov	ar7,@r0
      000059 C0 06            [24]  516 	push	ar6
      00005B C0 07            [24]  517 	push	ar7
      00005D 74r00            [12]  518 	mov	a,#___str_0
      00005F C0 E0            [24]  519 	push	acc
      000061 74s00            [12]  520 	mov	a,#(___str_0 >> 8)
      000063 C0 E0            [24]  521 	push	acc
      000065 74 80            [12]  522 	mov	a,#0x80
      000067 C0 E0            [24]  523 	push	acc
      000069 12r00r00         [24]  524 	lcall	_printf
      00006C E5 81            [12]  525 	mov	a,sp
      00006E 24 FB            [12]  526 	add	a,#0xfb
      000070 F5 81            [12]  527 	mov	sp,a
                                    528 ;	crc16.c:68: printf("len=0x%04x ", len);
      000072 74 FF            [12]  529 	mov	a,#0xff
      000074 C0 E0            [24]  530 	push	acc
      000076 C0 E0            [24]  531 	push	acc
      000078 74r16            [12]  532 	mov	a,#___str_1
      00007A C0 E0            [24]  533 	push	acc
      00007C 74s00            [12]  534 	mov	a,#(___str_1 >> 8)
      00007E C0 E0            [24]  535 	push	acc
      000080 74 80            [12]  536 	mov	a,#0x80
      000082 C0 E0            [24]  537 	push	acc
      000084 12r00r00         [24]  538 	lcall	_printf
      000087 E5 81            [12]  539 	mov	a,sp
      000089 24 FB            [12]  540 	add	a,#0xfb
      00008B F5 81            [12]  541 	mov	sp,a
                                    542 ;	crc16.c:69: CCRCB_INIT(crc);
      00008D 7E FF            [12]  543 	mov	r6,#0xff
      00008F 7F FF            [12]  544 	mov	r7,#0xff
                                    545 ;	crc16.c:70: for (off = 0u; off < len; off++)
      000091 E5*00            [12]  546 	mov	a,_bp
      000093 24 05            [12]  547 	add	a,#0x05
      000095 F8               [12]  548 	mov	r0,a
      000096 E4               [12]  549 	clr	a
      000097 F6               [12]  550 	mov	@r0,a
      000098 08               [12]  551 	inc	r0
      000099 F6               [12]  552 	mov	@r0,a
      00009A                        553 00137$:
      00009A E5*00            [12]  554 	mov	a,_bp
      00009C 24 05            [12]  555 	add	a,#0x05
      00009E F8               [12]  556 	mov	r0,a
      00009F C3               [12]  557 	clr	c
      0000A0 E6               [12]  558 	mov	a,@r0
      0000A1 94 FF            [12]  559 	subb	a,#0xff
      0000A3 08               [12]  560 	inc	r0
      0000A4 E6               [12]  561 	mov	a,@r0
      0000A5 94 FF            [12]  562 	subb	a,#0xff
      0000A7 50 65            [24]  563 	jnc	00109$
                                    564 ;	crc16.c:71: CCRCB(crc, base[off], bitp);
      0000A9 7B 80            [12]  565 	mov	r3,#0x80
      0000AB                        566 00134$:
      0000AB EF               [12]  567 	mov	a,r7
      0000AC 23               [12]  568 	rl	a
      0000AD 54 01            [12]  569 	anl	a,#0x01
      0000AF FA               [12]  570 	mov	r2,a
      0000B0 7D 00            [12]  571 	mov	r5,#0x00
      0000B2 A8*00            [24]  572 	mov	r0,_bp
      0000B4 08               [12]  573 	inc	r0
      0000B5 E5*00            [12]  574 	mov	a,_bp
      0000B7 24 05            [12]  575 	add	a,#0x05
      0000B9 F9               [12]  576 	mov	r1,a
      0000BA E7               [12]  577 	mov	a,@r1
      0000BB 26               [12]  578 	add	a,@r0
      0000BC F5 82            [12]  579 	mov	dpl,a
      0000BE 09               [12]  580 	inc	r1
      0000BF E7               [12]  581 	mov	a,@r1
      0000C0 08               [12]  582 	inc	r0
      0000C1 36               [12]  583 	addc	a,@r0
      0000C2 F5 83            [12]  584 	mov	dph,a
      0000C4 E0               [24]  585 	movx	a,@dptr
      0000C5 FC               [12]  586 	mov	r4,a
      0000C6 EB               [12]  587 	mov	a,r3
      0000C7 52 04            [12]  588 	anl	ar4,a
      0000C9 EC               [12]  589 	mov	a,r4
      0000CA B4 01 00         [24]  590 	cjne	a,#0x01,00229$
      0000CD                        591 00229$:
      0000CD B3               [12]  592 	cpl	c
      0000CE 92*00            [24]  593 	mov	b0,c
      0000D0 C0 03            [24]  594 	push	ar3
      0000D2 A2*00            [12]  595 	mov	c,b0
      0000D4 E4               [12]  596 	clr	a
      0000D5 33               [12]  597 	rlc	a
      0000D6 7C 00            [12]  598 	mov	r4,#0x00
      0000D8 62 02            [12]  599 	xrl	ar2,a
      0000DA EC               [12]  600 	mov	a,r4
      0000DB 62 05            [12]  601 	xrl	ar5,a
      0000DD D0 03            [24]  602 	pop	ar3
      0000DF EA               [12]  603 	mov	a,r2
      0000E0 4D               [12]  604 	orl	a,r5
      0000E1 60 0E            [24]  605 	jz	00146$
      0000E3 EE               [12]  606 	mov	a,r6
      0000E4 2E               [12]  607 	add	a,r6
      0000E5 FC               [12]  608 	mov	r4,a
      0000E6 EF               [12]  609 	mov	a,r7
      0000E7 33               [12]  610 	rlc	a
      0000E8 FD               [12]  611 	mov	r5,a
      0000E9 63 04 21         [24]  612 	xrl	ar4,#0x21
      0000EC 63 05 10         [24]  613 	xrl	ar5,#0x10
      0000EF 80 06            [24]  614 	sjmp	00147$
      0000F1                        615 00146$:
      0000F1 EE               [12]  616 	mov	a,r6
      0000F2 2E               [12]  617 	add	a,r6
      0000F3 FC               [12]  618 	mov	r4,a
      0000F4 EF               [12]  619 	mov	a,r7
      0000F5 33               [12]  620 	rlc	a
      0000F6 FD               [12]  621 	mov	r5,a
      0000F7                        622 00147$:
      0000F7 8C 06            [24]  623 	mov	ar6,r4
      0000F9 8D 07            [24]  624 	mov	ar7,r5
      0000FB EB               [12]  625 	mov	a,r3
      0000FC C3               [12]  626 	clr	c
      0000FD 13               [12]  627 	rrc	a
      0000FE FB               [12]  628 	mov	r3,a
      0000FF 70 AA            [24]  629 	jnz	00134$
                                    630 ;	crc16.c:70: for (off = 0u; off < len; off++)
      000101 E5*00            [12]  631 	mov	a,_bp
      000103 24 05            [12]  632 	add	a,#0x05
      000105 F8               [12]  633 	mov	r0,a
      000106 06               [12]  634 	inc	@r0
      000107 B6 00 02         [24]  635 	cjne	@r0,#0x00,00232$
      00010A 08               [12]  636 	inc	r0
      00010B 06               [12]  637 	inc	@r0
      00010C                        638 00232$:
                                    639 ;	crc16.c:72: CCRCB_FINISH(crc);
      00010C 80 8C            [24]  640 	sjmp	00137$
      00010E                        641 00109$:
                                    642 ;	crc16.c:73: printf("CRC16=0x%04x\r\n", crc);
      00010E C0 06            [24]  643 	push	ar6
      000110 C0 07            [24]  644 	push	ar7
      000112 74r22            [12]  645 	mov	a,#___str_2
      000114 C0 E0            [24]  646 	push	acc
      000116 74s00            [12]  647 	mov	a,#(___str_2 >> 8)
      000118 C0 E0            [24]  648 	push	acc
      00011A 74 80            [12]  649 	mov	a,#0x80
      00011C C0 E0            [24]  650 	push	acc
      00011E 12r00r00         [24]  651 	lcall	_printf
      000121 E5 81            [12]  652 	mov	a,sp
      000123 24 FB            [12]  653 	add	a,#0xfb
      000125 F5 81            [12]  654 	mov	sp,a
                                    655 ;	crc16.c:76: while (1) {
      000127                        656 00129$:
                                    657 ;	crc16.c:77: printf("PARTIAL base=0x%04x ", (unsigned int)base);
      000127 A8*00            [24]  658 	mov	r0,_bp
      000129 08               [12]  659 	inc	r0
      00012A 86 06            [24]  660 	mov	ar6,@r0
      00012C 08               [12]  661 	inc	r0
      00012D 86 07            [24]  662 	mov	ar7,@r0
      00012F C0 06            [24]  663 	push	ar6
      000131 C0 07            [24]  664 	push	ar7
      000133 74r31            [12]  665 	mov	a,#___str_3
      000135 C0 E0            [24]  666 	push	acc
      000137 74s00            [12]  667 	mov	a,#(___str_3 >> 8)
      000139 C0 E0            [24]  668 	push	acc
      00013B 74 80            [12]  669 	mov	a,#0x80
      00013D C0 E0            [24]  670 	push	acc
      00013F 12r00r00         [24]  671 	lcall	_printf
      000142 E5 81            [12]  672 	mov	a,sp
      000144 24 FB            [12]  673 	add	a,#0xfb
      000146 F5 81            [12]  674 	mov	sp,a
                                    675 ;	crc16.c:78: printf("len=0x%04x ", len);
      000148 E4               [12]  676 	clr	a
      000149 C0 E0            [24]  677 	push	acc
      00014B 74 20            [12]  678 	mov	a,#0x20
      00014D C0 E0            [24]  679 	push	acc
      00014F 74r16            [12]  680 	mov	a,#___str_1
      000151 C0 E0            [24]  681 	push	acc
      000153 74s00            [12]  682 	mov	a,#(___str_1 >> 8)
      000155 C0 E0            [24]  683 	push	acc
      000157 74 80            [12]  684 	mov	a,#0x80
      000159 C0 E0            [24]  685 	push	acc
      00015B 12r00r00         [24]  686 	lcall	_printf
      00015E E5 81            [12]  687 	mov	a,sp
      000160 24 FB            [12]  688 	add	a,#0xfb
      000162 F5 81            [12]  689 	mov	sp,a
                                    690 ;	crc16.c:79: CCRCB_INIT(crc);
      000164 7E FF            [12]  691 	mov	r6,#0xff
      000166 7F FF            [12]  692 	mov	r7,#0xff
                                    693 ;	crc16.c:80: for (off = 0u; off < len; off++)
      000168 E5*00            [12]  694 	mov	a,_bp
      00016A 24 05            [12]  695 	add	a,#0x05
      00016C F8               [12]  696 	mov	r0,a
      00016D E4               [12]  697 	clr	a
      00016E F6               [12]  698 	mov	@r0,a
      00016F 08               [12]  699 	inc	r0
      000170 F6               [12]  700 	mov	@r0,a
      000171                        701 00142$:
      000171 E5*00            [12]  702 	mov	a,_bp
      000173 24 05            [12]  703 	add	a,#0x05
      000175 F8               [12]  704 	mov	r0,a
      000176 C3               [12]  705 	clr	c
      000177 08               [12]  706 	inc	r0
      000178 E6               [12]  707 	mov	a,@r0
      000179 94 20            [12]  708 	subb	a,#0x20
      00017B 50 65            [24]  709 	jnc	00120$
                                    710 ;	crc16.c:81: CCRCB(crc, base[off], bitp);
      00017D 7B 80            [12]  711 	mov	r3,#0x80
      00017F                        712 00139$:
      00017F EF               [12]  713 	mov	a,r7
      000180 23               [12]  714 	rl	a
      000181 54 01            [12]  715 	anl	a,#0x01
      000183 FA               [12]  716 	mov	r2,a
      000184 7D 00            [12]  717 	mov	r5,#0x00
      000186 A8*00            [24]  718 	mov	r0,_bp
      000188 08               [12]  719 	inc	r0
      000189 E5*00            [12]  720 	mov	a,_bp
      00018B 24 05            [12]  721 	add	a,#0x05
      00018D F9               [12]  722 	mov	r1,a
      00018E E7               [12]  723 	mov	a,@r1
      00018F 26               [12]  724 	add	a,@r0
      000190 F5 82            [12]  725 	mov	dpl,a
      000192 09               [12]  726 	inc	r1
      000193 E7               [12]  727 	mov	a,@r1
      000194 08               [12]  728 	inc	r0
      000195 36               [12]  729 	addc	a,@r0
      000196 F5 83            [12]  730 	mov	dph,a
      000198 E0               [24]  731 	movx	a,@dptr
      000199 FC               [12]  732 	mov	r4,a
      00019A EB               [12]  733 	mov	a,r3
      00019B 52 04            [12]  734 	anl	ar4,a
      00019D EC               [12]  735 	mov	a,r4
      00019E B4 01 00         [24]  736 	cjne	a,#0x01,00234$
      0001A1                        737 00234$:
      0001A1 B3               [12]  738 	cpl	c
      0001A2 92*00            [24]  739 	mov	b0,c
      0001A4 C0 03            [24]  740 	push	ar3
      0001A6 A2*00            [12]  741 	mov	c,b0
      0001A8 E4               [12]  742 	clr	a
      0001A9 33               [12]  743 	rlc	a
      0001AA 7C 00            [12]  744 	mov	r4,#0x00
      0001AC 62 02            [12]  745 	xrl	ar2,a
      0001AE EC               [12]  746 	mov	a,r4
      0001AF 62 05            [12]  747 	xrl	ar5,a
      0001B1 D0 03            [24]  748 	pop	ar3
      0001B3 EA               [12]  749 	mov	a,r2
      0001B4 4D               [12]  750 	orl	a,r5
      0001B5 60 0E            [24]  751 	jz	00148$
      0001B7 EE               [12]  752 	mov	a,r6
      0001B8 2E               [12]  753 	add	a,r6
      0001B9 FC               [12]  754 	mov	r4,a
      0001BA EF               [12]  755 	mov	a,r7
      0001BB 33               [12]  756 	rlc	a
      0001BC FD               [12]  757 	mov	r5,a
      0001BD 63 04 21         [24]  758 	xrl	ar4,#0x21
      0001C0 63 05 10         [24]  759 	xrl	ar5,#0x10
      0001C3 80 06            [24]  760 	sjmp	00149$
      0001C5                        761 00148$:
      0001C5 EE               [12]  762 	mov	a,r6
      0001C6 2E               [12]  763 	add	a,r6
      0001C7 FC               [12]  764 	mov	r4,a
      0001C8 EF               [12]  765 	mov	a,r7
      0001C9 33               [12]  766 	rlc	a
      0001CA FD               [12]  767 	mov	r5,a
      0001CB                        768 00149$:
      0001CB 8C 06            [24]  769 	mov	ar6,r4
      0001CD 8D 07            [24]  770 	mov	ar7,r5
      0001CF EB               [12]  771 	mov	a,r3
      0001D0 C3               [12]  772 	clr	c
      0001D1 13               [12]  773 	rrc	a
      0001D2 FB               [12]  774 	mov	r3,a
      0001D3 70 AA            [24]  775 	jnz	00139$
                                    776 ;	crc16.c:80: for (off = 0u; off < len; off++)
      0001D5 E5*00            [12]  777 	mov	a,_bp
      0001D7 24 05            [12]  778 	add	a,#0x05
      0001D9 F8               [12]  779 	mov	r0,a
      0001DA 06               [12]  780 	inc	@r0
      0001DB B6 00 02         [24]  781 	cjne	@r0,#0x00,00237$
      0001DE 08               [12]  782 	inc	r0
      0001DF 06               [12]  783 	inc	@r0
      0001E0                        784 00237$:
                                    785 ;	crc16.c:82: CCRCB_FINISH(crc);
      0001E0 80 8F            [24]  786 	sjmp	00142$
      0001E2                        787 00120$:
                                    788 ;	crc16.c:83: printf("CRC16=0x%04x\r\n", crc);
      0001E2 C0 06            [24]  789 	push	ar6
      0001E4 C0 07            [24]  790 	push	ar7
      0001E6 74r22            [12]  791 	mov	a,#___str_2
      0001E8 C0 E0            [24]  792 	push	acc
      0001EA 74s00            [12]  793 	mov	a,#(___str_2 >> 8)
      0001EC C0 E0            [24]  794 	push	acc
      0001EE 74 80            [12]  795 	mov	a,#0x80
      0001F0 C0 E0            [24]  796 	push	acc
      0001F2 12r00r00         [24]  797 	lcall	_printf
      0001F5 E5 81            [12]  798 	mov	a,sp
      0001F7 24 FB            [12]  799 	add	a,#0xfb
      0001F9 F5 81            [12]  800 	mov	sp,a
                                    801 ;	crc16.c:85: if (intr) {
      0001FB 90r00r00         [24]  802 	mov	dptr,#_intr
      0001FE E0               [24]  803 	movx	a,@dptr
      0001FF F5 F0            [12]  804 	mov	b,a
      000201 A3               [24]  805 	inc	dptr
      000202 E0               [24]  806 	movx	a,@dptr
      000203 45 F0            [12]  807 	orl	a,b
      000205 60 1A            [24]  808 	jz	00124$
                                    809 ;	crc16.c:86: EA = 0;
                                    810 ;	assignBit
      000207 C2 AF            [12]  811 	clr	_EA
                                    812 ;	crc16.c:87: printf("interrupted\n");
      000209 74r46            [12]  813 	mov	a,#___str_4
      00020B C0 E0            [24]  814 	push	acc
      00020D 74s00            [12]  815 	mov	a,#(___str_4 >> 8)
      00020F C0 E0            [24]  816 	push	acc
      000211 74 80            [12]  817 	mov	a,#0x80
      000213 C0 E0            [24]  818 	push	acc
      000215 12r00r00         [24]  819 	lcall	_printf
      000218 15 81            [12]  820 	dec	sp
      00021A 15 81            [12]  821 	dec	sp
      00021C 15 81            [12]  822 	dec	sp
                                    823 ;	crc16.c:88: break;
      00021E 02r00r3B         [24]  824 	ljmp	00131$
      000221                        825 00124$:
                                    826 ;	crc16.c:91: t = base + (len >> 1);
      000221 A8*00            [24]  827 	mov	r0,_bp
      000223 08               [12]  828 	inc	r0
      000224 E5*00            [12]  829 	mov	a,_bp
      000226 24 03            [12]  830 	add	a,#0x03
      000228 F9               [12]  831 	mov	r1,a
      000229 E6               [12]  832 	mov	a,@r0
      00022A F7               [12]  833 	mov	@r1,a
      00022B 74 10            [12]  834 	mov	a,#0x10
      00022D 08               [12]  835 	inc	r0
      00022E 26               [12]  836 	add	a,@r0
      00022F 09               [12]  837 	inc	r1
      000230 F7               [12]  838 	mov	@r1,a
                                    839 ;	crc16.c:92: if (t < base) break;
      000231 E5*00            [12]  840 	mov	a,_bp
      000233 24 03            [12]  841 	add	a,#0x03
      000235 F8               [12]  842 	mov	r0,a
      000236 A9*00            [24]  843 	mov	r1,_bp
      000238 09               [12]  844 	inc	r1
      000239 C3               [12]  845 	clr	c
      00023A E6               [12]  846 	mov	a,@r0
      00023B 97               [12]  847 	subb	a,@r1
      00023C 08               [12]  848 	inc	r0
      00023D E6               [12]  849 	mov	a,@r0
      00023E 09               [12]  850 	inc	r1
      00023F 97               [12]  851 	subb	a,@r1
      000240 50 03            [24]  852 	jnc	00239$
      000242 02r00r3B         [24]  853 	ljmp	00131$
      000245                        854 00239$:
                                    855 ;	crc16.c:93: else base = t;
      000245 E5*00            [12]  856 	mov	a,_bp
      000247 24 03            [12]  857 	add	a,#0x03
      000249 F8               [12]  858 	mov	r0,a
      00024A A9*00            [24]  859 	mov	r1,_bp
      00024C 09               [12]  860 	inc	r1
      00024D E6               [12]  861 	mov	a,@r0
      00024E F7               [12]  862 	mov	@r1,a
      00024F 08               [12]  863 	inc	r0
      000250 09               [12]  864 	inc	r1
      000251 E6               [12]  865 	mov	a,@r0
      000252 F7               [12]  866 	mov	@r1,a
                                    867 ;	crc16.c:100: __endasm;
      000253 02r01r27         [24]  868 	ljmp	00129$
                                    869 ;	crc16.c:105: }
      000256 85*00 81         [24]  870 	mov	sp,_bp
      000259 D0*00            [24]  871 	pop	_bp
      00025B 22               [24]  872 	ret
                                    873 	.area CSEG    (CODE)
                                    874 	.area CONST   (CODE)
                                    875 	.area CONST   (CODE)
      000000                        876 ___str_0:
      000000 43 4F 4D 50 4C 45 54   877 	.ascii "COMPLETE base=0x%04x "
             45 20 62 61 73 65 3D
             30 78 25 30 34 78 20
      000015 00                     878 	.db 0x00
                                    879 	.area CSEG    (CODE)
                                    880 	.area CONST   (CODE)
      000016                        881 ___str_1:
      000016 6C 65 6E 3D 30 78 25   882 	.ascii "len=0x%04x "
             30 34 78 20
      000021 00                     883 	.db 0x00
                                    884 	.area CSEG    (CODE)
                                    885 	.area CONST   (CODE)
      000022                        886 ___str_2:
      000022 43 52 43 31 36 3D 30   887 	.ascii "CRC16=0x%04x"
             78 25 30 34 78
      00002E 0D                     888 	.db 0x0d
      00002F 0A                     889 	.db 0x0a
      000030 00                     890 	.db 0x00
                                    891 	.area CSEG    (CODE)
                                    892 	.area CONST   (CODE)
      000031                        893 ___str_3:
      000031 50 41 52 54 49 41 4C   894 	.ascii "PARTIAL base=0x%04x "
             20 62 61 73 65 3D 30
             78 25 30 34 78 20
      000045 00                     895 	.db 0x00
                                    896 	.area CSEG    (CODE)
                                    897 	.area CONST   (CODE)
      000046                        898 ___str_4:
      000046 69 6E 74 65 72 72 75   899 	.ascii "interrupted"
             70 74 65 64
      000051 0A                     900 	.db 0x0a
      000052 00                     901 	.db 0x00
                                    902 	.area CSEG    (CODE)
                                    903 	.area XINIT   (CODE)
                                    904 	.area CABS    (ABS,CODE)
