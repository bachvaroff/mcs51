                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module crc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _printf
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _FL
                                     21 	.globl _P
                                     22 	.globl _TF2
                                     23 	.globl _EXF2
                                     24 	.globl _RCLK
                                     25 	.globl _TCLK
                                     26 	.globl _EXEN2
                                     27 	.globl _TR2
                                     28 	.globl _C_T2
                                     29 	.globl _CP_RL2
                                     30 	.globl _T2CON_7
                                     31 	.globl _T2CON_6
                                     32 	.globl _T2CON_5
                                     33 	.globl _T2CON_4
                                     34 	.globl _T2CON_3
                                     35 	.globl _T2CON_2
                                     36 	.globl _T2CON_1
                                     37 	.globl _T2CON_0
                                     38 	.globl _PT2
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ET2
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _T2EX
                                     84 	.globl _T2
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _B
                                    110 	.globl _A
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _TH2
                                    114 	.globl _TL2
                                    115 	.globl _RCAP2H
                                    116 	.globl _RCAP2L
                                    117 	.globl _T2MOD
                                    118 	.globl _T2CON
                                    119 	.globl _IP
                                    120 	.globl _P3
                                    121 	.globl _IE
                                    122 	.globl _P2
                                    123 	.globl _SBUF
                                    124 	.globl _SCON
                                    125 	.globl _P1
                                    126 	.globl _TH1
                                    127 	.globl _TH0
                                    128 	.globl _TL1
                                    129 	.globl _TL0
                                    130 	.globl _TMOD
                                    131 	.globl _TCON
                                    132 	.globl _PCON
                                    133 	.globl _DPH
                                    134 	.globl _DPL
                                    135 	.globl _SP
                                    136 	.globl _P0
                                    137 	.globl _bitp
                                    138 	.globl _crc
                                    139 	.globl _off
                                    140 	.globl _len
                                    141 	.globl _t
                                    142 	.globl _base
                                    143 	.globl _intr
                                    144 ;--------------------------------------------------------
                                    145 ; special function registers
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0	=	0x0080
                           000081   150 _SP	=	0x0081
                           000082   151 _DPL	=	0x0082
                           000083   152 _DPH	=	0x0083
                           000087   153 _PCON	=	0x0087
                           000088   154 _TCON	=	0x0088
                           000089   155 _TMOD	=	0x0089
                           00008A   156 _TL0	=	0x008a
                           00008B   157 _TL1	=	0x008b
                           00008C   158 _TH0	=	0x008c
                           00008D   159 _TH1	=	0x008d
                           000090   160 _P1	=	0x0090
                           000098   161 _SCON	=	0x0098
                           000099   162 _SBUF	=	0x0099
                           0000A0   163 _P2	=	0x00a0
                           0000A8   164 _IE	=	0x00a8
                           0000B0   165 _P3	=	0x00b0
                           0000B8   166 _IP	=	0x00b8
                           0000C8   167 _T2CON	=	0x00c8
                           0000C9   168 _T2MOD	=	0x00c9
                           0000CA   169 _RCAP2L	=	0x00ca
                           0000CB   170 _RCAP2H	=	0x00cb
                           0000CC   171 _TL2	=	0x00cc
                           0000CD   172 _TH2	=	0x00cd
                           0000D0   173 _PSW	=	0x00d0
                           0000E0   174 _ACC	=	0x00e0
                           0000E0   175 _A	=	0x00e0
                           0000F0   176 _B	=	0x00f0
                                    177 ;--------------------------------------------------------
                                    178 ; special function bits
                                    179 ;--------------------------------------------------------
                                    180 	.area RSEG    (ABS,DATA)
      000000                        181 	.org 0x0000
                           000080   182 _P0_0	=	0x0080
                           000081   183 _P0_1	=	0x0081
                           000082   184 _P0_2	=	0x0082
                           000083   185 _P0_3	=	0x0083
                           000084   186 _P0_4	=	0x0084
                           000085   187 _P0_5	=	0x0085
                           000086   188 _P0_6	=	0x0086
                           000087   189 _P0_7	=	0x0087
                           000088   190 _IT0	=	0x0088
                           000089   191 _IE0	=	0x0089
                           00008A   192 _IT1	=	0x008a
                           00008B   193 _IE1	=	0x008b
                           00008C   194 _TR0	=	0x008c
                           00008D   195 _TF0	=	0x008d
                           00008E   196 _TR1	=	0x008e
                           00008F   197 _TF1	=	0x008f
                           000090   198 _P1_0	=	0x0090
                           000091   199 _P1_1	=	0x0091
                           000092   200 _P1_2	=	0x0092
                           000093   201 _P1_3	=	0x0093
                           000094   202 _P1_4	=	0x0094
                           000095   203 _P1_5	=	0x0095
                           000096   204 _P1_6	=	0x0096
                           000097   205 _P1_7	=	0x0097
                           000090   206 _T2	=	0x0090
                           000091   207 _T2EX	=	0x0091
                           000098   208 _RI	=	0x0098
                           000099   209 _TI	=	0x0099
                           00009A   210 _RB8	=	0x009a
                           00009B   211 _TB8	=	0x009b
                           00009C   212 _REN	=	0x009c
                           00009D   213 _SM2	=	0x009d
                           00009E   214 _SM1	=	0x009e
                           00009F   215 _SM0	=	0x009f
                           0000A0   216 _P2_0	=	0x00a0
                           0000A1   217 _P2_1	=	0x00a1
                           0000A2   218 _P2_2	=	0x00a2
                           0000A3   219 _P2_3	=	0x00a3
                           0000A4   220 _P2_4	=	0x00a4
                           0000A5   221 _P2_5	=	0x00a5
                           0000A6   222 _P2_6	=	0x00a6
                           0000A7   223 _P2_7	=	0x00a7
                           0000A8   224 _EX0	=	0x00a8
                           0000A9   225 _ET0	=	0x00a9
                           0000AA   226 _EX1	=	0x00aa
                           0000AB   227 _ET1	=	0x00ab
                           0000AC   228 _ES	=	0x00ac
                           0000AD   229 _ET2	=	0x00ad
                           0000AF   230 _EA	=	0x00af
                           0000B0   231 _P3_0	=	0x00b0
                           0000B1   232 _P3_1	=	0x00b1
                           0000B2   233 _P3_2	=	0x00b2
                           0000B3   234 _P3_3	=	0x00b3
                           0000B4   235 _P3_4	=	0x00b4
                           0000B5   236 _P3_5	=	0x00b5
                           0000B6   237 _P3_6	=	0x00b6
                           0000B7   238 _P3_7	=	0x00b7
                           0000B0   239 _RXD	=	0x00b0
                           0000B1   240 _TXD	=	0x00b1
                           0000B2   241 _INT0	=	0x00b2
                           0000B3   242 _INT1	=	0x00b3
                           0000B4   243 _T0	=	0x00b4
                           0000B5   244 _T1	=	0x00b5
                           0000B6   245 _WR	=	0x00b6
                           0000B7   246 _RD	=	0x00b7
                           0000B8   247 _PX0	=	0x00b8
                           0000B9   248 _PT0	=	0x00b9
                           0000BA   249 _PX1	=	0x00ba
                           0000BB   250 _PT1	=	0x00bb
                           0000BC   251 _PS	=	0x00bc
                           0000BD   252 _PT2	=	0x00bd
                           0000C8   253 _T2CON_0	=	0x00c8
                           0000C9   254 _T2CON_1	=	0x00c9
                           0000CA   255 _T2CON_2	=	0x00ca
                           0000CB   256 _T2CON_3	=	0x00cb
                           0000CC   257 _T2CON_4	=	0x00cc
                           0000CD   258 _T2CON_5	=	0x00cd
                           0000CE   259 _T2CON_6	=	0x00ce
                           0000CF   260 _T2CON_7	=	0x00cf
                           0000C8   261 _CP_RL2	=	0x00c8
                           0000C9   262 _C_T2	=	0x00c9
                           0000CA   263 _TR2	=	0x00ca
                           0000CB   264 _EXEN2	=	0x00cb
                           0000CC   265 _TCLK	=	0x00cc
                           0000CD   266 _RCLK	=	0x00cd
                           0000CE   267 _EXF2	=	0x00ce
                           0000CF   268 _TF2	=	0x00cf
                           0000D0   269 _P	=	0x00d0
                           0000D1   270 _FL	=	0x00d1
                           0000D2   271 _OV	=	0x00d2
                           0000D3   272 _RS0	=	0x00d3
                           0000D4   273 _RS1	=	0x00d4
                           0000D5   274 _F0	=	0x00d5
                           0000D6   275 _AC	=	0x00d6
                           0000D7   276 _CY	=	0x00d7
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable register banks
                                    279 ;--------------------------------------------------------
                                    280 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 ;--------------------------------------------------------
                                    285 ; overlayable bit register bank
                                    286 ;--------------------------------------------------------
                                    287 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        288 bits:
      000000                        289 	.ds 1
                           008000   290 	b0 = bits[0]
                           008100   291 	b1 = bits[1]
                           008200   292 	b2 = bits[2]
                           008300   293 	b3 = bits[3]
                           008400   294 	b4 = bits[4]
                           008500   295 	b5 = bits[5]
                           008600   296 	b6 = bits[6]
                           008700   297 	b7 = bits[7]
                                    298 ;--------------------------------------------------------
                                    299 ; internal ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area DSEG    (DATA)
                                    302 ;--------------------------------------------------------
                                    303 ; overlayable items in internal ram 
                                    304 ;--------------------------------------------------------
                                    305 ;--------------------------------------------------------
                                    306 ; Stack segment in internal ram 
                                    307 ;--------------------------------------------------------
                                    308 	.area	SSEG
      000000                        309 __start__stack:
      000000                        310 	.ds	1
                                    311 
                                    312 ;--------------------------------------------------------
                                    313 ; indirectly addressable internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area ISEG    (DATA)
      000000                        316 _intr::
      000000                        317 	.ds 1
      000001                        318 _base::
      000001                        319 	.ds 2
      000003                        320 _t::
      000003                        321 	.ds 2
      000005                        322 _len::
      000005                        323 	.ds 2
      000007                        324 _off::
      000007                        325 	.ds 2
      000009                        326 _crc::
      000009                        327 	.ds 2
      00000B                        328 _bitp::
      00000B                        329 	.ds 1
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
                                    339 ;--------------------------------------------------------
                                    340 ; paged external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area PSEG    (PAG,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XSEG    (XDATA)
                                    347 ;--------------------------------------------------------
                                    348 ; absolute external ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area XABS    (ABS,XDATA)
                                    351 ;--------------------------------------------------------
                                    352 ; external initialized ram data
                                    353 ;--------------------------------------------------------
                                    354 	.area XISEG   (XDATA)
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT0 (CODE)
                                    357 	.area GSINIT1 (CODE)
                                    358 	.area GSINIT2 (CODE)
                                    359 	.area GSINIT3 (CODE)
                                    360 	.area GSINIT4 (CODE)
                                    361 	.area GSINIT5 (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.area GSFINAL (CODE)
                                    364 	.area CSEG    (CODE)
                                    365 ;--------------------------------------------------------
                                    366 ; interrupt vector 
                                    367 ;--------------------------------------------------------
                                    368 	.area HOME    (CODE)
      000000                        369 __interrupt_vect:
      000000 02r00r00         [24]  370 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  371 	ljmp	_int0
                                    372 ;--------------------------------------------------------
                                    373 ; global & static initialisations
                                    374 ;--------------------------------------------------------
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT  (CODE)
                                    377 	.area GSFINAL (CODE)
                                    378 	.area GSINIT  (CODE)
                                    379 	.globl __sdcc_gsinit_startup
                                    380 	.globl __sdcc_program_startup
                                    381 	.globl __start__stack
                                    382 	.globl __mcs51_genXINIT
                                    383 	.globl __mcs51_genXRAMCLEAR
                                    384 	.globl __mcs51_genRAMCLEAR
                                    385 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  386 	ljmp	__sdcc_program_startup
                                    387 ;--------------------------------------------------------
                                    388 ; Home
                                    389 ;--------------------------------------------------------
                                    390 	.area HOME    (CODE)
                                    391 	.area HOME    (CODE)
      000006                        392 __sdcc_program_startup:
      000006 02r00r0C         [24]  393 	ljmp	_main
                                    394 ;	return from main will return to caller
                                    395 ;--------------------------------------------------------
                                    396 ; code
                                    397 ;--------------------------------------------------------
                                    398 	.area CSEG    (CODE)
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'int0'
                                    401 ;------------------------------------------------------------
                                    402 ;	crc16.c:28: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    403 ;	-----------------------------------------
                                    404 ;	 function int0
                                    405 ;	-----------------------------------------
      000000                        406 _int0:
                           00000F   407 	ar7 = 0x0f
                           00000E   408 	ar6 = 0x0e
                           00000D   409 	ar5 = 0x0d
                           00000C   410 	ar4 = 0x0c
                           00000B   411 	ar3 = 0x0b
                           00000A   412 	ar2 = 0x0a
                           000009   413 	ar1 = 0x09
                           000008   414 	ar0 = 0x08
      000000 C0 D0            [24]  415 	push	psw
      000002 75 D0 08         [24]  416 	mov	psw,#0x08
                                    417 ;	crc16.c:29: intr = 1u;
      000005 78r00            [12]  418 	mov	r0,#_intr
      000007 76 01            [12]  419 	mov	@r0,#0x01
                                    420 ;	crc16.c:30: }
      000009 D0 D0            [24]  421 	pop	psw
      00000B 32               [24]  422 	reti
                                    423 ;	eliminated unneeded push/pop dpl
                                    424 ;	eliminated unneeded push/pop dph
                                    425 ;	eliminated unneeded push/pop b
                                    426 ;	eliminated unneeded push/pop acc
                                    427 ;------------------------------------------------------------
                                    428 ;Allocation info for local variables in function 'main'
                                    429 ;------------------------------------------------------------
                                    430 ;	crc16.c:39: void main(void) {
                                    431 ;	-----------------------------------------
                                    432 ;	 function main
                                    433 ;	-----------------------------------------
      00000C                        434 _main:
                           000007   435 	ar7 = 0x07
                           000006   436 	ar6 = 0x06
                           000005   437 	ar5 = 0x05
                           000004   438 	ar4 = 0x04
                           000003   439 	ar3 = 0x03
                           000002   440 	ar2 = 0x02
                           000001   441 	ar1 = 0x01
                           000000   442 	ar0 = 0x00
                                    443 ;	crc16.c:40: intr = 0u;
      00000C 78r00            [12]  444 	mov	r0,#_intr
      00000E 76 00            [12]  445 	mov	@r0,#0x00
                                    446 ;	crc16.c:42: IT0 = 1;
                                    447 ;	assignBit
      000010 D2 88            [12]  448 	setb	_IT0
                                    449 ;	crc16.c:43: EX0 = 1;	
                                    450 ;	assignBit
      000012 D2 A8            [12]  451 	setb	_EX0
                                    452 ;	crc16.c:44: EA = 1;
                                    453 ;	assignBit
      000014 D2 AF            [12]  454 	setb	_EA
                                    455 ;	crc16.c:46: while (!intr) {
      000016                        456 00131$:
      000016 78r00            [12]  457 	mov	r0,#_intr
      000018 E6               [12]  458 	mov	a,@r0
      000019 60 03            [24]  459 	jz	00210$
      00001B 02r02r78         [24]  460 	ljmp	00133$
      00001E                        461 00210$:
                                    462 ;	crc16.c:47: base = (pxd_uint8_t)0x0u;
      00001E 78r01            [12]  463 	mov	r0,#_base
      000020 E4               [12]  464 	clr	a
      000021 F6               [12]  465 	mov	@r0,a
      000022 08               [12]  466 	inc	r0
      000023 F6               [12]  467 	mov	@r0,a
                                    468 ;	crc16.c:48: len = TLEN;
      000024 78r05            [12]  469 	mov	r0,#_len
      000026 76 FF            [12]  470 	mov	@r0,#0xff
      000028 08               [12]  471 	inc	r0
      000029 76 FF            [12]  472 	mov	@r0,#0xff
                                    473 ;	crc16.c:49: printf("COMPLETE base=%p ", base);
      00002B 78r01            [12]  474 	mov	r0,#_base
      00002D 86 05            [24]  475 	mov	ar5,@r0
      00002F 08               [12]  476 	inc	r0
      000030 86 06            [24]  477 	mov	ar6,@r0
      000032 7F 00            [12]  478 	mov	r7,#0x00
      000034 C0 05            [24]  479 	push	ar5
      000036 C0 06            [24]  480 	push	ar6
      000038 C0 07            [24]  481 	push	ar7
      00003A 74r00            [12]  482 	mov	a,#___str_0
      00003C C0 E0            [24]  483 	push	acc
      00003E 74s00            [12]  484 	mov	a,#(___str_0 >> 8)
      000040 C0 E0            [24]  485 	push	acc
      000042 74 80            [12]  486 	mov	a,#0x80
      000044 C0 E0            [24]  487 	push	acc
      000046 12r00r00         [24]  488 	lcall	_printf
      000049 E5 81            [12]  489 	mov	a,sp
      00004B 24 FA            [12]  490 	add	a,#0xfa
      00004D F5 81            [12]  491 	mov	sp,a
                                    492 ;	crc16.c:50: printf("len=0x%04x ", len);
      00004F 78r05            [12]  493 	mov	r0,#_len
      000051 E6               [12]  494 	mov	a,@r0
      000052 C0 E0            [24]  495 	push	acc
      000054 08               [12]  496 	inc	r0
      000055 E6               [12]  497 	mov	a,@r0
      000056 C0 E0            [24]  498 	push	acc
      000058 74r12            [12]  499 	mov	a,#___str_1
      00005A C0 E0            [24]  500 	push	acc
      00005C 74s00            [12]  501 	mov	a,#(___str_1 >> 8)
      00005E C0 E0            [24]  502 	push	acc
      000060 74 80            [12]  503 	mov	a,#0x80
      000062 C0 E0            [24]  504 	push	acc
      000064 12r00r00         [24]  505 	lcall	_printf
      000067 E5 81            [12]  506 	mov	a,sp
      000069 24 FB            [12]  507 	add	a,#0xfb
      00006B F5 81            [12]  508 	mov	sp,a
                                    509 ;	crc16.c:51: CCRCB_INIT(crc);
      00006D 78r09            [12]  510 	mov	r0,#_crc
      00006F 76 FF            [12]  511 	mov	@r0,#0xff
      000071 08               [12]  512 	inc	r0
      000072 76 FF            [12]  513 	mov	@r0,#0xff
                                    514 ;	crc16.c:52: for (off = 0u; off < len; off++)
      000074 78r07            [12]  515 	mov	r0,#_off
      000076 E4               [12]  516 	clr	a
      000077 F6               [12]  517 	mov	@r0,a
      000078 08               [12]  518 	inc	r0
      000079 F6               [12]  519 	mov	@r0,a
      00007A                        520 00137$:
      00007A 78r07            [12]  521 	mov	r0,#_off
      00007C 79r05            [12]  522 	mov	r1,#_len
      00007E C3               [12]  523 	clr	c
      00007F E6               [12]  524 	mov	a,@r0
      000080 97               [12]  525 	subb	a,@r1
      000081 08               [12]  526 	inc	r0
      000082 E6               [12]  527 	mov	a,@r0
      000083 09               [12]  528 	inc	r1
      000084 97               [12]  529 	subb	a,@r1
      000085 50 6F            [24]  530 	jnc	00109$
                                    531 ;	crc16.c:53: CCRCB(crc, base[off], bitp);
      000087 78r0B            [12]  532 	mov	r0,#_bitp
      000089 76 80            [12]  533 	mov	@r0,#0x80
      00008B                        534 00134$:
      00008B 78r0A            [12]  535 	mov	r0,#(_crc + 1)
      00008D E6               [12]  536 	mov	a,@r0
      00008E 23               [12]  537 	rl	a
      00008F 54 01            [12]  538 	anl	a,#0x01
      000091 FE               [12]  539 	mov	r6,a
      000092 7F 00            [12]  540 	mov	r7,#0x00
      000094 78r01            [12]  541 	mov	r0,#_base
      000096 79r07            [12]  542 	mov	r1,#_off
      000098 E7               [12]  543 	mov	a,@r1
      000099 26               [12]  544 	add	a,@r0
      00009A F5 82            [12]  545 	mov	dpl,a
      00009C 09               [12]  546 	inc	r1
      00009D E7               [12]  547 	mov	a,@r1
      00009E 08               [12]  548 	inc	r0
      00009F 36               [12]  549 	addc	a,@r0
      0000A0 F5 83            [12]  550 	mov	dph,a
      0000A2 E0               [24]  551 	movx	a,@dptr
      0000A3 FD               [12]  552 	mov	r5,a
      0000A4 78r0B            [12]  553 	mov	r0,#_bitp
      0000A6 E6               [12]  554 	mov	a,@r0
      0000A7 52 05            [12]  555 	anl	ar5,a
      0000A9 ED               [12]  556 	mov	a,r5
      0000AA B4 01 00         [24]  557 	cjne	a,#0x01,00212$
      0000AD                        558 00212$:
      0000AD B3               [12]  559 	cpl	c
      0000AE 92*00            [24]  560 	mov	b0,c
      0000B0 E4               [12]  561 	clr	a
      0000B1 33               [12]  562 	rlc	a
      0000B2 FC               [12]  563 	mov	r4,a
      0000B3 7D 00            [12]  564 	mov	r5,#0x00
      0000B5 62 06            [12]  565 	xrl	ar6,a
      0000B7 ED               [12]  566 	mov	a,r5
      0000B8 62 07            [12]  567 	xrl	ar7,a
      0000BA EE               [12]  568 	mov	a,r6
      0000BB 4F               [12]  569 	orl	a,r7
      0000BC 60 12            [24]  570 	jz	00146$
      0000BE 78r09            [12]  571 	mov	r0,#_crc
      0000C0 E6               [12]  572 	mov	a,@r0
      0000C1 25 E0            [12]  573 	add	a,acc
      0000C3 FE               [12]  574 	mov	r6,a
      0000C4 08               [12]  575 	inc	r0
      0000C5 E6               [12]  576 	mov	a,@r0
      0000C6 33               [12]  577 	rlc	a
      0000C7 FF               [12]  578 	mov	r7,a
      0000C8 63 06 21         [24]  579 	xrl	ar6,#0x21
      0000CB 63 07 10         [24]  580 	xrl	ar7,#0x10
      0000CE 80 0A            [24]  581 	sjmp	00147$
      0000D0                        582 00146$:
      0000D0 78r09            [12]  583 	mov	r0,#_crc
      0000D2 E6               [12]  584 	mov	a,@r0
      0000D3 25 E0            [12]  585 	add	a,acc
      0000D5 FE               [12]  586 	mov	r6,a
      0000D6 08               [12]  587 	inc	r0
      0000D7 E6               [12]  588 	mov	a,@r0
      0000D8 33               [12]  589 	rlc	a
      0000D9 FF               [12]  590 	mov	r7,a
      0000DA                        591 00147$:
      0000DA 78r09            [12]  592 	mov	r0,#_crc
      0000DC A6 06            [24]  593 	mov	@r0,ar6
      0000DE 08               [12]  594 	inc	r0
      0000DF A6 07            [24]  595 	mov	@r0,ar7
      0000E1 78r0B            [12]  596 	mov	r0,#_bitp
      0000E3 E6               [12]  597 	mov	a,@r0
      0000E4 C3               [12]  598 	clr	c
      0000E5 13               [12]  599 	rrc	a
      0000E6 F6               [12]  600 	mov	@r0,a
      0000E7 78r0B            [12]  601 	mov	r0,#_bitp
      0000E9 E6               [12]  602 	mov	a,@r0
      0000EA 70 9F            [24]  603 	jnz	00134$
                                    604 ;	crc16.c:52: for (off = 0u; off < len; off++)
      0000EC 78r07            [12]  605 	mov	r0,#_off
      0000EE 06               [12]  606 	inc	@r0
      0000EF B6 00 02         [24]  607 	cjne	@r0,#0x00,00215$
      0000F2 08               [12]  608 	inc	r0
      0000F3 06               [12]  609 	inc	@r0
      0000F4                        610 00215$:
                                    611 ;	crc16.c:54: CCRCB_FINISH(crc);
      0000F4 80 84            [24]  612 	sjmp	00137$
      0000F6                        613 00109$:
      0000F6 78r09            [12]  614 	mov	r0,#_crc
      0000F8 86 06            [24]  615 	mov	ar6,@r0
      0000FA 08               [12]  616 	inc	r0
      0000FB 86 07            [24]  617 	mov	ar7,@r0
      0000FD 78r09            [12]  618 	mov	r0,#_crc
      0000FF A6 06            [24]  619 	mov	@r0,ar6
      000101 08               [12]  620 	inc	r0
      000102 A6 07            [24]  621 	mov	@r0,ar7
                                    622 ;	crc16.c:55: printf("CRC16=0x%04x\r\n", crc);
      000104 78r09            [12]  623 	mov	r0,#_crc
      000106 E6               [12]  624 	mov	a,@r0
      000107 C0 E0            [24]  625 	push	acc
      000109 08               [12]  626 	inc	r0
      00010A E6               [12]  627 	mov	a,@r0
      00010B C0 E0            [24]  628 	push	acc
      00010D 74r1E            [12]  629 	mov	a,#___str_2
      00010F C0 E0            [24]  630 	push	acc
      000111 74s00            [12]  631 	mov	a,#(___str_2 >> 8)
      000113 C0 E0            [24]  632 	push	acc
      000115 74 80            [12]  633 	mov	a,#0x80
      000117 C0 E0            [24]  634 	push	acc
      000119 12r00r00         [24]  635 	lcall	_printf
      00011C E5 81            [12]  636 	mov	a,sp
      00011E 24 FB            [12]  637 	add	a,#0xfb
      000120 F5 81            [12]  638 	mov	sp,a
                                    639 ;	crc16.c:57: len = PLEN;
      000122 78r05            [12]  640 	mov	r0,#_len
      000124 76 00            [12]  641 	mov	@r0,#0x00
      000126 08               [12]  642 	inc	r0
      000127 76 20            [12]  643 	mov	@r0,#0x20
                                    644 ;	crc16.c:58: while (1) {
      000129                        645 00129$:
                                    646 ;	crc16.c:59: printf("PARTIAL base=%p ", base);
      000129 78r01            [12]  647 	mov	r0,#_base
      00012B 86 05            [24]  648 	mov	ar5,@r0
      00012D 08               [12]  649 	inc	r0
      00012E 86 06            [24]  650 	mov	ar6,@r0
      000130 7F 00            [12]  651 	mov	r7,#0x00
      000132 C0 05            [24]  652 	push	ar5
      000134 C0 06            [24]  653 	push	ar6
      000136 C0 07            [24]  654 	push	ar7
      000138 74r2D            [12]  655 	mov	a,#___str_3
      00013A C0 E0            [24]  656 	push	acc
      00013C 74s00            [12]  657 	mov	a,#(___str_3 >> 8)
      00013E C0 E0            [24]  658 	push	acc
      000140 74 80            [12]  659 	mov	a,#0x80
      000142 C0 E0            [24]  660 	push	acc
      000144 12r00r00         [24]  661 	lcall	_printf
      000147 E5 81            [12]  662 	mov	a,sp
      000149 24 FA            [12]  663 	add	a,#0xfa
      00014B F5 81            [12]  664 	mov	sp,a
                                    665 ;	crc16.c:60: printf("len=0x%04x ", len);
      00014D 78r05            [12]  666 	mov	r0,#_len
      00014F E6               [12]  667 	mov	a,@r0
      000150 C0 E0            [24]  668 	push	acc
      000152 08               [12]  669 	inc	r0
      000153 E6               [12]  670 	mov	a,@r0
      000154 C0 E0            [24]  671 	push	acc
      000156 74r12            [12]  672 	mov	a,#___str_1
      000158 C0 E0            [24]  673 	push	acc
      00015A 74s00            [12]  674 	mov	a,#(___str_1 >> 8)
      00015C C0 E0            [24]  675 	push	acc
      00015E 74 80            [12]  676 	mov	a,#0x80
      000160 C0 E0            [24]  677 	push	acc
      000162 12r00r00         [24]  678 	lcall	_printf
      000165 E5 81            [12]  679 	mov	a,sp
      000167 24 FB            [12]  680 	add	a,#0xfb
      000169 F5 81            [12]  681 	mov	sp,a
                                    682 ;	crc16.c:61: CCRCB_INIT(crc);
      00016B 78r09            [12]  683 	mov	r0,#_crc
      00016D 76 FF            [12]  684 	mov	@r0,#0xff
      00016F 08               [12]  685 	inc	r0
      000170 76 FF            [12]  686 	mov	@r0,#0xff
                                    687 ;	crc16.c:62: for (off = 0u; off < len; off++)
      000172 78r07            [12]  688 	mov	r0,#_off
      000174 E4               [12]  689 	clr	a
      000175 F6               [12]  690 	mov	@r0,a
      000176 08               [12]  691 	inc	r0
      000177 F6               [12]  692 	mov	@r0,a
      000178                        693 00142$:
      000178 78r07            [12]  694 	mov	r0,#_off
      00017A 79r05            [12]  695 	mov	r1,#_len
      00017C C3               [12]  696 	clr	c
      00017D E6               [12]  697 	mov	a,@r0
      00017E 97               [12]  698 	subb	a,@r1
      00017F 08               [12]  699 	inc	r0
      000180 E6               [12]  700 	mov	a,@r0
      000181 09               [12]  701 	inc	r1
      000182 97               [12]  702 	subb	a,@r1
      000183 50 6F            [24]  703 	jnc	00120$
                                    704 ;	crc16.c:63: CCRCB(crc, base[off], bitp);
      000185 78r0B            [12]  705 	mov	r0,#_bitp
      000187 76 80            [12]  706 	mov	@r0,#0x80
      000189                        707 00139$:
      000189 78r0A            [12]  708 	mov	r0,#(_crc + 1)
      00018B E6               [12]  709 	mov	a,@r0
      00018C 23               [12]  710 	rl	a
      00018D 54 01            [12]  711 	anl	a,#0x01
      00018F FE               [12]  712 	mov	r6,a
      000190 7F 00            [12]  713 	mov	r7,#0x00
      000192 78r01            [12]  714 	mov	r0,#_base
      000194 79r07            [12]  715 	mov	r1,#_off
      000196 E7               [12]  716 	mov	a,@r1
      000197 26               [12]  717 	add	a,@r0
      000198 F5 82            [12]  718 	mov	dpl,a
      00019A 09               [12]  719 	inc	r1
      00019B E7               [12]  720 	mov	a,@r1
      00019C 08               [12]  721 	inc	r0
      00019D 36               [12]  722 	addc	a,@r0
      00019E F5 83            [12]  723 	mov	dph,a
      0001A0 E0               [24]  724 	movx	a,@dptr
      0001A1 FD               [12]  725 	mov	r5,a
      0001A2 78r0B            [12]  726 	mov	r0,#_bitp
      0001A4 E6               [12]  727 	mov	a,@r0
      0001A5 52 05            [12]  728 	anl	ar5,a
      0001A7 ED               [12]  729 	mov	a,r5
      0001A8 B4 01 00         [24]  730 	cjne	a,#0x01,00217$
      0001AB                        731 00217$:
      0001AB B3               [12]  732 	cpl	c
      0001AC 92*00            [24]  733 	mov	b0,c
      0001AE E4               [12]  734 	clr	a
      0001AF 33               [12]  735 	rlc	a
      0001B0 FC               [12]  736 	mov	r4,a
      0001B1 7D 00            [12]  737 	mov	r5,#0x00
      0001B3 62 06            [12]  738 	xrl	ar6,a
      0001B5 ED               [12]  739 	mov	a,r5
      0001B6 62 07            [12]  740 	xrl	ar7,a
      0001B8 EE               [12]  741 	mov	a,r6
      0001B9 4F               [12]  742 	orl	a,r7
      0001BA 60 12            [24]  743 	jz	00148$
      0001BC 78r09            [12]  744 	mov	r0,#_crc
      0001BE E6               [12]  745 	mov	a,@r0
      0001BF 25 E0            [12]  746 	add	a,acc
      0001C1 FE               [12]  747 	mov	r6,a
      0001C2 08               [12]  748 	inc	r0
      0001C3 E6               [12]  749 	mov	a,@r0
      0001C4 33               [12]  750 	rlc	a
      0001C5 FF               [12]  751 	mov	r7,a
      0001C6 63 06 21         [24]  752 	xrl	ar6,#0x21
      0001C9 63 07 10         [24]  753 	xrl	ar7,#0x10
      0001CC 80 0A            [24]  754 	sjmp	00149$
      0001CE                        755 00148$:
      0001CE 78r09            [12]  756 	mov	r0,#_crc
      0001D0 E6               [12]  757 	mov	a,@r0
      0001D1 25 E0            [12]  758 	add	a,acc
      0001D3 FE               [12]  759 	mov	r6,a
      0001D4 08               [12]  760 	inc	r0
      0001D5 E6               [12]  761 	mov	a,@r0
      0001D6 33               [12]  762 	rlc	a
      0001D7 FF               [12]  763 	mov	r7,a
      0001D8                        764 00149$:
      0001D8 78r09            [12]  765 	mov	r0,#_crc
      0001DA A6 06            [24]  766 	mov	@r0,ar6
      0001DC 08               [12]  767 	inc	r0
      0001DD A6 07            [24]  768 	mov	@r0,ar7
      0001DF 78r0B            [12]  769 	mov	r0,#_bitp
      0001E1 E6               [12]  770 	mov	a,@r0
      0001E2 C3               [12]  771 	clr	c
      0001E3 13               [12]  772 	rrc	a
      0001E4 F6               [12]  773 	mov	@r0,a
      0001E5 78r0B            [12]  774 	mov	r0,#_bitp
      0001E7 E6               [12]  775 	mov	a,@r0
      0001E8 70 9F            [24]  776 	jnz	00139$
                                    777 ;	crc16.c:62: for (off = 0u; off < len; off++)
      0001EA 78r07            [12]  778 	mov	r0,#_off
      0001EC 06               [12]  779 	inc	@r0
      0001ED B6 00 02         [24]  780 	cjne	@r0,#0x00,00220$
      0001F0 08               [12]  781 	inc	r0
      0001F1 06               [12]  782 	inc	@r0
      0001F2                        783 00220$:
                                    784 ;	crc16.c:64: CCRCB_FINISH(crc);
      0001F2 80 84            [24]  785 	sjmp	00142$
      0001F4                        786 00120$:
      0001F4 78r09            [12]  787 	mov	r0,#_crc
      0001F6 86 06            [24]  788 	mov	ar6,@r0
      0001F8 08               [12]  789 	inc	r0
      0001F9 86 07            [24]  790 	mov	ar7,@r0
      0001FB 78r09            [12]  791 	mov	r0,#_crc
      0001FD A6 06            [24]  792 	mov	@r0,ar6
      0001FF 08               [12]  793 	inc	r0
      000200 A6 07            [24]  794 	mov	@r0,ar7
                                    795 ;	crc16.c:65: printf("CRC16=0x%04x\r\n", crc);
      000202 78r09            [12]  796 	mov	r0,#_crc
      000204 E6               [12]  797 	mov	a,@r0
      000205 C0 E0            [24]  798 	push	acc
      000207 08               [12]  799 	inc	r0
      000208 E6               [12]  800 	mov	a,@r0
      000209 C0 E0            [24]  801 	push	acc
      00020B 74r1E            [12]  802 	mov	a,#___str_2
      00020D C0 E0            [24]  803 	push	acc
      00020F 74s00            [12]  804 	mov	a,#(___str_2 >> 8)
      000211 C0 E0            [24]  805 	push	acc
      000213 74 80            [12]  806 	mov	a,#0x80
      000215 C0 E0            [24]  807 	push	acc
      000217 12r00r00         [24]  808 	lcall	_printf
      00021A E5 81            [12]  809 	mov	a,sp
      00021C 24 FB            [12]  810 	add	a,#0xfb
      00021E F5 81            [12]  811 	mov	sp,a
                                    812 ;	crc16.c:67: if (intr) {
      000220 78r00            [12]  813 	mov	r0,#_intr
      000222 E6               [12]  814 	mov	a,@r0
      000223 60 1A            [24]  815 	jz	00124$
                                    816 ;	crc16.c:68: EA = 0;
                                    817 ;	assignBit
      000225 C2 AF            [12]  818 	clr	_EA
                                    819 ;	crc16.c:69: printf("interrupted\n");
      000227 74r3E            [12]  820 	mov	a,#___str_4
      000229 C0 E0            [24]  821 	push	acc
      00022B 74s00            [12]  822 	mov	a,#(___str_4 >> 8)
      00022D C0 E0            [24]  823 	push	acc
      00022F 74 80            [12]  824 	mov	a,#0x80
      000231 C0 E0            [24]  825 	push	acc
      000233 12r00r00         [24]  826 	lcall	_printf
      000236 15 81            [12]  827 	dec	sp
      000238 15 81            [12]  828 	dec	sp
      00023A 15 81            [12]  829 	dec	sp
                                    830 ;	crc16.c:70: break;
      00023C 02r00r16         [24]  831 	ljmp	00131$
      00023F                        832 00124$:
                                    833 ;	crc16.c:73: t = base + (len >> 1);
      00023F 78r05            [12]  834 	mov	r0,#_len
      000241 86 06            [24]  835 	mov	ar6,@r0
      000243 08               [12]  836 	inc	r0
      000244 E6               [12]  837 	mov	a,@r0
      000245 C3               [12]  838 	clr	c
      000246 13               [12]  839 	rrc	a
      000247 CE               [12]  840 	xch	a,r6
      000248 13               [12]  841 	rrc	a
      000249 CE               [12]  842 	xch	a,r6
      00024A FF               [12]  843 	mov	r7,a
      00024B 78r01            [12]  844 	mov	r0,#_base
      00024D EE               [12]  845 	mov	a,r6
      00024E 26               [12]  846 	add	a,@r0
      00024F FE               [12]  847 	mov	r6,a
      000250 EF               [12]  848 	mov	a,r7
      000251 08               [12]  849 	inc	r0
      000252 36               [12]  850 	addc	a,@r0
      000253 FF               [12]  851 	mov	r7,a
      000254 78r03            [12]  852 	mov	r0,#_t
      000256 A6 06            [24]  853 	mov	@r0,ar6
      000258 08               [12]  854 	inc	r0
      000259 A6 07            [24]  855 	mov	@r0,ar7
                                    856 ;	crc16.c:74: if (t < base) break;
      00025B 78r03            [12]  857 	mov	r0,#_t
      00025D 79r01            [12]  858 	mov	r1,#_base
      00025F C3               [12]  859 	clr	c
      000260 E6               [12]  860 	mov	a,@r0
      000261 97               [12]  861 	subb	a,@r1
      000262 08               [12]  862 	inc	r0
      000263 E6               [12]  863 	mov	a,@r0
      000264 09               [12]  864 	inc	r1
      000265 97               [12]  865 	subb	a,@r1
      000266 50 03            [24]  866 	jnc	00222$
      000268 02r00r16         [24]  867 	ljmp	00131$
      00026B                        868 00222$:
                                    869 ;	crc16.c:75: else base = t;
      00026B 78r03            [12]  870 	mov	r0,#_t
      00026D 79r01            [12]  871 	mov	r1,#_base
      00026F E6               [12]  872 	mov	a,@r0
      000270 F7               [12]  873 	mov	@r1,a
      000271 08               [12]  874 	inc	r0
      000272 09               [12]  875 	inc	r1
      000273 E6               [12]  876 	mov	a,@r0
      000274 F7               [12]  877 	mov	@r1,a
      000275 02r01r29         [24]  878 	ljmp	00129$
      000278                        879 00133$:
                                    880 ;	crc16.c:79: PCON |= 2;
      000278 43 87 02         [24]  881 	orl	_PCON,#0x02
                                    882 ;	crc16.c:81: return;
                                    883 ;	crc16.c:82: }
      00027B 22               [24]  884 	ret
                                    885 	.area CSEG    (CODE)
                                    886 	.area CONST   (CODE)
                                    887 	.area CONST   (CODE)
      000000                        888 ___str_0:
      000000 43 4F 4D 50 4C 45 54   889 	.ascii "COMPLETE base=%p "
             45 20 62 61 73 65 3D
             25 70 20
      000011 00                     890 	.db 0x00
                                    891 	.area CSEG    (CODE)
                                    892 	.area CONST   (CODE)
      000012                        893 ___str_1:
      000012 6C 65 6E 3D 30 78 25   894 	.ascii "len=0x%04x "
             30 34 78 20
      00001D 00                     895 	.db 0x00
                                    896 	.area CSEG    (CODE)
                                    897 	.area CONST   (CODE)
      00001E                        898 ___str_2:
      00001E 43 52 43 31 36 3D 30   899 	.ascii "CRC16=0x%04x"
             78 25 30 34 78
      00002A 0D                     900 	.db 0x0d
      00002B 0A                     901 	.db 0x0a
      00002C 00                     902 	.db 0x00
                                    903 	.area CSEG    (CODE)
                                    904 	.area CONST   (CODE)
      00002D                        905 ___str_3:
      00002D 50 41 52 54 49 41 4C   906 	.ascii "PARTIAL base=%p "
             20 62 61 73 65 3D 25
             70 20
      00003D 00                     907 	.db 0x00
                                    908 	.area CSEG    (CODE)
                                    909 	.area CONST   (CODE)
      00003E                        910 ___str_4:
      00003E 69 6E 74 65 72 72 75   911 	.ascii "interrupted"
             70 74 65 64
      000049 0A                     912 	.db 0x0a
      00004A 00                     913 	.db 0x00
                                    914 	.area CSEG    (CODE)
                                    915 	.area XINIT   (CODE)
                                    916 	.area CABS    (ABS,CODE)
