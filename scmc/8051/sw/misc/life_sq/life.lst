                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module life
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _show
                                     13 	.globl _int1
                                     14 	.globl _int0
                                     15 	.globl _print16x
                                     16 	.globl _printstr
                                     17 	.globl _getchar
                                     18 	.globl _putchar
                                     19 	.globl _toupper
                                     20 	.globl ___memcpy
                                     21 	.globl _memset
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _FL
                                     29 	.globl _P
                                     30 	.globl _TF2
                                     31 	.globl _EXF2
                                     32 	.globl _RCLK
                                     33 	.globl _TCLK
                                     34 	.globl _EXEN2
                                     35 	.globl _TR2
                                     36 	.globl _C_T2
                                     37 	.globl _CP_RL2
                                     38 	.globl _T2CON_7
                                     39 	.globl _T2CON_6
                                     40 	.globl _T2CON_5
                                     41 	.globl _T2CON_4
                                     42 	.globl _T2CON_3
                                     43 	.globl _T2CON_2
                                     44 	.globl _T2CON_1
                                     45 	.globl _T2CON_0
                                     46 	.globl _PT2
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ET2
                                     70 	.globl _ES
                                     71 	.globl _ET1
                                     72 	.globl _EX1
                                     73 	.globl _ET0
                                     74 	.globl _EX0
                                     75 	.globl _P2_7
                                     76 	.globl _P2_6
                                     77 	.globl _P2_5
                                     78 	.globl _P2_4
                                     79 	.globl _P2_3
                                     80 	.globl _P2_2
                                     81 	.globl _P2_1
                                     82 	.globl _P2_0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _T2EX
                                     92 	.globl _T2
                                     93 	.globl _P1_7
                                     94 	.globl _P1_6
                                     95 	.globl _P1_5
                                     96 	.globl _P1_4
                                     97 	.globl _P1_3
                                     98 	.globl _P1_2
                                     99 	.globl _P1_1
                                    100 	.globl _P1_0
                                    101 	.globl _TF1
                                    102 	.globl _TR1
                                    103 	.globl _TF0
                                    104 	.globl _TR0
                                    105 	.globl _IE1
                                    106 	.globl _IT1
                                    107 	.globl _IE0
                                    108 	.globl _IT0
                                    109 	.globl _P0_7
                                    110 	.globl _P0_6
                                    111 	.globl _P0_5
                                    112 	.globl _P0_4
                                    113 	.globl _P0_3
                                    114 	.globl _P0_2
                                    115 	.globl _P0_1
                                    116 	.globl _P0_0
                                    117 	.globl _B
                                    118 	.globl _A
                                    119 	.globl _ACC
                                    120 	.globl _PSW
                                    121 	.globl _TH2
                                    122 	.globl _TL2
                                    123 	.globl _RCAP2H
                                    124 	.globl _RCAP2L
                                    125 	.globl _T2MOD
                                    126 	.globl _T2CON
                                    127 	.globl _IP
                                    128 	.globl _P3
                                    129 	.globl _IE
                                    130 	.globl _P2
                                    131 	.globl _SBUF
                                    132 	.globl _SCON
                                    133 	.globl _P1
                                    134 	.globl _TH1
                                    135 	.globl _TH0
                                    136 	.globl _TL1
                                    137 	.globl _TL0
                                    138 	.globl _TMOD
                                    139 	.globl _TCON
                                    140 	.globl _PCON
                                    141 	.globl _DPH
                                    142 	.globl _DPL
                                    143 	.globl _SP
                                    144 	.globl _P0
                                    145 ;--------------------------------------------------------
                                    146 ; special function registers
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0	=	0x0080
                           000081   151 _SP	=	0x0081
                           000082   152 _DPL	=	0x0082
                           000083   153 _DPH	=	0x0083
                           000087   154 _PCON	=	0x0087
                           000088   155 _TCON	=	0x0088
                           000089   156 _TMOD	=	0x0089
                           00008A   157 _TL0	=	0x008a
                           00008B   158 _TL1	=	0x008b
                           00008C   159 _TH0	=	0x008c
                           00008D   160 _TH1	=	0x008d
                           000090   161 _P1	=	0x0090
                           000098   162 _SCON	=	0x0098
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 _P2	=	0x00a0
                           0000A8   165 _IE	=	0x00a8
                           0000B0   166 _P3	=	0x00b0
                           0000B8   167 _IP	=	0x00b8
                           0000C8   168 _T2CON	=	0x00c8
                           0000C9   169 _T2MOD	=	0x00c9
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                           0000D0   174 _PSW	=	0x00d0
                           0000E0   175 _ACC	=	0x00e0
                           0000E0   176 _A	=	0x00e0
                           0000F0   177 _B	=	0x00f0
                                    178 ;--------------------------------------------------------
                                    179 ; special function bits
                                    180 ;--------------------------------------------------------
                                    181 	.area RSEG    (ABS,DATA)
      000000                        182 	.org 0x0000
                           000080   183 _P0_0	=	0x0080
                           000081   184 _P0_1	=	0x0081
                           000082   185 _P0_2	=	0x0082
                           000083   186 _P0_3	=	0x0083
                           000084   187 _P0_4	=	0x0084
                           000085   188 _P0_5	=	0x0085
                           000086   189 _P0_6	=	0x0086
                           000087   190 _P0_7	=	0x0087
                           000088   191 _IT0	=	0x0088
                           000089   192 _IE0	=	0x0089
                           00008A   193 _IT1	=	0x008a
                           00008B   194 _IE1	=	0x008b
                           00008C   195 _TR0	=	0x008c
                           00008D   196 _TF0	=	0x008d
                           00008E   197 _TR1	=	0x008e
                           00008F   198 _TF1	=	0x008f
                           000090   199 _P1_0	=	0x0090
                           000091   200 _P1_1	=	0x0091
                           000092   201 _P1_2	=	0x0092
                           000093   202 _P1_3	=	0x0093
                           000094   203 _P1_4	=	0x0094
                           000095   204 _P1_5	=	0x0095
                           000096   205 _P1_6	=	0x0096
                           000097   206 _P1_7	=	0x0097
                           000090   207 _T2	=	0x0090
                           000091   208 _T2EX	=	0x0091
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AD   230 _ET2	=	0x00ad
                           0000AF   231 _EA	=	0x00af
                           0000B0   232 _P3_0	=	0x00b0
                           0000B1   233 _P3_1	=	0x00b1
                           0000B2   234 _P3_2	=	0x00b2
                           0000B3   235 _P3_3	=	0x00b3
                           0000B4   236 _P3_4	=	0x00b4
                           0000B5   237 _P3_5	=	0x00b5
                           0000B6   238 _P3_6	=	0x00b6
                           0000B7   239 _P3_7	=	0x00b7
                           0000B0   240 _RXD	=	0x00b0
                           0000B1   241 _TXD	=	0x00b1
                           0000B2   242 _INT0	=	0x00b2
                           0000B3   243 _INT1	=	0x00b3
                           0000B4   244 _T0	=	0x00b4
                           0000B5   245 _T1	=	0x00b5
                           0000B6   246 _WR	=	0x00b6
                           0000B7   247 _RD	=	0x00b7
                           0000B8   248 _PX0	=	0x00b8
                           0000B9   249 _PT0	=	0x00b9
                           0000BA   250 _PX1	=	0x00ba
                           0000BB   251 _PT1	=	0x00bb
                           0000BC   252 _PS	=	0x00bc
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                           0000D0   270 _P	=	0x00d0
                           0000D1   271 _FL	=	0x00d1
                           0000D2   272 _OV	=	0x00d2
                           0000D3   273 _RS0	=	0x00d3
                           0000D4   274 _RS1	=	0x00d4
                           0000D5   275 _F0	=	0x00d5
                           0000D6   276 _AC	=	0x00d6
                           0000D7   277 _CY	=	0x00d7
                                    278 ;--------------------------------------------------------
                                    279 ; overlayable register banks
                                    280 ;--------------------------------------------------------
                                    281 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        282 	.ds 8
                                    283 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable bit register bank
                                    287 ;--------------------------------------------------------
                                    288 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        289 bits:
      000000                        290 	.ds 1
                           008000   291 	b0 = bits[0]
                           008100   292 	b1 = bits[1]
                           008200   293 	b2 = bits[2]
                           008300   294 	b3 = bits[3]
                           008400   295 	b4 = bits[4]
                           008500   296 	b5 = bits[5]
                           008600   297 	b6 = bits[6]
                           008700   298 	b7 = bits[7]
                                    299 ;--------------------------------------------------------
                                    300 ; internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area DSEG    (DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable items in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 ;--------------------------------------------------------
                                    307 ; Stack segment in internal ram 
                                    308 ;--------------------------------------------------------
                                    309 	.area	SSEG
      000000                        310 __start__stack:
      000000                        311 	.ds	1
                                    312 
                                    313 ;--------------------------------------------------------
                                    314 ; indirectly addressable internal ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area ISEG    (DATA)
      000000                        317 _i0:
      000000                        318 	.ds 1
      000001                        319 _i1:
      000001                        320 	.ds 1
      000002                        321 _x:
      000002                        322 	.ds 2
      000004                        323 _y:
      000004                        324 	.ds 2
      000006                        325 _j:
      000006                        326 	.ds 2
      000008                        327 _c:
      000008                        328 	.ds 2
      00000A                        329 _bstep:
      00000A                        330 	.ds 1
      00000B                        331 _n:
      00000B                        332 	.ds 1
      00000C                        333 _fixed:
      00000C                        334 	.ds 1
      00000D                        335 _cycle2:
      00000D                        336 	.ds 1
      00000E                        337 _dx:
      00000E                        338 	.ds 2
      000010                        339 _dy:
      000010                        340 	.ds 2
      000012                        341 _generation:
      000012                        342 	.ds 4
      000016                        343 _busy:
      000016                        344 	.ds 4
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
                                    354 ;--------------------------------------------------------
                                    355 ; paged external ram data
                                    356 ;--------------------------------------------------------
                                    357 	.area PSEG    (PAG,XDATA)
                                    358 ;--------------------------------------------------------
                                    359 ; external ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area XSEG    (XDATA)
      000000                        362 _pu:
      000000                        363 	.ds 2048
      000800                        364 _u:
      000800                        365 	.ds 2048
      001000                        366 _nu:
      001000                        367 	.ds 2048
                                    368 ;--------------------------------------------------------
                                    369 ; absolute external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XABS    (ABS,XDATA)
                                    372 ;--------------------------------------------------------
                                    373 ; external initialized ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area XISEG   (XDATA)
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT0 (CODE)
                                    378 	.area GSINIT1 (CODE)
                                    379 	.area GSINIT2 (CODE)
                                    380 	.area GSINIT3 (CODE)
                                    381 	.area GSINIT4 (CODE)
                                    382 	.area GSINIT5 (CODE)
                                    383 	.area GSINIT  (CODE)
                                    384 	.area GSFINAL (CODE)
                                    385 	.area CSEG    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; interrupt vector 
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
      000000                        390 __interrupt_vect:
      000000 02r00r00         [24]  391 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  392 	ljmp	_int0
      000006                        393 	.ds	5
      00000B 32               [24]  394 	reti
      00000C                        395 	.ds	7
      000013 02r00r0C         [24]  396 	ljmp	_int1
                                    397 ;--------------------------------------------------------
                                    398 ; global & static initialisations
                                    399 ;--------------------------------------------------------
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT  (CODE)
                                    402 	.area GSFINAL (CODE)
                                    403 	.area GSINIT  (CODE)
                                    404 	.globl __sdcc_gsinit_startup
                                    405 	.globl __sdcc_program_startup
                                    406 	.globl __start__stack
                                    407 	.globl __mcs51_genXINIT
                                    408 	.globl __mcs51_genXRAMCLEAR
                                    409 	.globl __mcs51_genRAMCLEAR
                                    410 ;	life.c:117: __idata static const char busy[4] = { '\\', '|', '/', '-' };
      000000 78r16            [12]  411 	mov	r0,#_busy
      000002 76 5C            [12]  412 	mov	@r0,#0x5c
      000004 78r17            [12]  413 	mov	r0,#(_busy + 0x0001)
      000006 76 7C            [12]  414 	mov	@r0,#0x7c
      000008 78r18            [12]  415 	mov	r0,#(_busy + 0x0002)
      00000A 76 2F            [12]  416 	mov	@r0,#0x2f
      00000C 78r19            [12]  417 	mov	r0,#(_busy + 0x0003)
      00000E 76 2D            [12]  418 	mov	@r0,#0x2d
                                    419 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  420 	ljmp	__sdcc_program_startup
                                    421 ;--------------------------------------------------------
                                    422 ; Home
                                    423 ;--------------------------------------------------------
                                    424 	.area HOME    (CODE)
                                    425 	.area HOME    (CODE)
      000016                        426 __sdcc_program_startup:
      000016 02r01r01         [24]  427 	ljmp	_main
                                    428 ;	return from main will return to caller
                                    429 ;--------------------------------------------------------
                                    430 ; code
                                    431 ;--------------------------------------------------------
                                    432 	.area CSEG    (CODE)
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'int0'
                                    435 ;------------------------------------------------------------
                                    436 ;	life.c:9: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    437 ;	-----------------------------------------
                                    438 ;	 function int0
                                    439 ;	-----------------------------------------
      000000                        440 _int0:
                           00000F   441 	ar7 = 0x0f
                           00000E   442 	ar6 = 0x0e
                           00000D   443 	ar5 = 0x0d
                           00000C   444 	ar4 = 0x0c
                           00000B   445 	ar3 = 0x0b
                           00000A   446 	ar2 = 0x0a
                           000009   447 	ar1 = 0x09
                           000008   448 	ar0 = 0x08
      000000 C0 D0            [24]  449 	push	psw
      000002 75 D0 08         [24]  450 	mov	psw,#0x08
                                    451 ;	life.c:10: i0 = 1;
      000005 78r00            [12]  452 	mov	r0,#_i0
      000007 76 01            [12]  453 	mov	@r0,#0x01
                                    454 ;	life.c:11: }
      000009 D0 D0            [24]  455 	pop	psw
      00000B 32               [24]  456 	reti
                                    457 ;	eliminated unneeded push/pop dpl
                                    458 ;	eliminated unneeded push/pop dph
                                    459 ;	eliminated unneeded push/pop b
                                    460 ;	eliminated unneeded push/pop acc
                                    461 ;------------------------------------------------------------
                                    462 ;Allocation info for local variables in function 'int1'
                                    463 ;------------------------------------------------------------
                                    464 ;	life.c:13: void int1(void) __interrupt IE1_VECTOR __using 1 {
                                    465 ;	-----------------------------------------
                                    466 ;	 function int1
                                    467 ;	-----------------------------------------
      00000C                        468 _int1:
      00000C C0 D0            [24]  469 	push	psw
      00000E 75 D0 08         [24]  470 	mov	psw,#0x08
                                    471 ;	life.c:14: i1 = 1;
      000011 78r01            [12]  472 	mov	r0,#_i1
      000013 76 01            [12]  473 	mov	@r0,#0x01
                                    474 ;	life.c:15: }
      000015 D0 D0            [24]  475 	pop	psw
      000017 32               [24]  476 	reti
                                    477 ;	eliminated unneeded push/pop dpl
                                    478 ;	eliminated unneeded push/pop dph
                                    479 ;	eliminated unneeded push/pop b
                                    480 ;	eliminated unneeded push/pop acc
                                    481 ;------------------------------------------------------------
                                    482 ;Allocation info for local variables in function 'show'
                                    483 ;------------------------------------------------------------
                                    484 ;hdr                       Allocated to registers r7 
                                    485 ;------------------------------------------------------------
                                    486 ;	life.c:51: void show(char hdr) {
                                    487 ;	-----------------------------------------
                                    488 ;	 function show
                                    489 ;	-----------------------------------------
      000018                        490 _show:
                           000007   491 	ar7 = 0x07
                           000006   492 	ar6 = 0x06
                           000005   493 	ar5 = 0x05
                           000004   494 	ar4 = 0x04
                           000003   495 	ar3 = 0x03
                           000002   496 	ar2 = 0x02
                           000001   497 	ar1 = 0x01
                           000000   498 	ar0 = 0x00
                                    499 ;	life.c:52: if (hdr) {
      000018 E5 82            [12]  500 	mov	a,dpl
      00001A FF               [12]  501 	mov	r7,a
      00001B 60 58            [24]  502 	jz	00102$
                                    503 ;	life.c:53: printstr("\033[2J\033[mGEN ");
      00001D 90r00r00         [24]  504 	mov	dptr,#___str_0
      000020 75 F0 80         [24]  505 	mov	b,#0x80
      000023 12r00r00         [24]  506 	lcall	_printstr
                                    507 ;	life.c:45: print16x(generation[1]);
      000026 78r14            [12]  508 	mov	r0,#(_generation + 0x0002)
      000028 86 06            [24]  509 	mov	ar6,@r0
      00002A 08               [12]  510 	inc	r0
      00002B 86 07            [24]  511 	mov	ar7,@r0
      00002D 8E 82            [24]  512 	mov	dpl,r6
      00002F 8F 83            [24]  513 	mov	dph,r7
      000031 12r00r00         [24]  514 	lcall	_print16x
                                    515 ;	life.c:46: print16x(generation[0]);
      000034 78r12            [12]  516 	mov	r0,#_generation
      000036 86 06            [24]  517 	mov	ar6,@r0
      000038 08               [12]  518 	inc	r0
      000039 86 07            [24]  519 	mov	ar7,@r0
      00003B 8E 82            [24]  520 	mov	dpl,r6
      00003D 8F 83            [24]  521 	mov	dph,r7
      00003F 12r00r00         [24]  522 	lcall	_print16x
                                    523 ;	life.c:55: printstr("\r\n");
      000042 90r00r0C         [24]  524 	mov	dptr,#___str_1
      000045 75 F0 80         [24]  525 	mov	b,#0x80
      000048 12r00r00         [24]  526 	lcall	_printstr
                                    527 ;	life.c:38: generation[0]++;
      00004B 78r12            [12]  528 	mov	r0,#_generation
      00004D 86 06            [24]  529 	mov	ar6,@r0
      00004F 08               [12]  530 	inc	r0
      000050 86 07            [24]  531 	mov	ar7,@r0
      000052 0E               [12]  532 	inc	r6
      000053 BE 00 01         [24]  533 	cjne	r6,#0x00,00147$
      000056 0F               [12]  534 	inc	r7
      000057                        535 00147$:
      000057 78r12            [12]  536 	mov	r0,#_generation
      000059 A6 06            [24]  537 	mov	@r0,ar6
      00005B 08               [12]  538 	inc	r0
      00005C A6 07            [24]  539 	mov	@r0,ar7
                                    540 ;	life.c:39: if (!generation[0]) generation[1]++;
      00005E EE               [12]  541 	mov	a,r6
      00005F 4F               [12]  542 	orl	a,r7
      000060 70 13            [24]  543 	jnz	00102$
      000062 78r14            [12]  544 	mov	r0,#(_generation + 0x0002)
      000064 86 06            [24]  545 	mov	ar6,@r0
      000066 08               [12]  546 	inc	r0
      000067 86 07            [24]  547 	mov	ar7,@r0
      000069 0E               [12]  548 	inc	r6
      00006A BE 00 01         [24]  549 	cjne	r6,#0x00,00149$
      00006D 0F               [12]  550 	inc	r7
      00006E                        551 00149$:
      00006E 78r14            [12]  552 	mov	r0,#(_generation + 0x0002)
      000070 A6 06            [24]  553 	mov	@r0,ar6
      000072 08               [12]  554 	inc	r0
      000073 A6 07            [24]  555 	mov	@r0,ar7
                                    556 ;	life.c:56: updategen();
      000075                        557 00102$:
                                    558 ;	life.c:59: for (x = 0; x < W; x++) {
      000075 78r02            [12]  559 	mov	r0,#_x
      000077 E4               [12]  560 	clr	a
      000078 F6               [12]  561 	mov	@r0,a
      000079 08               [12]  562 	inc	r0
      00007A F6               [12]  563 	mov	@r0,a
      00007B                        564 00114$:
                                    565 ;	life.c:60: for (y = 0; y < H; y++)
      00007B 78r04            [12]  566 	mov	r0,#_y
      00007D E4               [12]  567 	clr	a
      00007E F6               [12]  568 	mov	@r0,a
      00007F 08               [12]  569 	inc	r0
      000080 F6               [12]  570 	mov	@r0,a
      000081                        571 00112$:
                                    572 ;	life.c:61: if (u[A2D(W, y, x)]) {
      000081 78r04            [12]  573 	mov	r0,#_y
      000083 86 06            [24]  574 	mov	ar6,@r0
      000085 08               [12]  575 	inc	r0
      000086 E6               [12]  576 	mov	a,@r0
      000087 C4               [12]  577 	swap	a
      000088 23               [12]  578 	rl	a
      000089 54 E0            [12]  579 	anl	a,#0xe0
      00008B CE               [12]  580 	xch	a,r6
      00008C C4               [12]  581 	swap	a
      00008D 23               [12]  582 	rl	a
      00008E CE               [12]  583 	xch	a,r6
      00008F 6E               [12]  584 	xrl	a,r6
      000090 CE               [12]  585 	xch	a,r6
      000091 54 E0            [12]  586 	anl	a,#0xe0
      000093 CE               [12]  587 	xch	a,r6
      000094 6E               [12]  588 	xrl	a,r6
      000095 FF               [12]  589 	mov	r7,a
      000096 78r02            [12]  590 	mov	r0,#_x
      000098 E6               [12]  591 	mov	a,@r0
      000099 2E               [12]  592 	add	a,r6
      00009A FE               [12]  593 	mov	r6,a
      00009B 08               [12]  594 	inc	r0
      00009C E6               [12]  595 	mov	a,@r0
      00009D 3F               [12]  596 	addc	a,r7
      00009E FF               [12]  597 	mov	r7,a
      00009F EE               [12]  598 	mov	a,r6
      0000A0 24r00            [12]  599 	add	a,#_u
      0000A2 FE               [12]  600 	mov	r6,a
      0000A3 EF               [12]  601 	mov	a,r7
      0000A4 34s08            [12]  602 	addc	a,#(_u >> 8)
      0000A6 FF               [12]  603 	mov	r7,a
      0000A7 8E 82            [24]  604 	mov	dpl,r6
      0000A9 8F 83            [24]  605 	mov	dph,r7
      0000AB E0               [24]  606 	movx	a,@dptr
      0000AC 60 0E            [24]  607 	jz	00104$
                                    608 ;	life.c:62: putchar('['); putchar(']');
      0000AE 90 00 5B         [24]  609 	mov	dptr,#0x005b
      0000B1 12r00r00         [24]  610 	lcall	_putchar
      0000B4 90 00 5D         [24]  611 	mov	dptr,#0x005d
      0000B7 12r00r00         [24]  612 	lcall	_putchar
      0000BA 80 0C            [24]  613 	sjmp	00113$
      0000BC                        614 00104$:
                                    615 ;	life.c:64: putchar('#'); putchar('#');
      0000BC 90 00 23         [24]  616 	mov	dptr,#0x0023
      0000BF 12r00r00         [24]  617 	lcall	_putchar
      0000C2 90 00 23         [24]  618 	mov	dptr,#0x0023
      0000C5 12r00r00         [24]  619 	lcall	_putchar
      0000C8                        620 00113$:
                                    621 ;	life.c:60: for (y = 0; y < H; y++)
      0000C8 78r04            [12]  622 	mov	r0,#_y
      0000CA 06               [12]  623 	inc	@r0
      0000CB B6 00 02         [24]  624 	cjne	@r0,#0x00,00151$
      0000CE 08               [12]  625 	inc	r0
      0000CF 06               [12]  626 	inc	@r0
      0000D0                        627 00151$:
      0000D0 78r04            [12]  628 	mov	r0,#_y
      0000D2 C3               [12]  629 	clr	c
      0000D3 E6               [12]  630 	mov	a,@r0
      0000D4 94 40            [12]  631 	subb	a,#0x40
      0000D6 08               [12]  632 	inc	r0
      0000D7 E6               [12]  633 	mov	a,@r0
      0000D8 64 80            [12]  634 	xrl	a,#0x80
      0000DA 94 80            [12]  635 	subb	a,#0x80
      0000DC 40 A3            [24]  636 	jc	00112$
                                    637 ;	life.c:66: printstr("\r\n");
      0000DE 90r00r0C         [24]  638 	mov	dptr,#___str_1
      0000E1 75 F0 80         [24]  639 	mov	b,#0x80
      0000E4 12r00r00         [24]  640 	lcall	_printstr
                                    641 ;	life.c:59: for (x = 0; x < W; x++) {
      0000E7 78r02            [12]  642 	mov	r0,#_x
      0000E9 06               [12]  643 	inc	@r0
      0000EA B6 00 02         [24]  644 	cjne	@r0,#0x00,00153$
      0000ED 08               [12]  645 	inc	r0
      0000EE 06               [12]  646 	inc	@r0
      0000EF                        647 00153$:
      0000EF 78r02            [12]  648 	mov	r0,#_x
      0000F1 C3               [12]  649 	clr	c
      0000F2 E6               [12]  650 	mov	a,@r0
      0000F3 94 20            [12]  651 	subb	a,#0x20
      0000F5 08               [12]  652 	inc	r0
      0000F6 E6               [12]  653 	mov	a,@r0
      0000F7 64 80            [12]  654 	xrl	a,#0x80
      0000F9 94 80            [12]  655 	subb	a,#0x80
      0000FB 50 03            [24]  656 	jnc	00154$
      0000FD 02r00r7B         [24]  657 	ljmp	00114$
      000100                        658 00154$:
                                    659 ;	life.c:69: return;
                                    660 ;	life.c:70: }
      000100 22               [24]  661 	ret
                                    662 ;------------------------------------------------------------
                                    663 ;Allocation info for local variables in function 'main'
                                    664 ;------------------------------------------------------------
                                    665 ;sloc0                     Allocated to stack - _bp +1
                                    666 ;sloc1                     Allocated to stack - _bp +2
                                    667 ;sloc2                     Allocated to stack - _bp +4
                                    668 ;sloc3                     Allocated to stack - _bp +6
                                    669 ;sloc4                     Allocated to stack - _bp +8
                                    670 ;sloc5                     Allocated to stack - _bp +10
                                    671 ;sloc6                     Allocated to stack - _bp +12
                                    672 ;------------------------------------------------------------
                                    673 ;	life.c:161: void main(void) {
                                    674 ;	-----------------------------------------
                                    675 ;	 function main
                                    676 ;	-----------------------------------------
      000101                        677 _main:
      000101 C0*00            [24]  678 	push	_bp
      000103 E5 81            [12]  679 	mov	a,sp
      000105 F5*00            [12]  680 	mov	_bp,a
      000107 24 0D            [12]  681 	add	a,#0x0d
      000109 F5 81            [12]  682 	mov	sp,a
                                    683 ;	life.c:162: IT0 = 1;
                                    684 ;	assignBit
      00010B D2 88            [12]  685 	setb	_IT0
                                    686 ;	life.c:163: IT1 = 1;
                                    687 ;	assignBit
      00010D D2 8A            [12]  688 	setb	_IT1
                                    689 ;	life.c:164: EX0 = 1;
                                    690 ;	assignBit
      00010F D2 A8            [12]  691 	setb	_EX0
                                    692 ;	life.c:165: EX1 = 1;
                                    693 ;	assignBit
      000111 D2 AA            [12]  694 	setb	_EX1
                                    695 ;	life.c:166: EA = 1;
                                    696 ;	assignBit
      000113 D2 AF            [12]  697 	setb	_EA
                                    698 ;	life.c:168: for (i0 = 0; !i0; ) {		
      000115 78r00            [12]  699 	mov	r0,#_i0
      000117 76 00            [12]  700 	mov	@r0,#0x00
      000119                        701 00204$:
                                    702 ;	life.c:169: printstr("\033[2J\033[mLIFE INIT\r\n");
      000119 90r00r1A         [24]  703 	mov	dptr,#___str_4
      00011C 75 F0 80         [24]  704 	mov	b,#0x80
      00011F 12r00r00         [24]  705 	lcall	_printstr
                                    706 ;	life.c:170: while (1) {
      000122                        707 00108$:
                                    708 ;	life.c:171: c = toupper(getchar());
      000122 12r00r00         [24]  709 	lcall	_getchar
      000125 12r00r00         [24]  710 	lcall	_toupper
      000128 AE 82            [24]  711 	mov	r6,dpl
      00012A AF 83            [24]  712 	mov	r7,dph
      00012C 78r08            [12]  713 	mov	r0,#_c
      00012E A6 06            [24]  714 	mov	@r0,ar6
      000130 08               [12]  715 	inc	r0
      000131 A6 07            [24]  716 	mov	@r0,ar7
                                    717 ;	life.c:172: if (i0 || (c == (int)'T')) goto terminate;
      000133 78r00            [12]  718 	mov	r0,#_i0
      000135 E6               [12]  719 	mov	a,@r0
      000136 60 03            [24]  720 	jz	00333$
      000138 02r07r7A         [24]  721 	ljmp	00133$
      00013B                        722 00333$:
      00013B BE 54 06         [24]  723 	cjne	r6,#0x54,00334$
      00013E BF 00 03         [24]  724 	cjne	r7,#0x00,00334$
      000141 02r07r7A         [24]  725 	ljmp	00133$
      000144                        726 00334$:
                                    727 ;	life.c:173: else if (c == (int)'L') break;
      000144 BE 4C DB         [24]  728 	cjne	r6,#0x4c,00108$
      000147 BF 00 D8         [24]  729 	cjne	r7,#0x00,00108$
                                    730 ;	life.c:176: reload:
      00014A                        731 00110$:
                                    732 ;	life.c:73: memset(u, 0, sizeof (u));
      00014A E4               [12]  733 	clr	a
      00014B C0 E0            [24]  734 	push	acc
      00014D 74 08            [12]  735 	mov	a,#0x08
      00014F C0 E0            [24]  736 	push	acc
      000151 E4               [12]  737 	clr	a
      000152 C0 E0            [24]  738 	push	acc
      000154 90r08r00         [24]  739 	mov	dptr,#_u
      000157 75 F0 00         [24]  740 	mov	b,#0x00
      00015A 12r00r00         [24]  741 	lcall	_memset
      00015D 15 81            [12]  742 	dec	sp
      00015F 15 81            [12]  743 	dec	sp
      000161 15 81            [12]  744 	dec	sp
                                    745 ;	life.c:74: memset(pu, 0, sizeof (pu));
      000163 E4               [12]  746 	clr	a
      000164 C0 E0            [24]  747 	push	acc
      000166 74 08            [12]  748 	mov	a,#0x08
      000168 C0 E0            [24]  749 	push	acc
      00016A E4               [12]  750 	clr	a
      00016B C0 E0            [24]  751 	push	acc
      00016D 90r00r00         [24]  752 	mov	dptr,#_pu
      000170 75 F0 00         [24]  753 	mov	b,#0x00
      000173 12r00r00         [24]  754 	lcall	_memset
      000176 15 81            [12]  755 	dec	sp
      000178 15 81            [12]  756 	dec	sp
      00017A 15 81            [12]  757 	dec	sp
                                    758 ;	life.c:80: j = 0;
      00017C 78r06            [12]  759 	mov	r0,#_j
      00017E E4               [12]  760 	clr	a
      00017F F6               [12]  761 	mov	@r0,a
      000180 08               [12]  762 	inc	r0
      000181 F6               [12]  763 	mov	@r0,a
                                    764 ;	life.c:82: printstr("LOAD <");
      000182 90r00r0F         [24]  765 	mov	dptr,#___str_2
      000185 75 F0 80         [24]  766 	mov	b,#0x80
      000188 12r00r00         [24]  767 	lcall	_printstr
                                    768 ;	life.c:84: for (y = 0; y < H; y++) {
      00018B 78r04            [12]  769 	mov	r0,#_y
      00018D E4               [12]  770 	clr	a
      00018E F6               [12]  771 	mov	@r0,a
      00018F 08               [12]  772 	inc	r0
      000190 F6               [12]  773 	mov	@r0,a
      000191                        774 00194$:
                                    775 ;	life.c:85: for (x = 0; x < W; x++) {
      000191 78r02            [12]  776 	mov	r0,#_x
      000193 E4               [12]  777 	clr	a
      000194 F6               [12]  778 	mov	@r0,a
      000195 08               [12]  779 	inc	r0
      000196 F6               [12]  780 	mov	@r0,a
                                    781 ;	life.c:86: while (1) {
      000197                        782 00147$:
                                    783 ;	life.c:87: c = toupper(getchar());
      000197 12r00r00         [24]  784 	lcall	_getchar
      00019A 12r00r00         [24]  785 	lcall	_toupper
      00019D AE 82            [24]  786 	mov	r6,dpl
      00019F AF 83            [24]  787 	mov	r7,dph
      0001A1 78r08            [12]  788 	mov	r0,#_c
      0001A3 A6 06            [24]  789 	mov	@r0,ar6
      0001A5 08               [12]  790 	inc	r0
      0001A6 A6 07            [24]  791 	mov	@r0,ar7
                                    792 ;	life.c:88: if (c == (int)'0') {
      0001A8 BE 30 37         [24]  793 	cjne	r6,#0x30,00145$
      0001AB BF 00 34         [24]  794 	cjne	r7,#0x00,00145$
                                    795 ;	life.c:89: u[A2D(W, y, x)] = 0;
      0001AE 78r04            [12]  796 	mov	r0,#_y
      0001B0 86 04            [24]  797 	mov	ar4,@r0
      0001B2 08               [12]  798 	inc	r0
      0001B3 E6               [12]  799 	mov	a,@r0
      0001B4 C4               [12]  800 	swap	a
      0001B5 23               [12]  801 	rl	a
      0001B6 54 E0            [12]  802 	anl	a,#0xe0
      0001B8 CC               [12]  803 	xch	a,r4
      0001B9 C4               [12]  804 	swap	a
      0001BA 23               [12]  805 	rl	a
      0001BB CC               [12]  806 	xch	a,r4
      0001BC 6C               [12]  807 	xrl	a,r4
      0001BD CC               [12]  808 	xch	a,r4
      0001BE 54 E0            [12]  809 	anl	a,#0xe0
      0001C0 CC               [12]  810 	xch	a,r4
      0001C1 6C               [12]  811 	xrl	a,r4
      0001C2 FD               [12]  812 	mov	r5,a
      0001C3 78r02            [12]  813 	mov	r0,#_x
      0001C5 E6               [12]  814 	mov	a,@r0
      0001C6 2C               [12]  815 	add	a,r4
      0001C7 FC               [12]  816 	mov	r4,a
      0001C8 08               [12]  817 	inc	r0
      0001C9 E6               [12]  818 	mov	a,@r0
      0001CA 3D               [12]  819 	addc	a,r5
      0001CB FD               [12]  820 	mov	r5,a
      0001CC EC               [12]  821 	mov	a,r4
      0001CD 24r00            [12]  822 	add	a,#_u
      0001CF F5 82            [12]  823 	mov	dpl,a
      0001D1 ED               [12]  824 	mov	a,r5
      0001D2 34s08            [12]  825 	addc	a,#(_u >> 8)
      0001D4 F5 83            [12]  826 	mov	dph,a
      0001D6 E4               [12]  827 	clr	a
      0001D7 F0               [24]  828 	movx	@dptr,a
                                    829 ;	life.c:90: j++;
      0001D8 78r06            [12]  830 	mov	r0,#_j
      0001DA 06               [12]  831 	inc	@r0
      0001DB B6 00 02         [24]  832 	cjne	@r0,#0x00,00339$
      0001DE 08               [12]  833 	inc	r0
      0001DF 06               [12]  834 	inc	@r0
      0001E0                        835 00339$:
                                    836 ;	life.c:91: break;
      0001E0 80 4E            [24]  837 	sjmp	00150$
      0001E2                        838 00145$:
                                    839 ;	life.c:92: } else if (c == (int)'1') {
      0001E2 BE 31 38         [24]  840 	cjne	r6,#0x31,00143$
      0001E5 BF 00 35         [24]  841 	cjne	r7,#0x00,00143$
                                    842 ;	life.c:93: u[A2D(W, y, x)] = 1;
      0001E8 78r04            [12]  843 	mov	r0,#_y
      0001EA 86 04            [24]  844 	mov	ar4,@r0
      0001EC 08               [12]  845 	inc	r0
      0001ED E6               [12]  846 	mov	a,@r0
      0001EE C4               [12]  847 	swap	a
      0001EF 23               [12]  848 	rl	a
      0001F0 54 E0            [12]  849 	anl	a,#0xe0
      0001F2 CC               [12]  850 	xch	a,r4
      0001F3 C4               [12]  851 	swap	a
      0001F4 23               [12]  852 	rl	a
      0001F5 CC               [12]  853 	xch	a,r4
      0001F6 6C               [12]  854 	xrl	a,r4
      0001F7 CC               [12]  855 	xch	a,r4
      0001F8 54 E0            [12]  856 	anl	a,#0xe0
      0001FA CC               [12]  857 	xch	a,r4
      0001FB 6C               [12]  858 	xrl	a,r4
      0001FC FD               [12]  859 	mov	r5,a
      0001FD 78r02            [12]  860 	mov	r0,#_x
      0001FF E6               [12]  861 	mov	a,@r0
      000200 2C               [12]  862 	add	a,r4
      000201 FC               [12]  863 	mov	r4,a
      000202 08               [12]  864 	inc	r0
      000203 E6               [12]  865 	mov	a,@r0
      000204 3D               [12]  866 	addc	a,r5
      000205 FD               [12]  867 	mov	r5,a
      000206 EC               [12]  868 	mov	a,r4
      000207 24r00            [12]  869 	add	a,#_u
      000209 F5 82            [12]  870 	mov	dpl,a
      00020B ED               [12]  871 	mov	a,r5
      00020C 34s08            [12]  872 	addc	a,#(_u >> 8)
      00020E F5 83            [12]  873 	mov	dph,a
      000210 74 01            [12]  874 	mov	a,#0x01
      000212 F0               [24]  875 	movx	@dptr,a
                                    876 ;	life.c:94: j++;
      000213 78r06            [12]  877 	mov	r0,#_j
      000215 06               [12]  878 	inc	@r0
      000216 B6 00 02         [24]  879 	cjne	@r0,#0x00,00342$
      000219 08               [12]  880 	inc	r0
      00021A 06               [12]  881 	inc	@r0
      00021B                        882 00342$:
                                    883 ;	life.c:95: break;
      00021B 80 13            [24]  884 	sjmp	00150$
      00021D                        885 00143$:
                                    886 ;	life.c:96: } else if (c == (int)'S') goto br_inner;
      00021D BE 53 05         [24]  887 	cjne	r6,#0x53,00343$
      000220 BF 00 02         [24]  888 	cjne	r7,#0x00,00343$
      000223 80 24            [24]  889 	sjmp	00195$
      000225                        890 00343$:
                                    891 ;	life.c:97: else if (c == (int)'#') goto out;
      000225 BE 23 05         [24]  892 	cjne	r6,#0x23,00344$
      000228 BF 00 02         [24]  893 	cjne	r7,#0x00,00344$
      00022B 80 35            [24]  894 	sjmp	00160$
      00022D                        895 00344$:
      00022D 02r01r97         [24]  896 	ljmp	00147$
                                    897 ;	life.c:101: break;
      000230                        898 00150$:
                                    899 ;	life.c:85: for (x = 0; x < W; x++) {
      000230 78r02            [12]  900 	mov	r0,#_x
      000232 06               [12]  901 	inc	@r0
      000233 B6 00 02         [24]  902 	cjne	@r0,#0x00,00345$
      000236 08               [12]  903 	inc	r0
      000237 06               [12]  904 	inc	@r0
      000238                        905 00345$:
      000238 78r02            [12]  906 	mov	r0,#_x
      00023A C3               [12]  907 	clr	c
      00023B E6               [12]  908 	mov	a,@r0
      00023C 94 20            [12]  909 	subb	a,#0x20
      00023E 08               [12]  910 	inc	r0
      00023F E6               [12]  911 	mov	a,@r0
      000240 64 80            [12]  912 	xrl	a,#0x80
      000242 94 80            [12]  913 	subb	a,#0x80
      000244 50 03            [24]  914 	jnc	00346$
      000246 02r01r97         [24]  915 	ljmp	00147$
      000249                        916 00346$:
      000249                        917 00195$:
                                    918 ;	life.c:84: for (y = 0; y < H; y++) {
      000249 78r04            [12]  919 	mov	r0,#_y
      00024B 06               [12]  920 	inc	@r0
      00024C B6 00 02         [24]  921 	cjne	@r0,#0x00,00347$
      00024F 08               [12]  922 	inc	r0
      000250 06               [12]  923 	inc	@r0
      000251                        924 00347$:
      000251 78r04            [12]  925 	mov	r0,#_y
      000253 C3               [12]  926 	clr	c
      000254 E6               [12]  927 	mov	a,@r0
      000255 94 40            [12]  928 	subb	a,#0x40
      000257 08               [12]  929 	inc	r0
      000258 E6               [12]  930 	mov	a,@r0
      000259 64 80            [12]  931 	xrl	a,#0x80
      00025B 94 80            [12]  932 	subb	a,#0x80
      00025D 50 03            [24]  933 	jnc	00348$
      00025F 02r01r91         [24]  934 	ljmp	00194$
      000262                        935 00348$:
                                    936 ;	life.c:105: out:
      000262                        937 00160$:
                                    938 ;	life.c:106: if (c != (int)'#')
      000262 BE 23 05         [24]  939 	cjne	r6,#0x23,00349$
      000265 BF 00 02         [24]  940 	cjne	r7,#0x00,00349$
      000268 80 14            [24]  941 	sjmp	00159$
      00026A                        942 00349$:
                                    943 ;	life.c:107: while (1) {
      00026A                        944 00156$:
                                    945 ;	life.c:108: c = getchar();
      00026A 12r00r00         [24]  946 	lcall	_getchar
      00026D AE 82            [24]  947 	mov	r6,dpl
      00026F AF 83            [24]  948 	mov	r7,dph
      000271 78r08            [12]  949 	mov	r0,#_c
      000273 A6 06            [24]  950 	mov	@r0,ar6
      000275 08               [12]  951 	inc	r0
      000276 A6 07            [24]  952 	mov	@r0,ar7
                                    953 ;	life.c:109: if (c == (int)'#') break;
      000278 BE 23 EF         [24]  954 	cjne	r6,#0x23,00156$
      00027B BF 00 EC         [24]  955 	cjne	r7,#0x00,00156$
      00027E                        956 00159$:
                                    957 ;	life.c:111: print16x(j);
      00027E 78r06            [12]  958 	mov	r0,#_j
      000280 86 82            [24]  959 	mov	dpl,@r0
      000282 08               [12]  960 	inc	r0
      000283 86 83            [24]  961 	mov	dph,@r0
      000285 12r00r00         [24]  962 	lcall	_print16x
                                    963 ;	life.c:112: printstr(">\r\n");
      000288 90r00r16         [24]  964 	mov	dptr,#___str_3
      00028B 75 F0 80         [24]  965 	mov	b,#0x80
      00028E 12r00r00         [24]  966 	lcall	_printstr
                                    967 ;	life.c:179: show(0);
      000291 75 82 00         [24]  968 	mov	dpl,#0x00
      000294 12r00r18         [24]  969 	lcall	_show
                                    970 ;	life.c:181: printstr("READY\r\n");
      000297 90r00r2D         [24]  971 	mov	dptr,#___str_5
      00029A 75 F0 80         [24]  972 	mov	b,#0x80
      00029D 12r00r00         [24]  973 	lcall	_printstr
                                    974 ;	life.c:182: while (1) {
      0002A0                        975 00121$:
                                    976 ;	life.c:183: c = toupper(getchar());
      0002A0 12r00r00         [24]  977 	lcall	_getchar
      0002A3 12r00r00         [24]  978 	lcall	_toupper
      0002A6 AE 82            [24]  979 	mov	r6,dpl
      0002A8 AF 83            [24]  980 	mov	r7,dph
      0002AA 78r08            [12]  981 	mov	r0,#_c
      0002AC A6 06            [24]  982 	mov	@r0,ar6
      0002AE 08               [12]  983 	inc	r0
      0002AF A6 07            [24]  984 	mov	@r0,ar7
                                    985 ;	life.c:184: if (i0 || (c == (int)'T')) goto terminate;
      0002B1 78r00            [12]  986 	mov	r0,#_i0
      0002B3 E6               [12]  987 	mov	a,@r0
      0002B4 60 03            [24]  988 	jz	00352$
      0002B6 02r07r7A         [24]  989 	ljmp	00133$
      0002B9                        990 00352$:
      0002B9 BE 54 06         [24]  991 	cjne	r6,#0x54,00353$
      0002BC BF 00 03         [24]  992 	cjne	r7,#0x00,00353$
      0002BF 02r07r7A         [24]  993 	ljmp	00133$
      0002C2                        994 00353$:
                                    995 ;	life.c:185: else if (c == (int)'L') goto reload;
      0002C2 BE 4C 06         [24]  996 	cjne	r6,#0x4c,00354$
      0002C5 BF 00 03         [24]  997 	cjne	r7,#0x00,00354$
      0002C8 02r01r4A         [24]  998 	ljmp	00110$
      0002CB                        999 00354$:
                                   1000 ;	life.c:186: else if (c == (int)'S') break;
      0002CB BE 53 D2         [24] 1001 	cjne	r6,#0x53,00121$
      0002CE BF 00 CF         [24] 1002 	cjne	r7,#0x00,00121$
                                   1003 ;	life.c:31: generation[0] = 0;
      0002D1 78r12            [12] 1004 	mov	r0,#_generation
      0002D3 76 00            [12] 1005 	mov	@r0,#0x00
      0002D5 08               [12] 1006 	inc	r0
      0002D6 76 00            [12] 1007 	mov	@r0,#0x00
                                   1008 ;	life.c:32: generation[1] = 0;
      0002D8 78r14            [12] 1009 	mov	r0,#(_generation + 0x0002)
      0002DA 76 00            [12] 1010 	mov	@r0,#0x00
      0002DC 08               [12] 1011 	inc	r0
      0002DD 76 00            [12] 1012 	mov	@r0,#0x00
                                   1013 ;	life.c:191: for (i1 = 0; !i0 && !i1; ) {
      0002DF 78r01            [12] 1014 	mov	r0,#_i1
      0002E1 76 00            [12] 1015 	mov	@r0,#0x00
      0002E3                       1016 00202$:
      0002E3 78r00            [12] 1017 	mov	r0,#_i0
      0002E5 E6               [12] 1018 	mov	a,@r0
      0002E6 60 03            [24] 1019 	jz	00357$
      0002E8 02r07r61         [24] 1020 	ljmp	00129$
      0002EB                       1021 00357$:
      0002EB 78r01            [12] 1022 	mov	r0,#_i1
      0002ED E6               [12] 1023 	mov	a,@r0
      0002EE 60 03            [24] 1024 	jz	00358$
      0002F0 02r07r61         [24] 1025 	ljmp	00129$
      0002F3                       1026 00358$:
                                   1027 ;	life.c:192: show(1);
      0002F3 75 82 01         [24] 1028 	mov	dpl,#0x01
      0002F6 12r00r18         [24] 1029 	lcall	_show
                                   1030 ;	life.c:120: fixed = 0;
      0002F9 78r0C            [12] 1031 	mov	r0,#_fixed
      0002FB 76 00            [12] 1032 	mov	@r0,#0x00
                                   1033 ;	life.c:121: cycle2 = 0;
      0002FD 78r0D            [12] 1034 	mov	r0,#_cycle2
      0002FF 76 00            [12] 1035 	mov	@r0,#0x00
                                   1036 ;	life.c:122: bstep = 0;
      000301 78r0A            [12] 1037 	mov	r0,#_bstep
      000303 76 00            [12] 1038 	mov	@r0,#0x00
                                   1039 ;	life.c:124: for (y = 0; y < H; y++) {
      000305 78r04            [12] 1040 	mov	r0,#_y
      000307 E4               [12] 1041 	clr	a
      000308 F6               [12] 1042 	mov	@r0,a
      000309 08               [12] 1043 	inc	r0
      00030A F6               [12] 1044 	mov	@r0,a
      00030B                       1045 00198$:
                                   1046 ;	life.c:125: putchar(busy[bstep]); putchar('\r');
      00030B 78r0A            [12] 1047 	mov	r0,#_bstep
      00030D E6               [12] 1048 	mov	a,@r0
      00030E 24r16            [12] 1049 	add	a,#_busy
      000310 F9               [12] 1050 	mov	r1,a
      000311 87 07            [24] 1051 	mov	ar7,@r1
      000313 7E 00            [12] 1052 	mov	r6,#0x00
      000315 8F 82            [24] 1053 	mov	dpl,r7
      000317 8E 83            [24] 1054 	mov	dph,r6
      000319 12r00r00         [24] 1055 	lcall	_putchar
      00031C 90 00 0D         [24] 1056 	mov	dptr,#0x000d
      00031F 12r00r00         [24] 1057 	lcall	_putchar
                                   1058 ;	life.c:126: bstep = (bstep + 1) & 3;
      000322 78r0A            [12] 1059 	mov	r0,#_bstep
      000324 86 07            [24] 1060 	mov	ar7,@r0
      000326 0F               [12] 1061 	inc	r7
      000327 78r0A            [12] 1062 	mov	r0,#_bstep
      000329 74 03            [12] 1063 	mov	a,#0x03
      00032B 5F               [12] 1064 	anl	a,r7
      00032C F6               [12] 1065 	mov	@r0,a
                                   1066 ;	life.c:127: for (x = 0; x < W; x++) {
      00032D 78r02            [12] 1067 	mov	r0,#_x
      00032F E4               [12] 1068 	clr	a
      000330 F6               [12] 1069 	mov	@r0,a
      000331 08               [12] 1070 	inc	r0
      000332 F6               [12] 1071 	mov	@r0,a
      000333                       1072 00196$:
                                   1073 ;	life.c:128: n = -u[A2D(W, y, x)];
      000333 78r04            [12] 1074 	mov	r0,#_y
      000335 E5*00            [12] 1075 	mov	a,_bp
      000337 24 04            [12] 1076 	add	a,#0x04
      000339 F9               [12] 1077 	mov	r1,a
      00033A E6               [12] 1078 	mov	a,@r0
      00033B F7               [12] 1079 	mov	@r1,a
      00033C 08               [12] 1080 	inc	r0
      00033D E6               [12] 1081 	mov	a,@r0
      00033E C4               [12] 1082 	swap	a
      00033F 23               [12] 1083 	rl	a
      000340 54 E0            [12] 1084 	anl	a,#0xe0
      000342 C7               [12] 1085 	xch	a,@r1
      000343 C4               [12] 1086 	swap	a
      000344 23               [12] 1087 	rl	a
      000345 C7               [12] 1088 	xch	a,@r1
      000346 67               [12] 1089 	xrl	a,@r1
      000347 C7               [12] 1090 	xch	a,@r1
      000348 54 E0            [12] 1091 	anl	a,#0xe0
      00034A C7               [12] 1092 	xch	a,@r1
      00034B 67               [12] 1093 	xrl	a,@r1
      00034C 09               [12] 1094 	inc	r1
      00034D F7               [12] 1095 	mov	@r1,a
      00034E E5*00            [12] 1096 	mov	a,_bp
      000350 24 04            [12] 1097 	add	a,#0x04
      000352 F8               [12] 1098 	mov	r0,a
      000353 79r02            [12] 1099 	mov	r1,#_x
      000355 E7               [12] 1100 	mov	a,@r1
      000356 26               [12] 1101 	add	a,@r0
      000357 C0 E0            [24] 1102 	push	acc
      000359 09               [12] 1103 	inc	r1
      00035A E7               [12] 1104 	mov	a,@r1
      00035B 08               [12] 1105 	inc	r0
      00035C 36               [12] 1106 	addc	a,@r0
      00035D C0 E0            [24] 1107 	push	acc
      00035F E5*00            [12] 1108 	mov	a,_bp
      000361 24 03            [12] 1109 	add	a,#0x03
      000363 F8               [12] 1110 	mov	r0,a
      000364 D0 E0            [24] 1111 	pop	acc
      000366 F6               [12] 1112 	mov	@r0,a
      000367 18               [12] 1113 	dec	r0
      000368 D0 E0            [24] 1114 	pop	acc
      00036A F6               [12] 1115 	mov	@r0,a
      00036B A8*00            [24] 1116 	mov	r0,_bp
      00036D 08               [12] 1117 	inc	r0
      00036E 08               [12] 1118 	inc	r0
      00036F E6               [12] 1119 	mov	a,@r0
      000370 24r00            [12] 1120 	add	a,#_u
      000372 F5 82            [12] 1121 	mov	dpl,a
      000374 08               [12] 1122 	inc	r0
      000375 E6               [12] 1123 	mov	a,@r0
      000376 34s08            [12] 1124 	addc	a,#(_u >> 8)
      000378 F5 83            [12] 1125 	mov	dph,a
      00037A E0               [24] 1126 	movx	a,@dptr
      00037B FB               [12] 1127 	mov	r3,a
      00037C A8*00            [24] 1128 	mov	r0,_bp
      00037E 08               [12] 1129 	inc	r0
      00037F C3               [12] 1130 	clr	c
      000380 E4               [12] 1131 	clr	a
      000381 9B               [12] 1132 	subb	a,r3
      000382 F6               [12] 1133 	mov	@r0,a
                                   1134 ;	life.c:135: UPDN(-1, -1);
      000383 78r04            [12] 1135 	mov	r0,#_y
      000385 74 FF            [12] 1136 	mov	a,#0xff
      000387 26               [12] 1137 	add	a,@r0
      000388 FA               [12] 1138 	mov	r2,a
      000389 74 FF            [12] 1139 	mov	a,#0xff
      00038B 08               [12] 1140 	inc	r0
      00038C 36               [12] 1141 	addc	a,@r0
      00038D FB               [12] 1142 	mov	r3,a
      00038E 74 40            [12] 1143 	mov	a,#0x40
      000390 2A               [12] 1144 	add	a,r2
      000391 FA               [12] 1145 	mov	r2,a
      000392 E4               [12] 1146 	clr	a
      000393 3B               [12] 1147 	addc	a,r3
      000394 FB               [12] 1148 	mov	r3,a
      000395 74 40            [12] 1149 	mov	a,#0x40
      000397 C0 E0            [24] 1150 	push	acc
      000399 E4               [12] 1151 	clr	a
      00039A C0 E0            [24] 1152 	push	acc
      00039C 8A 82            [24] 1153 	mov	dpl,r2
      00039E 8B 83            [24] 1154 	mov	dph,r3
      0003A0 12r00r00         [24] 1155 	lcall	__modsint
      0003A3 AA 82            [24] 1156 	mov	r2,dpl
      0003A5 AB 83            [24] 1157 	mov	r3,dph
      0003A7 15 81            [12] 1158 	dec	sp
      0003A9 15 81            [12] 1159 	dec	sp
      0003AB EB               [12] 1160 	mov	a,r3
      0003AC C4               [12] 1161 	swap	a
      0003AD 23               [12] 1162 	rl	a
      0003AE 54 E0            [12] 1163 	anl	a,#0xe0
      0003B0 CA               [12] 1164 	xch	a,r2
      0003B1 C4               [12] 1165 	swap	a
      0003B2 23               [12] 1166 	rl	a
      0003B3 CA               [12] 1167 	xch	a,r2
      0003B4 6A               [12] 1168 	xrl	a,r2
      0003B5 CA               [12] 1169 	xch	a,r2
      0003B6 54 E0            [12] 1170 	anl	a,#0xe0
      0003B8 CA               [12] 1171 	xch	a,r2
      0003B9 6A               [12] 1172 	xrl	a,r2
      0003BA FB               [12] 1173 	mov	r3,a
      0003BB 78r02            [12] 1174 	mov	r0,#_x
      0003BD 74 FF            [12] 1175 	mov	a,#0xff
      0003BF 26               [12] 1176 	add	a,@r0
      0003C0 FC               [12] 1177 	mov	r4,a
      0003C1 74 FF            [12] 1178 	mov	a,#0xff
      0003C3 08               [12] 1179 	inc	r0
      0003C4 36               [12] 1180 	addc	a,@r0
      0003C5 FD               [12] 1181 	mov	r5,a
      0003C6 74 20            [12] 1182 	mov	a,#0x20
      0003C8 2C               [12] 1183 	add	a,r4
      0003C9 FC               [12] 1184 	mov	r4,a
      0003CA E4               [12] 1185 	clr	a
      0003CB 3D               [12] 1186 	addc	a,r5
      0003CC FD               [12] 1187 	mov	r5,a
      0003CD C0 03            [24] 1188 	push	ar3
      0003CF C0 02            [24] 1189 	push	ar2
      0003D1 74 20            [12] 1190 	mov	a,#0x20
      0003D3 C0 E0            [24] 1191 	push	acc
      0003D5 E4               [12] 1192 	clr	a
      0003D6 C0 E0            [24] 1193 	push	acc
      0003D8 8C 82            [24] 1194 	mov	dpl,r4
      0003DA 8D 83            [24] 1195 	mov	dph,r5
      0003DC 12r00r00         [24] 1196 	lcall	__modsint
      0003DF AC 82            [24] 1197 	mov	r4,dpl
      0003E1 AD 83            [24] 1198 	mov	r5,dph
      0003E3 15 81            [12] 1199 	dec	sp
      0003E5 15 81            [12] 1200 	dec	sp
      0003E7 D0 02            [24] 1201 	pop	ar2
      0003E9 D0 03            [24] 1202 	pop	ar3
      0003EB EC               [12] 1203 	mov	a,r4
      0003EC 2A               [12] 1204 	add	a,r2
      0003ED FE               [12] 1205 	mov	r6,a
      0003EE ED               [12] 1206 	mov	a,r5
      0003EF 3B               [12] 1207 	addc	a,r3
      0003F0 FF               [12] 1208 	mov	r7,a
      0003F1 EE               [12] 1209 	mov	a,r6
      0003F2 24r00            [12] 1210 	add	a,#_u
      0003F4 F5 82            [12] 1211 	mov	dpl,a
      0003F6 EF               [12] 1212 	mov	a,r7
      0003F7 34s08            [12] 1213 	addc	a,#(_u >> 8)
      0003F9 F5 83            [12] 1214 	mov	dph,a
      0003FB E0               [24] 1215 	movx	a,@dptr
      0003FC FF               [12] 1216 	mov	r7,a
      0003FD A8*00            [24] 1217 	mov	r0,_bp
      0003FF 08               [12] 1218 	inc	r0
      000400 EF               [12] 1219 	mov	a,r7
      000401 26               [12] 1220 	add	a,@r0
      000402 F6               [12] 1221 	mov	@r0,a
                                   1222 ;	life.c:136: UPDN(-1, 0);
      000403 78r02            [12] 1223 	mov	r0,#_x
      000405 E5*00            [12] 1224 	mov	a,_bp
      000407 24 06            [12] 1225 	add	a,#0x06
      000409 F9               [12] 1226 	mov	r1,a
      00040A E6               [12] 1227 	mov	a,@r0
      00040B F7               [12] 1228 	mov	@r1,a
      00040C 08               [12] 1229 	inc	r0
      00040D 09               [12] 1230 	inc	r1
      00040E E6               [12] 1231 	mov	a,@r0
      00040F F7               [12] 1232 	mov	@r1,a
      000410 E5*00            [12] 1233 	mov	a,_bp
      000412 24 06            [12] 1234 	add	a,#0x06
      000414 F8               [12] 1235 	mov	r0,a
      000415 74 20            [12] 1236 	mov	a,#0x20
      000417 26               [12] 1237 	add	a,@r0
      000418 FE               [12] 1238 	mov	r6,a
      000419 E4               [12] 1239 	clr	a
      00041A 08               [12] 1240 	inc	r0
      00041B 36               [12] 1241 	addc	a,@r0
      00041C FF               [12] 1242 	mov	r7,a
      00041D C0 05            [24] 1243 	push	ar5
      00041F C0 04            [24] 1244 	push	ar4
      000421 C0 03            [24] 1245 	push	ar3
      000423 C0 02            [24] 1246 	push	ar2
      000425 74 20            [12] 1247 	mov	a,#0x20
      000427 C0 E0            [24] 1248 	push	acc
      000429 E4               [12] 1249 	clr	a
      00042A C0 E0            [24] 1250 	push	acc
      00042C 8E 82            [24] 1251 	mov	dpl,r6
      00042E 8F 83            [24] 1252 	mov	dph,r7
      000430 12r00r00         [24] 1253 	lcall	__modsint
      000433 C8               [12] 1254 	xch	a,r0
      000434 E5*00            [12] 1255 	mov	a,_bp
      000436 24 08            [12] 1256 	add	a,#0x08
      000438 C8               [12] 1257 	xch	a,r0
      000439 A6 82            [24] 1258 	mov	@r0,dpl
      00043B 08               [12] 1259 	inc	r0
      00043C A6 83            [24] 1260 	mov	@r0,dph
      00043E 15 81            [12] 1261 	dec	sp
      000440 15 81            [12] 1262 	dec	sp
      000442 D0 02            [24] 1263 	pop	ar2
      000444 D0 03            [24] 1264 	pop	ar3
      000446 E5*00            [12] 1265 	mov	a,_bp
      000448 24 08            [12] 1266 	add	a,#0x08
      00044A F8               [12] 1267 	mov	r0,a
      00044B E6               [12] 1268 	mov	a,@r0
      00044C 2A               [12] 1269 	add	a,r2
      00044D FE               [12] 1270 	mov	r6,a
      00044E 08               [12] 1271 	inc	r0
      00044F E6               [12] 1272 	mov	a,@r0
      000450 3B               [12] 1273 	addc	a,r3
      000451 FF               [12] 1274 	mov	r7,a
      000452 EE               [12] 1275 	mov	a,r6
      000453 24r00            [12] 1276 	add	a,#_u
      000455 F5 82            [12] 1277 	mov	dpl,a
      000457 EF               [12] 1278 	mov	a,r7
      000458 34s08            [12] 1279 	addc	a,#(_u >> 8)
      00045A F5 83            [12] 1280 	mov	dph,a
      00045C E0               [24] 1281 	movx	a,@dptr
      00045D FF               [12] 1282 	mov	r7,a
      00045E A8*00            [24] 1283 	mov	r0,_bp
      000460 08               [12] 1284 	inc	r0
      000461 EF               [12] 1285 	mov	a,r7
      000462 26               [12] 1286 	add	a,@r0
      000463 F6               [12] 1287 	mov	@r0,a
                                   1288 ;	life.c:137: UPDN(-1, 1);
      000464 E5*00            [12] 1289 	mov	a,_bp
      000466 24 06            [12] 1290 	add	a,#0x06
      000468 F8               [12] 1291 	mov	r0,a
      000469 74 21            [12] 1292 	mov	a,#0x21
      00046B 26               [12] 1293 	add	a,@r0
      00046C FE               [12] 1294 	mov	r6,a
      00046D E4               [12] 1295 	clr	a
      00046E 08               [12] 1296 	inc	r0
      00046F 36               [12] 1297 	addc	a,@r0
      000470 FF               [12] 1298 	mov	r7,a
      000471 C0 03            [24] 1299 	push	ar3
      000473 C0 02            [24] 1300 	push	ar2
      000475 74 20            [12] 1301 	mov	a,#0x20
      000477 C0 E0            [24] 1302 	push	acc
      000479 E4               [12] 1303 	clr	a
      00047A C0 E0            [24] 1304 	push	acc
      00047C 8E 82            [24] 1305 	mov	dpl,r6
      00047E 8F 83            [24] 1306 	mov	dph,r7
      000480 12r00r00         [24] 1307 	lcall	__modsint
      000483 AE 82            [24] 1308 	mov	r6,dpl
      000485 AF 83            [24] 1309 	mov	r7,dph
      000487 15 81            [12] 1310 	dec	sp
      000489 15 81            [12] 1311 	dec	sp
      00048B D0 02            [24] 1312 	pop	ar2
      00048D D0 03            [24] 1313 	pop	ar3
      00048F D0 04            [24] 1314 	pop	ar4
      000491 D0 05            [24] 1315 	pop	ar5
      000493 EE               [12] 1316 	mov	a,r6
      000494 2A               [12] 1317 	add	a,r2
      000495 FA               [12] 1318 	mov	r2,a
      000496 EF               [12] 1319 	mov	a,r7
      000497 3B               [12] 1320 	addc	a,r3
      000498 FB               [12] 1321 	mov	r3,a
      000499 EA               [12] 1322 	mov	a,r2
      00049A 24r00            [12] 1323 	add	a,#_u
      00049C F5 82            [12] 1324 	mov	dpl,a
      00049E EB               [12] 1325 	mov	a,r3
      00049F 34s08            [12] 1326 	addc	a,#(_u >> 8)
      0004A1 F5 83            [12] 1327 	mov	dph,a
      0004A3 E0               [24] 1328 	movx	a,@dptr
      0004A4 FB               [12] 1329 	mov	r3,a
      0004A5 A8*00            [24] 1330 	mov	r0,_bp
      0004A7 08               [12] 1331 	inc	r0
      0004A8 EB               [12] 1332 	mov	a,r3
      0004A9 26               [12] 1333 	add	a,@r0
      0004AA F6               [12] 1334 	mov	@r0,a
                                   1335 ;	life.c:138: UPDN(0, -1);
      0004AB 78r04            [12] 1336 	mov	r0,#_y
      0004AD E5*00            [12] 1337 	mov	a,_bp
      0004AF 24 0A            [12] 1338 	add	a,#0x0a
      0004B1 F9               [12] 1339 	mov	r1,a
      0004B2 E6               [12] 1340 	mov	a,@r0
      0004B3 F7               [12] 1341 	mov	@r1,a
      0004B4 08               [12] 1342 	inc	r0
      0004B5 09               [12] 1343 	inc	r1
      0004B6 E6               [12] 1344 	mov	a,@r0
      0004B7 F7               [12] 1345 	mov	@r1,a
      0004B8 E5*00            [12] 1346 	mov	a,_bp
      0004BA 24 0A            [12] 1347 	add	a,#0x0a
      0004BC F8               [12] 1348 	mov	r0,a
      0004BD 74 40            [12] 1349 	mov	a,#0x40
      0004BF 26               [12] 1350 	add	a,@r0
      0004C0 FA               [12] 1351 	mov	r2,a
      0004C1 E4               [12] 1352 	clr	a
      0004C2 08               [12] 1353 	inc	r0
      0004C3 36               [12] 1354 	addc	a,@r0
      0004C4 FB               [12] 1355 	mov	r3,a
      0004C5 C0 07            [24] 1356 	push	ar7
      0004C7 C0 06            [24] 1357 	push	ar6
      0004C9 C0 05            [24] 1358 	push	ar5
      0004CB C0 04            [24] 1359 	push	ar4
      0004CD 74 40            [12] 1360 	mov	a,#0x40
      0004CF C0 E0            [24] 1361 	push	acc
      0004D1 E4               [12] 1362 	clr	a
      0004D2 C0 E0            [24] 1363 	push	acc
      0004D4 8A 82            [24] 1364 	mov	dpl,r2
      0004D6 8B 83            [24] 1365 	mov	dph,r3
      0004D8 12r00r00         [24] 1366 	lcall	__modsint
      0004DB AA 82            [24] 1367 	mov	r2,dpl
      0004DD AB 83            [24] 1368 	mov	r3,dph
      0004DF 15 81            [12] 1369 	dec	sp
      0004E1 15 81            [12] 1370 	dec	sp
      0004E3 D0 04            [24] 1371 	pop	ar4
      0004E5 D0 05            [24] 1372 	pop	ar5
      0004E7 D0 06            [24] 1373 	pop	ar6
      0004E9 D0 07            [24] 1374 	pop	ar7
      0004EB E5*00            [12] 1375 	mov	a,_bp
      0004ED 24 0C            [12] 1376 	add	a,#0x0c
      0004EF F8               [12] 1377 	mov	r0,a
      0004F0 A6 02            [24] 1378 	mov	@r0,ar2
      0004F2 EB               [12] 1379 	mov	a,r3
      0004F3 C4               [12] 1380 	swap	a
      0004F4 23               [12] 1381 	rl	a
      0004F5 54 E0            [12] 1382 	anl	a,#0xe0
      0004F7 C6               [12] 1383 	xch	a,@r0
      0004F8 C4               [12] 1384 	swap	a
      0004F9 23               [12] 1385 	rl	a
      0004FA C6               [12] 1386 	xch	a,@r0
      0004FB 66               [12] 1387 	xrl	a,@r0
      0004FC C6               [12] 1388 	xch	a,@r0
      0004FD 54 E0            [12] 1389 	anl	a,#0xe0
      0004FF C6               [12] 1390 	xch	a,@r0
      000500 66               [12] 1391 	xrl	a,@r0
      000501 08               [12] 1392 	inc	r0
      000502 F6               [12] 1393 	mov	@r0,a
      000503 E5*00            [12] 1394 	mov	a,_bp
      000505 24 0C            [12] 1395 	add	a,#0x0c
      000507 F8               [12] 1396 	mov	r0,a
      000508 EC               [12] 1397 	mov	a,r4
      000509 26               [12] 1398 	add	a,@r0
      00050A FA               [12] 1399 	mov	r2,a
      00050B ED               [12] 1400 	mov	a,r5
      00050C 08               [12] 1401 	inc	r0
      00050D 36               [12] 1402 	addc	a,@r0
      00050E FB               [12] 1403 	mov	r3,a
      00050F EA               [12] 1404 	mov	a,r2
      000510 24r00            [12] 1405 	add	a,#_u
      000512 F5 82            [12] 1406 	mov	dpl,a
      000514 EB               [12] 1407 	mov	a,r3
      000515 34s08            [12] 1408 	addc	a,#(_u >> 8)
      000517 F5 83            [12] 1409 	mov	dph,a
      000519 E0               [24] 1410 	movx	a,@dptr
      00051A FB               [12] 1411 	mov	r3,a
      00051B A8*00            [24] 1412 	mov	r0,_bp
      00051D 08               [12] 1413 	inc	r0
      00051E EB               [12] 1414 	mov	a,r3
      00051F 26               [12] 1415 	add	a,@r0
      000520 F6               [12] 1416 	mov	@r0,a
                                   1417 ;	life.c:139: UPDN(0, 0);
      000521 E5*00            [12] 1418 	mov	a,_bp
      000523 24 0C            [12] 1419 	add	a,#0x0c
      000525 F8               [12] 1420 	mov	r0,a
      000526 E5*00            [12] 1421 	mov	a,_bp
      000528 24 08            [12] 1422 	add	a,#0x08
      00052A F9               [12] 1423 	mov	r1,a
      00052B E7               [12] 1424 	mov	a,@r1
      00052C 26               [12] 1425 	add	a,@r0
      00052D FA               [12] 1426 	mov	r2,a
      00052E 09               [12] 1427 	inc	r1
      00052F E7               [12] 1428 	mov	a,@r1
      000530 08               [12] 1429 	inc	r0
      000531 36               [12] 1430 	addc	a,@r0
      000532 FB               [12] 1431 	mov	r3,a
      000533 EA               [12] 1432 	mov	a,r2
      000534 24r00            [12] 1433 	add	a,#_u
      000536 F5 82            [12] 1434 	mov	dpl,a
      000538 EB               [12] 1435 	mov	a,r3
      000539 34s08            [12] 1436 	addc	a,#(_u >> 8)
      00053B F5 83            [12] 1437 	mov	dph,a
      00053D E0               [24] 1438 	movx	a,@dptr
      00053E FB               [12] 1439 	mov	r3,a
      00053F A8*00            [24] 1440 	mov	r0,_bp
      000541 08               [12] 1441 	inc	r0
      000542 EB               [12] 1442 	mov	a,r3
      000543 26               [12] 1443 	add	a,@r0
      000544 F6               [12] 1444 	mov	@r0,a
                                   1445 ;	life.c:140: UPDN(0, 1);
      000545 E5*00            [12] 1446 	mov	a,_bp
      000547 24 0C            [12] 1447 	add	a,#0x0c
      000549 F8               [12] 1448 	mov	r0,a
      00054A EE               [12] 1449 	mov	a,r6
      00054B 26               [12] 1450 	add	a,@r0
      00054C FA               [12] 1451 	mov	r2,a
      00054D EF               [12] 1452 	mov	a,r7
      00054E 08               [12] 1453 	inc	r0
      00054F 36               [12] 1454 	addc	a,@r0
      000550 FB               [12] 1455 	mov	r3,a
      000551 EA               [12] 1456 	mov	a,r2
      000552 24r00            [12] 1457 	add	a,#_u
      000554 F5 82            [12] 1458 	mov	dpl,a
      000556 EB               [12] 1459 	mov	a,r3
      000557 34s08            [12] 1460 	addc	a,#(_u >> 8)
      000559 F5 83            [12] 1461 	mov	dph,a
      00055B E0               [24] 1462 	movx	a,@dptr
      00055C FB               [12] 1463 	mov	r3,a
      00055D A8*00            [24] 1464 	mov	r0,_bp
      00055F 08               [12] 1465 	inc	r0
      000560 E5*00            [12] 1466 	mov	a,_bp
      000562 24 0C            [12] 1467 	add	a,#0x0c
      000564 F9               [12] 1468 	mov	r1,a
      000565 EB               [12] 1469 	mov	a,r3
      000566 26               [12] 1470 	add	a,@r0
      000567 F7               [12] 1471 	mov	@r1,a
                                   1472 ;	life.c:141: UPDN(1, -1);
      000568 E5*00            [12] 1473 	mov	a,_bp
      00056A 24 0A            [12] 1474 	add	a,#0x0a
      00056C F8               [12] 1475 	mov	r0,a
      00056D 74 41            [12] 1476 	mov	a,#0x41
      00056F 26               [12] 1477 	add	a,@r0
      000570 FA               [12] 1478 	mov	r2,a
      000571 E4               [12] 1479 	clr	a
      000572 08               [12] 1480 	inc	r0
      000573 36               [12] 1481 	addc	a,@r0
      000574 FB               [12] 1482 	mov	r3,a
      000575 C0 07            [24] 1483 	push	ar7
      000577 C0 06            [24] 1484 	push	ar6
      000579 C0 05            [24] 1485 	push	ar5
      00057B C0 04            [24] 1486 	push	ar4
      00057D 74 40            [12] 1487 	mov	a,#0x40
      00057F C0 E0            [24] 1488 	push	acc
      000581 E4               [12] 1489 	clr	a
      000582 C0 E0            [24] 1490 	push	acc
      000584 8A 82            [24] 1491 	mov	dpl,r2
      000586 8B 83            [24] 1492 	mov	dph,r3
      000588 12r00r00         [24] 1493 	lcall	__modsint
      00058B AA 82            [24] 1494 	mov	r2,dpl
      00058D AB 83            [24] 1495 	mov	r3,dph
      00058F 15 81            [12] 1496 	dec	sp
      000591 15 81            [12] 1497 	dec	sp
      000593 D0 04            [24] 1498 	pop	ar4
      000595 D0 05            [24] 1499 	pop	ar5
      000597 D0 06            [24] 1500 	pop	ar6
      000599 D0 07            [24] 1501 	pop	ar7
      00059B EB               [12] 1502 	mov	a,r3
      00059C C4               [12] 1503 	swap	a
      00059D 23               [12] 1504 	rl	a
      00059E 54 E0            [12] 1505 	anl	a,#0xe0
      0005A0 CA               [12] 1506 	xch	a,r2
      0005A1 C4               [12] 1507 	swap	a
      0005A2 23               [12] 1508 	rl	a
      0005A3 CA               [12] 1509 	xch	a,r2
      0005A4 6A               [12] 1510 	xrl	a,r2
      0005A5 CA               [12] 1511 	xch	a,r2
      0005A6 54 E0            [12] 1512 	anl	a,#0xe0
      0005A8 CA               [12] 1513 	xch	a,r2
      0005A9 6A               [12] 1514 	xrl	a,r2
      0005AA FB               [12] 1515 	mov	r3,a
      0005AB EC               [12] 1516 	mov	a,r4
      0005AC 2A               [12] 1517 	add	a,r2
      0005AD FC               [12] 1518 	mov	r4,a
      0005AE ED               [12] 1519 	mov	a,r5
      0005AF 3B               [12] 1520 	addc	a,r3
      0005B0 FD               [12] 1521 	mov	r5,a
      0005B1 EC               [12] 1522 	mov	a,r4
      0005B2 24r00            [12] 1523 	add	a,#_u
      0005B4 F5 82            [12] 1524 	mov	dpl,a
      0005B6 ED               [12] 1525 	mov	a,r5
      0005B7 34s08            [12] 1526 	addc	a,#(_u >> 8)
      0005B9 F5 83            [12] 1527 	mov	dph,a
      0005BB E0               [24] 1528 	movx	a,@dptr
      0005BC FD               [12] 1529 	mov	r5,a
      0005BD E5*00            [12] 1530 	mov	a,_bp
      0005BF 24 0C            [12] 1531 	add	a,#0x0c
      0005C1 F8               [12] 1532 	mov	r0,a
      0005C2 E5*00            [12] 1533 	mov	a,_bp
      0005C4 24 0C            [12] 1534 	add	a,#0x0c
      0005C6 F9               [12] 1535 	mov	r1,a
      0005C7 ED               [12] 1536 	mov	a,r5
      0005C8 26               [12] 1537 	add	a,@r0
      0005C9 F7               [12] 1538 	mov	@r1,a
                                   1539 ;	life.c:142: UPDN(1, 0);
      0005CA E5*00            [12] 1540 	mov	a,_bp
      0005CC 24 08            [12] 1541 	add	a,#0x08
      0005CE F8               [12] 1542 	mov	r0,a
      0005CF E6               [12] 1543 	mov	a,@r0
      0005D0 2A               [12] 1544 	add	a,r2
      0005D1 FC               [12] 1545 	mov	r4,a
      0005D2 08               [12] 1546 	inc	r0
      0005D3 E6               [12] 1547 	mov	a,@r0
      0005D4 3B               [12] 1548 	addc	a,r3
      0005D5 FD               [12] 1549 	mov	r5,a
      0005D6 EC               [12] 1550 	mov	a,r4
      0005D7 24r00            [12] 1551 	add	a,#_u
      0005D9 F5 82            [12] 1552 	mov	dpl,a
      0005DB ED               [12] 1553 	mov	a,r5
      0005DC 34s08            [12] 1554 	addc	a,#(_u >> 8)
      0005DE F5 83            [12] 1555 	mov	dph,a
      0005E0 E0               [24] 1556 	movx	a,@dptr
      0005E1 FD               [12] 1557 	mov	r5,a
      0005E2 E5*00            [12] 1558 	mov	a,_bp
      0005E4 24 0C            [12] 1559 	add	a,#0x0c
      0005E6 F8               [12] 1560 	mov	r0,a
      0005E7 ED               [12] 1561 	mov	a,r5
      0005E8 26               [12] 1562 	add	a,@r0
      0005E9 FD               [12] 1563 	mov	r5,a
                                   1564 ;	life.c:143: UPDN(1, 1);
      0005EA 78r10            [12] 1565 	mov	r0,#_dy
      0005EC 76 01            [12] 1566 	mov	@r0,#0x01
      0005EE 08               [12] 1567 	inc	r0
      0005EF 76 00            [12] 1568 	mov	@r0,#0x00
      0005F1 78r0E            [12] 1569 	mov	r0,#_dx
      0005F3 76 01            [12] 1570 	mov	@r0,#0x01
      0005F5 08               [12] 1571 	inc	r0
      0005F6 76 00            [12] 1572 	mov	@r0,#0x00
      0005F8 EE               [12] 1573 	mov	a,r6
      0005F9 2A               [12] 1574 	add	a,r2
      0005FA FE               [12] 1575 	mov	r6,a
      0005FB EF               [12] 1576 	mov	a,r7
      0005FC 3B               [12] 1577 	addc	a,r3
      0005FD FF               [12] 1578 	mov	r7,a
      0005FE EE               [12] 1579 	mov	a,r6
      0005FF 24r00            [12] 1580 	add	a,#_u
      000601 F5 82            [12] 1581 	mov	dpl,a
      000603 EF               [12] 1582 	mov	a,r7
      000604 34s08            [12] 1583 	addc	a,#(_u >> 8)
      000606 F5 83            [12] 1584 	mov	dph,a
      000608 E0               [24] 1585 	movx	a,@dptr
      000609 2D               [12] 1586 	add	a,r5
      00060A FF               [12] 1587 	mov	r7,a
      00060B 78r0B            [12] 1588 	mov	r0,#_n
      00060D A6 07            [24] 1589 	mov	@r0,ar7
                                   1590 ;	life.c:146: nu[A2D(W, y, x)] = (n == 3) || ((n == 2) && u[A2D(W, y, x)]);
      00060F A8*00            [24] 1591 	mov	r0,_bp
      000611 08               [12] 1592 	inc	r0
      000612 08               [12] 1593 	inc	r0
      000613 E6               [12] 1594 	mov	a,@r0
      000614 24r00            [12] 1595 	add	a,#_nu
      000616 FD               [12] 1596 	mov	r5,a
      000617 08               [12] 1597 	inc	r0
      000618 E6               [12] 1598 	mov	a,@r0
      000619 34s10            [12] 1599 	addc	a,#(_nu >> 8)
      00061B FE               [12] 1600 	mov	r6,a
      00061C BF 03 02         [24] 1601 	cjne	r7,#0x03,00359$
      00061F 80 28            [24] 1602 	sjmp	00209$
      000621                       1603 00359$:
      000621 BF 02 21         [24] 1604 	cjne	r7,#0x02,00208$
      000624 E5*00            [12] 1605 	mov	a,_bp
      000626 24 04            [12] 1606 	add	a,#0x04
      000628 F8               [12] 1607 	mov	r0,a
      000629 E5*00            [12] 1608 	mov	a,_bp
      00062B 24 06            [12] 1609 	add	a,#0x06
      00062D F9               [12] 1610 	mov	r1,a
      00062E E7               [12] 1611 	mov	a,@r1
      00062F 26               [12] 1612 	add	a,@r0
      000630 FC               [12] 1613 	mov	r4,a
      000631 09               [12] 1614 	inc	r1
      000632 E7               [12] 1615 	mov	a,@r1
      000633 08               [12] 1616 	inc	r0
      000634 36               [12] 1617 	addc	a,@r0
      000635 FF               [12] 1618 	mov	r7,a
      000636 EC               [12] 1619 	mov	a,r4
      000637 24r00            [12] 1620 	add	a,#_u
      000639 FC               [12] 1621 	mov	r4,a
      00063A EF               [12] 1622 	mov	a,r7
      00063B 34s08            [12] 1623 	addc	a,#(_u >> 8)
      00063D FF               [12] 1624 	mov	r7,a
      00063E 8C 82            [24] 1625 	mov	dpl,r4
      000640 8F 83            [24] 1626 	mov	dph,r7
      000642 E0               [24] 1627 	movx	a,@dptr
      000643 70 04            [24] 1628 	jnz	00209$
      000645                       1629 00208$:
                                   1630 ;	assignBit
      000645 C2*00            [12] 1631 	clr	b0
      000647 80 02            [24] 1632 	sjmp	00210$
      000649                       1633 00209$:
                                   1634 ;	assignBit
      000649 D2*00            [12] 1635 	setb	b0
      00064B                       1636 00210$:
      00064B A2*00            [12] 1637 	mov	c,b0
      00064D E4               [12] 1638 	clr	a
      00064E 33               [12] 1639 	rlc	a
      00064F 8D 82            [24] 1640 	mov	dpl,r5
      000651 8E 83            [24] 1641 	mov	dph,r6
      000653 F0               [24] 1642 	movx	@dptr,a
                                   1643 ;	life.c:147: cycle2 |= pu[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      000654 78r04            [12] 1644 	mov	r0,#_y
      000656 86 06            [24] 1645 	mov	ar6,@r0
      000658 08               [12] 1646 	inc	r0
      000659 E6               [12] 1647 	mov	a,@r0
      00065A C4               [12] 1648 	swap	a
      00065B 23               [12] 1649 	rl	a
      00065C 54 E0            [12] 1650 	anl	a,#0xe0
      00065E CE               [12] 1651 	xch	a,r6
      00065F C4               [12] 1652 	swap	a
      000660 23               [12] 1653 	rl	a
      000661 CE               [12] 1654 	xch	a,r6
      000662 6E               [12] 1655 	xrl	a,r6
      000663 CE               [12] 1656 	xch	a,r6
      000664 54 E0            [12] 1657 	anl	a,#0xe0
      000666 CE               [12] 1658 	xch	a,r6
      000667 6E               [12] 1659 	xrl	a,r6
      000668 FF               [12] 1660 	mov	r7,a
      000669 78r02            [12] 1661 	mov	r0,#_x
      00066B E6               [12] 1662 	mov	a,@r0
      00066C 2E               [12] 1663 	add	a,r6
      00066D FE               [12] 1664 	mov	r6,a
      00066E 08               [12] 1665 	inc	r0
      00066F E6               [12] 1666 	mov	a,@r0
      000670 3F               [12] 1667 	addc	a,r7
      000671 FF               [12] 1668 	mov	r7,a
      000672 EE               [12] 1669 	mov	a,r6
      000673 24r00            [12] 1670 	add	a,#_pu
      000675 F5 82            [12] 1671 	mov	dpl,a
      000677 EF               [12] 1672 	mov	a,r7
      000678 34s00            [12] 1673 	addc	a,#(_pu >> 8)
      00067A F5 83            [12] 1674 	mov	dph,a
      00067C E0               [24] 1675 	movx	a,@dptr
      00067D FD               [12] 1676 	mov	r5,a
      00067E EE               [12] 1677 	mov	a,r6
      00067F 24r00            [12] 1678 	add	a,#_nu
      000681 F5 82            [12] 1679 	mov	dpl,a
      000683 EF               [12] 1680 	mov	a,r7
      000684 34s10            [12] 1681 	addc	a,#(_nu >> 8)
      000686 F5 83            [12] 1682 	mov	dph,a
      000688 E0               [24] 1683 	movx	a,@dptr
      000689 FC               [12] 1684 	mov	r4,a
      00068A 6D               [12] 1685 	xrl	a,r5
      00068B 78r0D            [12] 1686 	mov	r0,#_cycle2
      00068D 46               [12] 1687 	orl	a,@r0
      00068E F6               [12] 1688 	mov	@r0,a
                                   1689 ;	life.c:148: fixed |= u[A2D(W, y, x)] ^ nu[A2D(W, y, x)];
      00068F EE               [12] 1690 	mov	a,r6
      000690 24r00            [12] 1691 	add	a,#_u
      000692 F5 82            [12] 1692 	mov	dpl,a
      000694 EF               [12] 1693 	mov	a,r7
      000695 34s08            [12] 1694 	addc	a,#(_u >> 8)
      000697 F5 83            [12] 1695 	mov	dph,a
      000699 E0               [24] 1696 	movx	a,@dptr
      00069A FF               [12] 1697 	mov	r7,a
      00069B EC               [12] 1698 	mov	a,r4
      00069C 6F               [12] 1699 	xrl	a,r7
      00069D 78r0C            [12] 1700 	mov	r0,#_fixed
      00069F 46               [12] 1701 	orl	a,@r0
      0006A0 F6               [12] 1702 	mov	@r0,a
                                   1703 ;	life.c:127: for (x = 0; x < W; x++) {
      0006A1 78r02            [12] 1704 	mov	r0,#_x
      0006A3 06               [12] 1705 	inc	@r0
      0006A4 B6 00 02         [24] 1706 	cjne	@r0,#0x00,00363$
      0006A7 08               [12] 1707 	inc	r0
      0006A8 06               [12] 1708 	inc	@r0
      0006A9                       1709 00363$:
      0006A9 78r02            [12] 1710 	mov	r0,#_x
      0006AB C3               [12] 1711 	clr	c
      0006AC E6               [12] 1712 	mov	a,@r0
      0006AD 94 20            [12] 1713 	subb	a,#0x20
      0006AF 08               [12] 1714 	inc	r0
      0006B0 E6               [12] 1715 	mov	a,@r0
      0006B1 64 80            [12] 1716 	xrl	a,#0x80
      0006B3 94 80            [12] 1717 	subb	a,#0x80
      0006B5 50 03            [24] 1718 	jnc	00364$
      0006B7 02r03r33         [24] 1719 	ljmp	00196$
      0006BA                       1720 00364$:
                                   1721 ;	life.c:124: for (y = 0; y < H; y++) {
      0006BA 78r04            [12] 1722 	mov	r0,#_y
      0006BC 06               [12] 1723 	inc	@r0
      0006BD B6 00 02         [24] 1724 	cjne	@r0,#0x00,00365$
      0006C0 08               [12] 1725 	inc	r0
      0006C1 06               [12] 1726 	inc	@r0
      0006C2                       1727 00365$:
      0006C2 78r04            [12] 1728 	mov	r0,#_y
      0006C4 C3               [12] 1729 	clr	c
      0006C5 E6               [12] 1730 	mov	a,@r0
      0006C6 94 40            [12] 1731 	subb	a,#0x40
      0006C8 08               [12] 1732 	inc	r0
      0006C9 E6               [12] 1733 	mov	a,@r0
      0006CA 64 80            [12] 1734 	xrl	a,#0x80
      0006CC 94 80            [12] 1735 	subb	a,#0x80
      0006CE 50 03            [24] 1736 	jnc	00366$
      0006D0 02r03r0B         [24] 1737 	ljmp	00198$
      0006D3                       1738 00366$:
                                   1739 ;	life.c:152: cycle2 = !cycle2;
      0006D3 78r0D            [12] 1740 	mov	r0,#_cycle2
      0006D5 E6               [12] 1741 	mov	a,@r0
      0006D6 B4 01 00         [24] 1742 	cjne	a,#0x01,00367$
      0006D9                       1743 00367$:
      0006D9 92*00            [24] 1744 	mov	b0,c
      0006DB 78r0D            [12] 1745 	mov	r0,#_cycle2
      0006DD E4               [12] 1746 	clr	a
      0006DE 33               [12] 1747 	rlc	a
      0006DF F6               [12] 1748 	mov	@r0,a
                                   1749 ;	life.c:153: fixed = !fixed;
      0006E0 78r0C            [12] 1750 	mov	r0,#_fixed
      0006E2 E6               [12] 1751 	mov	a,@r0
      0006E3 B4 01 00         [24] 1752 	cjne	a,#0x01,00368$
      0006E6                       1753 00368$:
      0006E6 92*00            [24] 1754 	mov	b0,c
      0006E8 78r0C            [12] 1755 	mov	r0,#_fixed
      0006EA E4               [12] 1756 	clr	a
      0006EB 33               [12] 1757 	rlc	a
      0006EC F6               [12] 1758 	mov	@r0,a
                                   1759 ;	life.c:155: memcpy(pu, u, sizeof (u));
      0006ED E4               [12] 1760 	clr	a
      0006EE C0 E0            [24] 1761 	push	acc
      0006F0 74 08            [12] 1762 	mov	a,#0x08
      0006F2 C0 E0            [24] 1763 	push	acc
      0006F4 74r00            [12] 1764 	mov	a,#_u
      0006F6 C0 E0            [24] 1765 	push	acc
      0006F8 74s08            [12] 1766 	mov	a,#(_u >> 8)
      0006FA C0 E0            [24] 1767 	push	acc
      0006FC E4               [12] 1768 	clr	a
      0006FD C0 E0            [24] 1769 	push	acc
      0006FF 90r00r00         [24] 1770 	mov	dptr,#_pu
      000702 75 F0 00         [24] 1771 	mov	b,#0x00
      000705 12r00r00         [24] 1772 	lcall	___memcpy
      000708 E5 81            [12] 1773 	mov	a,sp
      00070A 24 FB            [12] 1774 	add	a,#0xfb
      00070C F5 81            [12] 1775 	mov	sp,a
                                   1776 ;	life.c:156: memcpy(u, nu, sizeof (nu));
      00070E E4               [12] 1777 	clr	a
      00070F C0 E0            [24] 1778 	push	acc
      000711 74 08            [12] 1779 	mov	a,#0x08
      000713 C0 E0            [24] 1780 	push	acc
      000715 74r00            [12] 1781 	mov	a,#_nu
      000717 C0 E0            [24] 1782 	push	acc
      000719 74s10            [12] 1783 	mov	a,#(_nu >> 8)
      00071B C0 E0            [24] 1784 	push	acc
      00071D E4               [12] 1785 	clr	a
      00071E C0 E0            [24] 1786 	push	acc
      000720 90r08r00         [24] 1787 	mov	dptr,#_u
      000723 75 F0 00         [24] 1788 	mov	b,#0x00
      000726 12r00r00         [24] 1789 	lcall	___memcpy
      000729 E5 81            [12] 1790 	mov	a,sp
      00072B 24 FB            [12] 1791 	add	a,#0xfb
      00072D F5 81            [12] 1792 	mov	sp,a
                                   1793 ;	life.c:194: if (fixed || cycle2) {
      00072F 78r0C            [12] 1794 	mov	r0,#_fixed
      000731 E6               [12] 1795 	mov	a,@r0
      000732 70 08            [24] 1796 	jnz	00126$
      000734 78r0D            [12] 1797 	mov	r0,#_cycle2
      000736 E6               [12] 1798 	mov	a,@r0
      000737 70 03            [24] 1799 	jnz	00370$
      000739 02r02rE3         [24] 1800 	ljmp	00202$
      00073C                       1801 00370$:
      00073C                       1802 00126$:
                                   1803 ;	life.c:195: printstr("DONE ");
      00073C 90r00r35         [24] 1804 	mov	dptr,#___str_6
      00073F 75 F0 80         [24] 1805 	mov	b,#0x80
      000742 12r00r00         [24] 1806 	lcall	_printstr
                                   1807 ;	life.c:196: if (fixed) printstr("FIXED\r\n");
      000745 78r0C            [12] 1808 	mov	r0,#_fixed
      000747 E6               [12] 1809 	mov	a,@r0
      000748 60 0B            [24] 1810 	jz	00124$
      00074A 90r00r3B         [24] 1811 	mov	dptr,#___str_7
      00074D 75 F0 80         [24] 1812 	mov	b,#0x80
      000750 12r00r00         [24] 1813 	lcall	_printstr
      000753 80 09            [24] 1814 	sjmp	00125$
      000755                       1815 00124$:
                                   1816 ;	life.c:197: else printstr("CYCLE2\r\n");
      000755 90r00r43         [24] 1817 	mov	dptr,#___str_8
      000758 75 F0 80         [24] 1818 	mov	b,#0x80
      00075B 12r00r00         [24] 1819 	lcall	_printstr
      00075E                       1820 00125$:
                                   1821 ;	life.c:198: (void)getchar();
      00075E 12r00r00         [24] 1822 	lcall	_getchar
                                   1823 ;	life.c:199: break;
      000761                       1824 00129$:
                                   1825 ;	life.c:203: if (i1) {
      000761 78r01            [12] 1826 	mov	r0,#_i1
      000763 E6               [12] 1827 	mov	a,@r0
      000764 60 0C            [24] 1828 	jz	00205$
                                   1829 ;	life.c:204: printstr("BREAK\r\n");
      000766 90r00r4C         [24] 1830 	mov	dptr,#___str_9
      000769 75 F0 80         [24] 1831 	mov	b,#0x80
      00076C 12r00r00         [24] 1832 	lcall	_printstr
                                   1833 ;	life.c:205: (void)getchar();
      00076F 12r00r00         [24] 1834 	lcall	_getchar
      000772                       1835 00205$:
                                   1836 ;	life.c:168: for (i0 = 0; !i0; ) {		
      000772 78r00            [12] 1837 	mov	r0,#_i0
      000774 E6               [12] 1838 	mov	a,@r0
      000775 70 03            [24] 1839 	jnz	00373$
      000777 02r01r19         [24] 1840 	ljmp	00204$
      00077A                       1841 00373$:
                                   1842 ;	life.c:209: terminate:
      00077A                       1843 00133$:
                                   1844 ;	life.c:210: EA = 0;
                                   1845 ;	assignBit
      00077A C2 AF            [12] 1846 	clr	_EA
                                   1847 ;	life.c:211: printstr("TERM\r\n");
      00077C 90r00r54         [24] 1848 	mov	dptr,#___str_10
      00077F 75 F0 80         [24] 1849 	mov	b,#0x80
      000782 12r00r00         [24] 1850 	lcall	_printstr
                                   1851 ;	life.c:212: (void)getchar();
      000785 12r00r00         [24] 1852 	lcall	_getchar
                                   1853 ;	life.c:214: PCON |= 2;
      000788 43 87 02         [24] 1854 	orl	_PCON,#0x02
                                   1855 ;	life.c:216: return;
                                   1856 ;	life.c:217: }
      00078B 85*00 81         [24] 1857 	mov	sp,_bp
      00078E D0*00            [24] 1858 	pop	_bp
      000790 22               [24] 1859 	ret
                                   1860 	.area CSEG    (CODE)
                                   1861 	.area CONST   (CODE)
                                   1862 	.area CONST   (CODE)
      000000                       1863 ___str_0:
      000000 1B                    1864 	.db 0x1b
      000001 5B 32 4A              1865 	.ascii "[2J"
      000004 1B                    1866 	.db 0x1b
      000005 5B 6D 47 45 4E 20     1867 	.ascii "[mGEN "
      00000B 00                    1868 	.db 0x00
                                   1869 	.area CSEG    (CODE)
                                   1870 	.area CONST   (CODE)
      00000C                       1871 ___str_1:
      00000C 0D                    1872 	.db 0x0d
      00000D 0A                    1873 	.db 0x0a
      00000E 00                    1874 	.db 0x00
                                   1875 	.area CSEG    (CODE)
                                   1876 	.area CONST   (CODE)
      00000F                       1877 ___str_2:
      00000F 4C 4F 41 44 20 3C     1878 	.ascii "LOAD <"
      000015 00                    1879 	.db 0x00
                                   1880 	.area CSEG    (CODE)
                                   1881 	.area CONST   (CODE)
      000016                       1882 ___str_3:
      000016 3E                    1883 	.ascii ">"
      000017 0D                    1884 	.db 0x0d
      000018 0A                    1885 	.db 0x0a
      000019 00                    1886 	.db 0x00
                                   1887 	.area CSEG    (CODE)
                                   1888 	.area CONST   (CODE)
      00001A                       1889 ___str_4:
      00001A 1B                    1890 	.db 0x1b
      00001B 5B 32 4A              1891 	.ascii "[2J"
      00001E 1B                    1892 	.db 0x1b
      00001F 5B 6D 4C 49 46 45 20  1893 	.ascii "[mLIFE INIT"
             49 4E 49 54
      00002A 0D                    1894 	.db 0x0d
      00002B 0A                    1895 	.db 0x0a
      00002C 00                    1896 	.db 0x00
                                   1897 	.area CSEG    (CODE)
                                   1898 	.area CONST   (CODE)
      00002D                       1899 ___str_5:
      00002D 52 45 41 44 59        1900 	.ascii "READY"
      000032 0D                    1901 	.db 0x0d
      000033 0A                    1902 	.db 0x0a
      000034 00                    1903 	.db 0x00
                                   1904 	.area CSEG    (CODE)
                                   1905 	.area CONST   (CODE)
      000035                       1906 ___str_6:
      000035 44 4F 4E 45 20        1907 	.ascii "DONE "
      00003A 00                    1908 	.db 0x00
                                   1909 	.area CSEG    (CODE)
                                   1910 	.area CONST   (CODE)
      00003B                       1911 ___str_7:
      00003B 46 49 58 45 44        1912 	.ascii "FIXED"
      000040 0D                    1913 	.db 0x0d
      000041 0A                    1914 	.db 0x0a
      000042 00                    1915 	.db 0x00
                                   1916 	.area CSEG    (CODE)
                                   1917 	.area CONST   (CODE)
      000043                       1918 ___str_8:
      000043 43 59 43 4C 45 32     1919 	.ascii "CYCLE2"
      000049 0D                    1920 	.db 0x0d
      00004A 0A                    1921 	.db 0x0a
      00004B 00                    1922 	.db 0x00
                                   1923 	.area CSEG    (CODE)
                                   1924 	.area CONST   (CODE)
      00004C                       1925 ___str_9:
      00004C 42 52 45 41 4B        1926 	.ascii "BREAK"
      000051 0D                    1927 	.db 0x0d
      000052 0A                    1928 	.db 0x0a
      000053 00                    1929 	.db 0x00
                                   1930 	.area CSEG    (CODE)
                                   1931 	.area CONST   (CODE)
      000054                       1932 ___str_10:
      000054 54 45 52 4D           1933 	.ascii "TERM"
      000058 0D                    1934 	.db 0x0d
      000059 0A                    1935 	.db 0x0a
      00005A 00                    1936 	.db 0x00
                                   1937 	.area CSEG    (CODE)
                                   1938 	.area XINIT   (CODE)
                                   1939 	.area CABS    (ABS,CODE)
