                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module crc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _printf
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _FL
                                     21 	.globl _P
                                     22 	.globl _TF2
                                     23 	.globl _EXF2
                                     24 	.globl _RCLK
                                     25 	.globl _TCLK
                                     26 	.globl _EXEN2
                                     27 	.globl _TR2
                                     28 	.globl _C_T2
                                     29 	.globl _CP_RL2
                                     30 	.globl _T2CON_7
                                     31 	.globl _T2CON_6
                                     32 	.globl _T2CON_5
                                     33 	.globl _T2CON_4
                                     34 	.globl _T2CON_3
                                     35 	.globl _T2CON_2
                                     36 	.globl _T2CON_1
                                     37 	.globl _T2CON_0
                                     38 	.globl _PT2
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ET2
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _T2EX
                                     84 	.globl _T2
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _B
                                    110 	.globl _A
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _TH2
                                    114 	.globl _TL2
                                    115 	.globl _RCAP2H
                                    116 	.globl _RCAP2L
                                    117 	.globl _T2MOD
                                    118 	.globl _T2CON
                                    119 	.globl _IP
                                    120 	.globl _P3
                                    121 	.globl _IE
                                    122 	.globl _P2
                                    123 	.globl _SBUF
                                    124 	.globl _SCON
                                    125 	.globl _P1
                                    126 	.globl _TH1
                                    127 	.globl _TH0
                                    128 	.globl _TL1
                                    129 	.globl _TL0
                                    130 	.globl _TMOD
                                    131 	.globl _TCON
                                    132 	.globl _PCON
                                    133 	.globl _DPH
                                    134 	.globl _DPL
                                    135 	.globl _SP
                                    136 	.globl _P0
                                    137 	.globl _bitp
                                    138 	.globl _crc
                                    139 	.globl _off
                                    140 	.globl _len
                                    141 	.globl _t
                                    142 	.globl _base
                                    143 	.globl _intr
                                    144 	.globl _putchar
                                    145 	.globl _getchar
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000C8   169 _T2CON	=	0x00c8
                           0000C9   170 _T2MOD	=	0x00c9
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                           0000D0   175 _PSW	=	0x00d0
                           0000E0   176 _ACC	=	0x00e0
                           0000E0   177 _A	=	0x00e0
                           0000F0   178 _B	=	0x00f0
                                    179 ;--------------------------------------------------------
                                    180 ; special function bits
                                    181 ;--------------------------------------------------------
                                    182 	.area RSEG    (ABS,DATA)
      000000                        183 	.org 0x0000
                           000080   184 _P0_0	=	0x0080
                           000081   185 _P0_1	=	0x0081
                           000082   186 _P0_2	=	0x0082
                           000083   187 _P0_3	=	0x0083
                           000084   188 _P0_4	=	0x0084
                           000085   189 _P0_5	=	0x0085
                           000086   190 _P0_6	=	0x0086
                           000087   191 _P0_7	=	0x0087
                           000088   192 _IT0	=	0x0088
                           000089   193 _IE0	=	0x0089
                           00008A   194 _IT1	=	0x008a
                           00008B   195 _IE1	=	0x008b
                           00008C   196 _TR0	=	0x008c
                           00008D   197 _TF0	=	0x008d
                           00008E   198 _TR1	=	0x008e
                           00008F   199 _TF1	=	0x008f
                           000090   200 _P1_0	=	0x0090
                           000091   201 _P1_1	=	0x0091
                           000092   202 _P1_2	=	0x0092
                           000093   203 _P1_3	=	0x0093
                           000094   204 _P1_4	=	0x0094
                           000095   205 _P1_5	=	0x0095
                           000096   206 _P1_6	=	0x0096
                           000097   207 _P1_7	=	0x0097
                           000090   208 _T2	=	0x0090
                           000091   209 _T2EX	=	0x0091
                           000098   210 _RI	=	0x0098
                           000099   211 _TI	=	0x0099
                           00009A   212 _RB8	=	0x009a
                           00009B   213 _TB8	=	0x009b
                           00009C   214 _REN	=	0x009c
                           00009D   215 _SM2	=	0x009d
                           00009E   216 _SM1	=	0x009e
                           00009F   217 _SM0	=	0x009f
                           0000A0   218 _P2_0	=	0x00a0
                           0000A1   219 _P2_1	=	0x00a1
                           0000A2   220 _P2_2	=	0x00a2
                           0000A3   221 _P2_3	=	0x00a3
                           0000A4   222 _P2_4	=	0x00a4
                           0000A5   223 _P2_5	=	0x00a5
                           0000A6   224 _P2_6	=	0x00a6
                           0000A7   225 _P2_7	=	0x00a7
                           0000A8   226 _EX0	=	0x00a8
                           0000A9   227 _ET0	=	0x00a9
                           0000AA   228 _EX1	=	0x00aa
                           0000AB   229 _ET1	=	0x00ab
                           0000AC   230 _ES	=	0x00ac
                           0000AD   231 _ET2	=	0x00ad
                           0000AF   232 _EA	=	0x00af
                           0000B0   233 _P3_0	=	0x00b0
                           0000B1   234 _P3_1	=	0x00b1
                           0000B2   235 _P3_2	=	0x00b2
                           0000B3   236 _P3_3	=	0x00b3
                           0000B4   237 _P3_4	=	0x00b4
                           0000B5   238 _P3_5	=	0x00b5
                           0000B6   239 _P3_6	=	0x00b6
                           0000B7   240 _P3_7	=	0x00b7
                           0000B0   241 _RXD	=	0x00b0
                           0000B1   242 _TXD	=	0x00b1
                           0000B2   243 _INT0	=	0x00b2
                           0000B3   244 _INT1	=	0x00b3
                           0000B4   245 _T0	=	0x00b4
                           0000B5   246 _T1	=	0x00b5
                           0000B6   247 _WR	=	0x00b6
                           0000B7   248 _RD	=	0x00b7
                           0000B8   249 _PX0	=	0x00b8
                           0000B9   250 _PT0	=	0x00b9
                           0000BA   251 _PX1	=	0x00ba
                           0000BB   252 _PT1	=	0x00bb
                           0000BC   253 _PS	=	0x00bc
                           0000BD   254 _PT2	=	0x00bd
                           0000C8   255 _T2CON_0	=	0x00c8
                           0000C9   256 _T2CON_1	=	0x00c9
                           0000CA   257 _T2CON_2	=	0x00ca
                           0000CB   258 _T2CON_3	=	0x00cb
                           0000CC   259 _T2CON_4	=	0x00cc
                           0000CD   260 _T2CON_5	=	0x00cd
                           0000CE   261 _T2CON_6	=	0x00ce
                           0000CF   262 _T2CON_7	=	0x00cf
                           0000C8   263 _CP_RL2	=	0x00c8
                           0000C9   264 _C_T2	=	0x00c9
                           0000CA   265 _TR2	=	0x00ca
                           0000CB   266 _EXEN2	=	0x00cb
                           0000CC   267 _TCLK	=	0x00cc
                           0000CD   268 _RCLK	=	0x00cd
                           0000CE   269 _EXF2	=	0x00ce
                           0000CF   270 _TF2	=	0x00cf
                           0000D0   271 _P	=	0x00d0
                           0000D1   272 _FL	=	0x00d1
                           0000D2   273 _OV	=	0x00d2
                           0000D3   274 _RS0	=	0x00d3
                           0000D4   275 _RS1	=	0x00d4
                           0000D5   276 _F0	=	0x00d5
                           0000D6   277 _AC	=	0x00d6
                           0000D7   278 _CY	=	0x00d7
                                    279 ;--------------------------------------------------------
                                    280 ; overlayable register banks
                                    281 ;--------------------------------------------------------
                                    282 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable bit register bank
                                    288 ;--------------------------------------------------------
                                    289 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        290 bits:
      000000                        291 	.ds 1
                           008000   292 	b0 = bits[0]
                           008100   293 	b1 = bits[1]
                           008200   294 	b2 = bits[2]
                           008300   295 	b3 = bits[3]
                           008400   296 	b4 = bits[4]
                           008500   297 	b5 = bits[5]
                           008600   298 	b6 = bits[6]
                           008700   299 	b7 = bits[7]
                                    300 ;--------------------------------------------------------
                                    301 ; internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area DSEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; overlayable items in internal ram 
                                    306 ;--------------------------------------------------------
                                    307 ;--------------------------------------------------------
                                    308 ; Stack segment in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 	.area	SSEG
      000000                        311 __start__stack:
      000000                        312 	.ds	1
                                    313 
                                    314 ;--------------------------------------------------------
                                    315 ; indirectly addressable internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area ISEG    (DATA)
      000000                        318 _intr::
      000000                        319 	.ds 1
      000001                        320 _base::
      000001                        321 	.ds 2
      000003                        322 _t::
      000003                        323 	.ds 2
      000005                        324 _len::
      000005                        325 	.ds 2
      000007                        326 _off::
      000007                        327 	.ds 2
      000009                        328 _crc::
      000009                        329 	.ds 2
      00000B                        330 _bitp::
      00000B                        331 	.ds 1
                                    332 ;--------------------------------------------------------
                                    333 ; absolute internal ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area IABS    (ABS,DATA)
                                    336 	.area IABS    (ABS,DATA)
                                    337 ;--------------------------------------------------------
                                    338 ; bit data
                                    339 ;--------------------------------------------------------
                                    340 	.area BSEG    (BIT)
                                    341 ;--------------------------------------------------------
                                    342 ; paged external ram data
                                    343 ;--------------------------------------------------------
                                    344 	.area PSEG    (PAG,XDATA)
                                    345 ;--------------------------------------------------------
                                    346 ; external ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area XSEG    (XDATA)
                                    349 ;--------------------------------------------------------
                                    350 ; absolute external ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area XABS    (ABS,XDATA)
                                    353 ;--------------------------------------------------------
                                    354 ; external initialized ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area XISEG   (XDATA)
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT0 (CODE)
                                    359 	.area GSINIT1 (CODE)
                                    360 	.area GSINIT2 (CODE)
                                    361 	.area GSINIT3 (CODE)
                                    362 	.area GSINIT4 (CODE)
                                    363 	.area GSINIT5 (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.area GSFINAL (CODE)
                                    366 	.area CSEG    (CODE)
                                    367 ;--------------------------------------------------------
                                    368 ; interrupt vector 
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
      000000                        371 __interrupt_vect:
      000000 02r00r00         [24]  372 	ljmp	__sdcc_gsinit_startup
      000003 02r00r0E         [24]  373 	ljmp	_int0
                                    374 ;--------------------------------------------------------
                                    375 ; global & static initialisations
                                    376 ;--------------------------------------------------------
                                    377 	.area HOME    (CODE)
                                    378 	.area GSINIT  (CODE)
                                    379 	.area GSFINAL (CODE)
                                    380 	.area GSINIT  (CODE)
                                    381 	.globl __sdcc_gsinit_startup
                                    382 	.globl __sdcc_program_startup
                                    383 	.globl __start__stack
                                    384 	.globl __mcs51_genXINIT
                                    385 	.globl __mcs51_genXRAMCLEAR
                                    386 	.globl __mcs51_genRAMCLEAR
                                    387 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  388 	ljmp	__sdcc_program_startup
                                    389 ;--------------------------------------------------------
                                    390 ; Home
                                    391 ;--------------------------------------------------------
                                    392 	.area HOME    (CODE)
                                    393 	.area HOME    (CODE)
      000006                        394 __sdcc_program_startup:
      000006 02r00r1A         [24]  395 	ljmp	_main
                                    396 ;	return from main will return to caller
                                    397 ;--------------------------------------------------------
                                    398 ; code
                                    399 ;--------------------------------------------------------
                                    400 	.area CSEG    (CODE)
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'putchar'
                                    403 ;------------------------------------------------------------
                                    404 ;c                         Allocated to registers 
                                    405 ;------------------------------------------------------------
                                    406 ;	crc16.c:8: int putchar(int c) __naked {
                                    407 ;	-----------------------------------------
                                    408 ;	 function putchar
                                    409 ;	-----------------------------------------
      000000                        410 _putchar:
                                    411 ;	naked function: no prologue.
                                    412 ;	crc16.c:13: __endasm;
      000000 E5 82            [12]  413 	mov	a, dpl
      000002 02 00 30         [24]  414 	ljmp	0x0030
                                    415 ;	crc16.c:14: }
                                    416 ;	naked function: no epilogue.
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'getchar'
                                    419 ;------------------------------------------------------------
                                    420 ;	crc16.c:16: int getchar(void) __naked {
                                    421 ;	-----------------------------------------
                                    422 ;	 function getchar
                                    423 ;	-----------------------------------------
      000005                        424 _getchar:
                                    425 ;	naked function: no prologue.
                                    426 ;	crc16.c:22: __endasm;
      000005 12 00 32         [24]  427 	lcall	0x0032
      000008 F5 82            [12]  428 	mov	dpl, a
      00000A 75 83 00         [24]  429 	mov	dph, #0
      00000D 22               [24]  430 	ret
                                    431 ;	crc16.c:23: }
                                    432 ;	naked function: no epilogue.
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'int0'
                                    435 ;------------------------------------------------------------
                                    436 ;	crc16.c:46: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    437 ;	-----------------------------------------
                                    438 ;	 function int0
                                    439 ;	-----------------------------------------
      00000E                        440 _int0:
                           00000F   441 	ar7 = 0x0f
                           00000E   442 	ar6 = 0x0e
                           00000D   443 	ar5 = 0x0d
                           00000C   444 	ar4 = 0x0c
                           00000B   445 	ar3 = 0x0b
                           00000A   446 	ar2 = 0x0a
                           000009   447 	ar1 = 0x09
                           000008   448 	ar0 = 0x08
      00000E C0 D0            [24]  449 	push	psw
      000010 75 D0 08         [24]  450 	mov	psw,#0x08
                                    451 ;	crc16.c:47: intr = 1u;
      000013 78r00            [12]  452 	mov	r0,#_intr
      000015 76 01            [12]  453 	mov	@r0,#0x01
                                    454 ;	crc16.c:48: }
      000017 D0 D0            [24]  455 	pop	psw
      000019 32               [24]  456 	reti
                                    457 ;	eliminated unneeded push/pop dpl
                                    458 ;	eliminated unneeded push/pop dph
                                    459 ;	eliminated unneeded push/pop b
                                    460 ;	eliminated unneeded push/pop acc
                                    461 ;------------------------------------------------------------
                                    462 ;Allocation info for local variables in function 'main'
                                    463 ;------------------------------------------------------------
                                    464 ;	crc16.c:57: void main(void) {
                                    465 ;	-----------------------------------------
                                    466 ;	 function main
                                    467 ;	-----------------------------------------
      00001A                        468 _main:
                           000007   469 	ar7 = 0x07
                           000006   470 	ar6 = 0x06
                           000005   471 	ar5 = 0x05
                           000004   472 	ar4 = 0x04
                           000003   473 	ar3 = 0x03
                           000002   474 	ar2 = 0x02
                           000001   475 	ar1 = 0x01
                           000000   476 	ar0 = 0x00
                                    477 ;	crc16.c:58: intr = 0u;
      00001A 78r00            [12]  478 	mov	r0,#_intr
      00001C 76 00            [12]  479 	mov	@r0,#0x00
                                    480 ;	crc16.c:60: IT0 = 1;
                                    481 ;	assignBit
      00001E D2 88            [12]  482 	setb	_IT0
                                    483 ;	crc16.c:61: EX0 = 1;	
                                    484 ;	assignBit
      000020 D2 A8            [12]  485 	setb	_EX0
                                    486 ;	crc16.c:62: EA = 1;
                                    487 ;	assignBit
      000022 D2 AF            [12]  488 	setb	_EA
                                    489 ;	crc16.c:64: while (!intr) {
      000024                        490 00131$:
      000024 78r00            [12]  491 	mov	r0,#_intr
      000026 E6               [12]  492 	mov	a,@r0
      000027 60 03            [24]  493 	jz	00210$
      000029 02r02r86         [24]  494 	ljmp	00133$
      00002C                        495 00210$:
                                    496 ;	crc16.c:65: base = (pxd_uint8_t)0x0u;
      00002C 78r01            [12]  497 	mov	r0,#_base
      00002E E4               [12]  498 	clr	a
      00002F F6               [12]  499 	mov	@r0,a
      000030 08               [12]  500 	inc	r0
      000031 F6               [12]  501 	mov	@r0,a
                                    502 ;	crc16.c:66: len = TLEN;
      000032 78r05            [12]  503 	mov	r0,#_len
      000034 76 FF            [12]  504 	mov	@r0,#0xff
      000036 08               [12]  505 	inc	r0
      000037 76 FF            [12]  506 	mov	@r0,#0xff
                                    507 ;	crc16.c:67: printf("COMPLETE base=%p ", base);
      000039 78r01            [12]  508 	mov	r0,#_base
      00003B 86 05            [24]  509 	mov	ar5,@r0
      00003D 08               [12]  510 	inc	r0
      00003E 86 06            [24]  511 	mov	ar6,@r0
      000040 7F 00            [12]  512 	mov	r7,#0x00
      000042 C0 05            [24]  513 	push	ar5
      000044 C0 06            [24]  514 	push	ar6
      000046 C0 07            [24]  515 	push	ar7
      000048 74r00            [12]  516 	mov	a,#___str_0
      00004A C0 E0            [24]  517 	push	acc
      00004C 74s00            [12]  518 	mov	a,#(___str_0 >> 8)
      00004E C0 E0            [24]  519 	push	acc
      000050 74 80            [12]  520 	mov	a,#0x80
      000052 C0 E0            [24]  521 	push	acc
      000054 12r00r00         [24]  522 	lcall	_printf
      000057 E5 81            [12]  523 	mov	a,sp
      000059 24 FA            [12]  524 	add	a,#0xfa
      00005B F5 81            [12]  525 	mov	sp,a
                                    526 ;	crc16.c:68: printf("len=0x%04x ", len);
      00005D 78r05            [12]  527 	mov	r0,#_len
      00005F E6               [12]  528 	mov	a,@r0
      000060 C0 E0            [24]  529 	push	acc
      000062 08               [12]  530 	inc	r0
      000063 E6               [12]  531 	mov	a,@r0
      000064 C0 E0            [24]  532 	push	acc
      000066 74r12            [12]  533 	mov	a,#___str_1
      000068 C0 E0            [24]  534 	push	acc
      00006A 74s00            [12]  535 	mov	a,#(___str_1 >> 8)
      00006C C0 E0            [24]  536 	push	acc
      00006E 74 80            [12]  537 	mov	a,#0x80
      000070 C0 E0            [24]  538 	push	acc
      000072 12r00r00         [24]  539 	lcall	_printf
      000075 E5 81            [12]  540 	mov	a,sp
      000077 24 FB            [12]  541 	add	a,#0xfb
      000079 F5 81            [12]  542 	mov	sp,a
                                    543 ;	crc16.c:69: CCRCB_INIT(crc);
      00007B 78r09            [12]  544 	mov	r0,#_crc
      00007D 76 FF            [12]  545 	mov	@r0,#0xff
      00007F 08               [12]  546 	inc	r0
      000080 76 FF            [12]  547 	mov	@r0,#0xff
                                    548 ;	crc16.c:70: for (off = 0u; off < len; off++)
      000082 78r07            [12]  549 	mov	r0,#_off
      000084 E4               [12]  550 	clr	a
      000085 F6               [12]  551 	mov	@r0,a
      000086 08               [12]  552 	inc	r0
      000087 F6               [12]  553 	mov	@r0,a
      000088                        554 00137$:
      000088 78r07            [12]  555 	mov	r0,#_off
      00008A 79r05            [12]  556 	mov	r1,#_len
      00008C C3               [12]  557 	clr	c
      00008D E6               [12]  558 	mov	a,@r0
      00008E 97               [12]  559 	subb	a,@r1
      00008F 08               [12]  560 	inc	r0
      000090 E6               [12]  561 	mov	a,@r0
      000091 09               [12]  562 	inc	r1
      000092 97               [12]  563 	subb	a,@r1
      000093 50 6F            [24]  564 	jnc	00109$
                                    565 ;	crc16.c:71: CCRCB(crc, base[off], bitp);
      000095 78r0B            [12]  566 	mov	r0,#_bitp
      000097 76 80            [12]  567 	mov	@r0,#0x80
      000099                        568 00134$:
      000099 78r0A            [12]  569 	mov	r0,#(_crc + 1)
      00009B E6               [12]  570 	mov	a,@r0
      00009C 23               [12]  571 	rl	a
      00009D 54 01            [12]  572 	anl	a,#0x01
      00009F FE               [12]  573 	mov	r6,a
      0000A0 7F 00            [12]  574 	mov	r7,#0x00
      0000A2 78r01            [12]  575 	mov	r0,#_base
      0000A4 79r07            [12]  576 	mov	r1,#_off
      0000A6 E7               [12]  577 	mov	a,@r1
      0000A7 26               [12]  578 	add	a,@r0
      0000A8 F5 82            [12]  579 	mov	dpl,a
      0000AA 09               [12]  580 	inc	r1
      0000AB E7               [12]  581 	mov	a,@r1
      0000AC 08               [12]  582 	inc	r0
      0000AD 36               [12]  583 	addc	a,@r0
      0000AE F5 83            [12]  584 	mov	dph,a
      0000B0 E0               [24]  585 	movx	a,@dptr
      0000B1 FD               [12]  586 	mov	r5,a
      0000B2 78r0B            [12]  587 	mov	r0,#_bitp
      0000B4 E6               [12]  588 	mov	a,@r0
      0000B5 52 05            [12]  589 	anl	ar5,a
      0000B7 ED               [12]  590 	mov	a,r5
      0000B8 B4 01 00         [24]  591 	cjne	a,#0x01,00212$
      0000BB                        592 00212$:
      0000BB B3               [12]  593 	cpl	c
      0000BC 92*00            [24]  594 	mov	b0,c
      0000BE E4               [12]  595 	clr	a
      0000BF 33               [12]  596 	rlc	a
      0000C0 FC               [12]  597 	mov	r4,a
      0000C1 7D 00            [12]  598 	mov	r5,#0x00
      0000C3 62 06            [12]  599 	xrl	ar6,a
      0000C5 ED               [12]  600 	mov	a,r5
      0000C6 62 07            [12]  601 	xrl	ar7,a
      0000C8 EE               [12]  602 	mov	a,r6
      0000C9 4F               [12]  603 	orl	a,r7
      0000CA 60 12            [24]  604 	jz	00146$
      0000CC 78r09            [12]  605 	mov	r0,#_crc
      0000CE E6               [12]  606 	mov	a,@r0
      0000CF 25 E0            [12]  607 	add	a,acc
      0000D1 FE               [12]  608 	mov	r6,a
      0000D2 08               [12]  609 	inc	r0
      0000D3 E6               [12]  610 	mov	a,@r0
      0000D4 33               [12]  611 	rlc	a
      0000D5 FF               [12]  612 	mov	r7,a
      0000D6 63 06 21         [24]  613 	xrl	ar6,#0x21
      0000D9 63 07 10         [24]  614 	xrl	ar7,#0x10
      0000DC 80 0A            [24]  615 	sjmp	00147$
      0000DE                        616 00146$:
      0000DE 78r09            [12]  617 	mov	r0,#_crc
      0000E0 E6               [12]  618 	mov	a,@r0
      0000E1 25 E0            [12]  619 	add	a,acc
      0000E3 FE               [12]  620 	mov	r6,a
      0000E4 08               [12]  621 	inc	r0
      0000E5 E6               [12]  622 	mov	a,@r0
      0000E6 33               [12]  623 	rlc	a
      0000E7 FF               [12]  624 	mov	r7,a
      0000E8                        625 00147$:
      0000E8 78r09            [12]  626 	mov	r0,#_crc
      0000EA A6 06            [24]  627 	mov	@r0,ar6
      0000EC 08               [12]  628 	inc	r0
      0000ED A6 07            [24]  629 	mov	@r0,ar7
      0000EF 78r0B            [12]  630 	mov	r0,#_bitp
      0000F1 E6               [12]  631 	mov	a,@r0
      0000F2 C3               [12]  632 	clr	c
      0000F3 13               [12]  633 	rrc	a
      0000F4 F6               [12]  634 	mov	@r0,a
      0000F5 78r0B            [12]  635 	mov	r0,#_bitp
      0000F7 E6               [12]  636 	mov	a,@r0
      0000F8 70 9F            [24]  637 	jnz	00134$
                                    638 ;	crc16.c:70: for (off = 0u; off < len; off++)
      0000FA 78r07            [12]  639 	mov	r0,#_off
      0000FC 06               [12]  640 	inc	@r0
      0000FD B6 00 02         [24]  641 	cjne	@r0,#0x00,00215$
      000100 08               [12]  642 	inc	r0
      000101 06               [12]  643 	inc	@r0
      000102                        644 00215$:
                                    645 ;	crc16.c:72: CCRCB_FINISH(crc);
      000102 80 84            [24]  646 	sjmp	00137$
      000104                        647 00109$:
      000104 78r09            [12]  648 	mov	r0,#_crc
      000106 86 06            [24]  649 	mov	ar6,@r0
      000108 08               [12]  650 	inc	r0
      000109 86 07            [24]  651 	mov	ar7,@r0
      00010B 78r09            [12]  652 	mov	r0,#_crc
      00010D A6 06            [24]  653 	mov	@r0,ar6
      00010F 08               [12]  654 	inc	r0
      000110 A6 07            [24]  655 	mov	@r0,ar7
                                    656 ;	crc16.c:73: printf("CRC16=0x%04x\r\n", crc);
      000112 78r09            [12]  657 	mov	r0,#_crc
      000114 E6               [12]  658 	mov	a,@r0
      000115 C0 E0            [24]  659 	push	acc
      000117 08               [12]  660 	inc	r0
      000118 E6               [12]  661 	mov	a,@r0
      000119 C0 E0            [24]  662 	push	acc
      00011B 74r1E            [12]  663 	mov	a,#___str_2
      00011D C0 E0            [24]  664 	push	acc
      00011F 74s00            [12]  665 	mov	a,#(___str_2 >> 8)
      000121 C0 E0            [24]  666 	push	acc
      000123 74 80            [12]  667 	mov	a,#0x80
      000125 C0 E0            [24]  668 	push	acc
      000127 12r00r00         [24]  669 	lcall	_printf
      00012A E5 81            [12]  670 	mov	a,sp
      00012C 24 FB            [12]  671 	add	a,#0xfb
      00012E F5 81            [12]  672 	mov	sp,a
                                    673 ;	crc16.c:75: len = PLEN;
      000130 78r05            [12]  674 	mov	r0,#_len
      000132 76 00            [12]  675 	mov	@r0,#0x00
      000134 08               [12]  676 	inc	r0
      000135 76 20            [12]  677 	mov	@r0,#0x20
                                    678 ;	crc16.c:76: while (1) {
      000137                        679 00129$:
                                    680 ;	crc16.c:77: printf("PARTIAL base=%p ", base);
      000137 78r01            [12]  681 	mov	r0,#_base
      000139 86 05            [24]  682 	mov	ar5,@r0
      00013B 08               [12]  683 	inc	r0
      00013C 86 06            [24]  684 	mov	ar6,@r0
      00013E 7F 00            [12]  685 	mov	r7,#0x00
      000140 C0 05            [24]  686 	push	ar5
      000142 C0 06            [24]  687 	push	ar6
      000144 C0 07            [24]  688 	push	ar7
      000146 74r2D            [12]  689 	mov	a,#___str_3
      000148 C0 E0            [24]  690 	push	acc
      00014A 74s00            [12]  691 	mov	a,#(___str_3 >> 8)
      00014C C0 E0            [24]  692 	push	acc
      00014E 74 80            [12]  693 	mov	a,#0x80
      000150 C0 E0            [24]  694 	push	acc
      000152 12r00r00         [24]  695 	lcall	_printf
      000155 E5 81            [12]  696 	mov	a,sp
      000157 24 FA            [12]  697 	add	a,#0xfa
      000159 F5 81            [12]  698 	mov	sp,a
                                    699 ;	crc16.c:78: printf("len=0x%04x ", len);
      00015B 78r05            [12]  700 	mov	r0,#_len
      00015D E6               [12]  701 	mov	a,@r0
      00015E C0 E0            [24]  702 	push	acc
      000160 08               [12]  703 	inc	r0
      000161 E6               [12]  704 	mov	a,@r0
      000162 C0 E0            [24]  705 	push	acc
      000164 74r12            [12]  706 	mov	a,#___str_1
      000166 C0 E0            [24]  707 	push	acc
      000168 74s00            [12]  708 	mov	a,#(___str_1 >> 8)
      00016A C0 E0            [24]  709 	push	acc
      00016C 74 80            [12]  710 	mov	a,#0x80
      00016E C0 E0            [24]  711 	push	acc
      000170 12r00r00         [24]  712 	lcall	_printf
      000173 E5 81            [12]  713 	mov	a,sp
      000175 24 FB            [12]  714 	add	a,#0xfb
      000177 F5 81            [12]  715 	mov	sp,a
                                    716 ;	crc16.c:79: CCRCB_INIT(crc);
      000179 78r09            [12]  717 	mov	r0,#_crc
      00017B 76 FF            [12]  718 	mov	@r0,#0xff
      00017D 08               [12]  719 	inc	r0
      00017E 76 FF            [12]  720 	mov	@r0,#0xff
                                    721 ;	crc16.c:80: for (off = 0u; off < len; off++)
      000180 78r07            [12]  722 	mov	r0,#_off
      000182 E4               [12]  723 	clr	a
      000183 F6               [12]  724 	mov	@r0,a
      000184 08               [12]  725 	inc	r0
      000185 F6               [12]  726 	mov	@r0,a
      000186                        727 00142$:
      000186 78r07            [12]  728 	mov	r0,#_off
      000188 79r05            [12]  729 	mov	r1,#_len
      00018A C3               [12]  730 	clr	c
      00018B E6               [12]  731 	mov	a,@r0
      00018C 97               [12]  732 	subb	a,@r1
      00018D 08               [12]  733 	inc	r0
      00018E E6               [12]  734 	mov	a,@r0
      00018F 09               [12]  735 	inc	r1
      000190 97               [12]  736 	subb	a,@r1
      000191 50 6F            [24]  737 	jnc	00120$
                                    738 ;	crc16.c:81: CCRCB(crc, base[off], bitp);
      000193 78r0B            [12]  739 	mov	r0,#_bitp
      000195 76 80            [12]  740 	mov	@r0,#0x80
      000197                        741 00139$:
      000197 78r0A            [12]  742 	mov	r0,#(_crc + 1)
      000199 E6               [12]  743 	mov	a,@r0
      00019A 23               [12]  744 	rl	a
      00019B 54 01            [12]  745 	anl	a,#0x01
      00019D FE               [12]  746 	mov	r6,a
      00019E 7F 00            [12]  747 	mov	r7,#0x00
      0001A0 78r01            [12]  748 	mov	r0,#_base
      0001A2 79r07            [12]  749 	mov	r1,#_off
      0001A4 E7               [12]  750 	mov	a,@r1
      0001A5 26               [12]  751 	add	a,@r0
      0001A6 F5 82            [12]  752 	mov	dpl,a
      0001A8 09               [12]  753 	inc	r1
      0001A9 E7               [12]  754 	mov	a,@r1
      0001AA 08               [12]  755 	inc	r0
      0001AB 36               [12]  756 	addc	a,@r0
      0001AC F5 83            [12]  757 	mov	dph,a
      0001AE E0               [24]  758 	movx	a,@dptr
      0001AF FD               [12]  759 	mov	r5,a
      0001B0 78r0B            [12]  760 	mov	r0,#_bitp
      0001B2 E6               [12]  761 	mov	a,@r0
      0001B3 52 05            [12]  762 	anl	ar5,a
      0001B5 ED               [12]  763 	mov	a,r5
      0001B6 B4 01 00         [24]  764 	cjne	a,#0x01,00217$
      0001B9                        765 00217$:
      0001B9 B3               [12]  766 	cpl	c
      0001BA 92*00            [24]  767 	mov	b0,c
      0001BC E4               [12]  768 	clr	a
      0001BD 33               [12]  769 	rlc	a
      0001BE FC               [12]  770 	mov	r4,a
      0001BF 7D 00            [12]  771 	mov	r5,#0x00
      0001C1 62 06            [12]  772 	xrl	ar6,a
      0001C3 ED               [12]  773 	mov	a,r5
      0001C4 62 07            [12]  774 	xrl	ar7,a
      0001C6 EE               [12]  775 	mov	a,r6
      0001C7 4F               [12]  776 	orl	a,r7
      0001C8 60 12            [24]  777 	jz	00148$
      0001CA 78r09            [12]  778 	mov	r0,#_crc
      0001CC E6               [12]  779 	mov	a,@r0
      0001CD 25 E0            [12]  780 	add	a,acc
      0001CF FE               [12]  781 	mov	r6,a
      0001D0 08               [12]  782 	inc	r0
      0001D1 E6               [12]  783 	mov	a,@r0
      0001D2 33               [12]  784 	rlc	a
      0001D3 FF               [12]  785 	mov	r7,a
      0001D4 63 06 21         [24]  786 	xrl	ar6,#0x21
      0001D7 63 07 10         [24]  787 	xrl	ar7,#0x10
      0001DA 80 0A            [24]  788 	sjmp	00149$
      0001DC                        789 00148$:
      0001DC 78r09            [12]  790 	mov	r0,#_crc
      0001DE E6               [12]  791 	mov	a,@r0
      0001DF 25 E0            [12]  792 	add	a,acc
      0001E1 FE               [12]  793 	mov	r6,a
      0001E2 08               [12]  794 	inc	r0
      0001E3 E6               [12]  795 	mov	a,@r0
      0001E4 33               [12]  796 	rlc	a
      0001E5 FF               [12]  797 	mov	r7,a
      0001E6                        798 00149$:
      0001E6 78r09            [12]  799 	mov	r0,#_crc
      0001E8 A6 06            [24]  800 	mov	@r0,ar6
      0001EA 08               [12]  801 	inc	r0
      0001EB A6 07            [24]  802 	mov	@r0,ar7
      0001ED 78r0B            [12]  803 	mov	r0,#_bitp
      0001EF E6               [12]  804 	mov	a,@r0
      0001F0 C3               [12]  805 	clr	c
      0001F1 13               [12]  806 	rrc	a
      0001F2 F6               [12]  807 	mov	@r0,a
      0001F3 78r0B            [12]  808 	mov	r0,#_bitp
      0001F5 E6               [12]  809 	mov	a,@r0
      0001F6 70 9F            [24]  810 	jnz	00139$
                                    811 ;	crc16.c:80: for (off = 0u; off < len; off++)
      0001F8 78r07            [12]  812 	mov	r0,#_off
      0001FA 06               [12]  813 	inc	@r0
      0001FB B6 00 02         [24]  814 	cjne	@r0,#0x00,00220$
      0001FE 08               [12]  815 	inc	r0
      0001FF 06               [12]  816 	inc	@r0
      000200                        817 00220$:
                                    818 ;	crc16.c:82: CCRCB_FINISH(crc);
      000200 80 84            [24]  819 	sjmp	00142$
      000202                        820 00120$:
      000202 78r09            [12]  821 	mov	r0,#_crc
      000204 86 06            [24]  822 	mov	ar6,@r0
      000206 08               [12]  823 	inc	r0
      000207 86 07            [24]  824 	mov	ar7,@r0
      000209 78r09            [12]  825 	mov	r0,#_crc
      00020B A6 06            [24]  826 	mov	@r0,ar6
      00020D 08               [12]  827 	inc	r0
      00020E A6 07            [24]  828 	mov	@r0,ar7
                                    829 ;	crc16.c:83: printf("CRC16=0x%04x\r\n", crc);
      000210 78r09            [12]  830 	mov	r0,#_crc
      000212 E6               [12]  831 	mov	a,@r0
      000213 C0 E0            [24]  832 	push	acc
      000215 08               [12]  833 	inc	r0
      000216 E6               [12]  834 	mov	a,@r0
      000217 C0 E0            [24]  835 	push	acc
      000219 74r1E            [12]  836 	mov	a,#___str_2
      00021B C0 E0            [24]  837 	push	acc
      00021D 74s00            [12]  838 	mov	a,#(___str_2 >> 8)
      00021F C0 E0            [24]  839 	push	acc
      000221 74 80            [12]  840 	mov	a,#0x80
      000223 C0 E0            [24]  841 	push	acc
      000225 12r00r00         [24]  842 	lcall	_printf
      000228 E5 81            [12]  843 	mov	a,sp
      00022A 24 FB            [12]  844 	add	a,#0xfb
      00022C F5 81            [12]  845 	mov	sp,a
                                    846 ;	crc16.c:85: if (intr) {
      00022E 78r00            [12]  847 	mov	r0,#_intr
      000230 E6               [12]  848 	mov	a,@r0
      000231 60 1A            [24]  849 	jz	00124$
                                    850 ;	crc16.c:86: EA = 0;
                                    851 ;	assignBit
      000233 C2 AF            [12]  852 	clr	_EA
                                    853 ;	crc16.c:87: printf("interrupted\n");
      000235 74r3E            [12]  854 	mov	a,#___str_4
      000237 C0 E0            [24]  855 	push	acc
      000239 74s00            [12]  856 	mov	a,#(___str_4 >> 8)
      00023B C0 E0            [24]  857 	push	acc
      00023D 74 80            [12]  858 	mov	a,#0x80
      00023F C0 E0            [24]  859 	push	acc
      000241 12r00r00         [24]  860 	lcall	_printf
      000244 15 81            [12]  861 	dec	sp
      000246 15 81            [12]  862 	dec	sp
      000248 15 81            [12]  863 	dec	sp
                                    864 ;	crc16.c:88: break;
      00024A 02r00r24         [24]  865 	ljmp	00131$
      00024D                        866 00124$:
                                    867 ;	crc16.c:91: t = base + (len >> 1);
      00024D 78r05            [12]  868 	mov	r0,#_len
      00024F 86 06            [24]  869 	mov	ar6,@r0
      000251 08               [12]  870 	inc	r0
      000252 E6               [12]  871 	mov	a,@r0
      000253 C3               [12]  872 	clr	c
      000254 13               [12]  873 	rrc	a
      000255 CE               [12]  874 	xch	a,r6
      000256 13               [12]  875 	rrc	a
      000257 CE               [12]  876 	xch	a,r6
      000258 FF               [12]  877 	mov	r7,a
      000259 78r01            [12]  878 	mov	r0,#_base
      00025B EE               [12]  879 	mov	a,r6
      00025C 26               [12]  880 	add	a,@r0
      00025D FE               [12]  881 	mov	r6,a
      00025E EF               [12]  882 	mov	a,r7
      00025F 08               [12]  883 	inc	r0
      000260 36               [12]  884 	addc	a,@r0
      000261 FF               [12]  885 	mov	r7,a
      000262 78r03            [12]  886 	mov	r0,#_t
      000264 A6 06            [24]  887 	mov	@r0,ar6
      000266 08               [12]  888 	inc	r0
      000267 A6 07            [24]  889 	mov	@r0,ar7
                                    890 ;	crc16.c:92: if (t < base) break;
      000269 78r03            [12]  891 	mov	r0,#_t
      00026B 79r01            [12]  892 	mov	r1,#_base
      00026D C3               [12]  893 	clr	c
      00026E E6               [12]  894 	mov	a,@r0
      00026F 97               [12]  895 	subb	a,@r1
      000270 08               [12]  896 	inc	r0
      000271 E6               [12]  897 	mov	a,@r0
      000272 09               [12]  898 	inc	r1
      000273 97               [12]  899 	subb	a,@r1
      000274 50 03            [24]  900 	jnc	00222$
      000276 02r00r24         [24]  901 	ljmp	00131$
      000279                        902 00222$:
                                    903 ;	crc16.c:93: else base = t;
      000279 78r03            [12]  904 	mov	r0,#_t
      00027B 79r01            [12]  905 	mov	r1,#_base
      00027D E6               [12]  906 	mov	a,@r0
      00027E F7               [12]  907 	mov	@r1,a
      00027F 08               [12]  908 	inc	r0
      000280 09               [12]  909 	inc	r1
      000281 E6               [12]  910 	mov	a,@r0
      000282 F7               [12]  911 	mov	@r1,a
      000283 02r01r37         [24]  912 	ljmp	00129$
      000286                        913 00133$:
                                    914 ;	crc16.c:97: PCON |= 2;
      000286 43 87 02         [24]  915 	orl	_PCON,#0x02
                                    916 ;	crc16.c:99: return;
                                    917 ;	crc16.c:100: }
      000289 22               [24]  918 	ret
                                    919 	.area CSEG    (CODE)
                                    920 	.area CONST   (CODE)
                                    921 	.area CONST   (CODE)
      000000                        922 ___str_0:
      000000 43 4F 4D 50 4C 45 54   923 	.ascii "COMPLETE base=%p "
             45 20 62 61 73 65 3D
             25 70 20
      000011 00                     924 	.db 0x00
                                    925 	.area CSEG    (CODE)
                                    926 	.area CONST   (CODE)
      000012                        927 ___str_1:
      000012 6C 65 6E 3D 30 78 25   928 	.ascii "len=0x%04x "
             30 34 78 20
      00001D 00                     929 	.db 0x00
                                    930 	.area CSEG    (CODE)
                                    931 	.area CONST   (CODE)
      00001E                        932 ___str_2:
      00001E 43 52 43 31 36 3D 30   933 	.ascii "CRC16=0x%04x"
             78 25 30 34 78
      00002A 0D                     934 	.db 0x0d
      00002B 0A                     935 	.db 0x0a
      00002C 00                     936 	.db 0x00
                                    937 	.area CSEG    (CODE)
                                    938 	.area CONST   (CODE)
      00002D                        939 ___str_3:
      00002D 50 41 52 54 49 41 4C   940 	.ascii "PARTIAL base=%p "
             20 62 61 73 65 3D 25
             70 20
      00003D 00                     941 	.db 0x00
                                    942 	.area CSEG    (CODE)
                                    943 	.area CONST   (CODE)
      00003E                        944 ___str_4:
      00003E 69 6E 74 65 72 72 75   945 	.ascii "interrupted"
             70 74 65 64
      000049 0A                     946 	.db 0x0a
      00004A 00                     947 	.db 0x00
                                    948 	.area CSEG    (CODE)
                                    949 	.area XINIT   (CODE)
                                    950 	.area CABS    (ABS,CODE)
