                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module disp
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _timer0_intr
                                     13 	.globl _init_disp
                                     14 	.globl _init_timer0
                                     15 	.globl _init_intr
                                     16 	.globl _clear_gpo
                                     17 	.globl _init_gpo
                                     18 	.globl _getchar
                                     19 	.globl _putchar
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _FL
                                     27 	.globl _P
                                     28 	.globl _TF2
                                     29 	.globl _EXF2
                                     30 	.globl _RCLK
                                     31 	.globl _TCLK
                                     32 	.globl _EXEN2
                                     33 	.globl _TR2
                                     34 	.globl _C_T2
                                     35 	.globl _CP_RL2
                                     36 	.globl _T2CON_7
                                     37 	.globl _T2CON_6
                                     38 	.globl _T2CON_5
                                     39 	.globl _T2CON_4
                                     40 	.globl _T2CON_3
                                     41 	.globl _T2CON_2
                                     42 	.globl _T2CON_1
                                     43 	.globl _T2CON_0
                                     44 	.globl _PT2
                                     45 	.globl _PS
                                     46 	.globl _PT1
                                     47 	.globl _PX1
                                     48 	.globl _PT0
                                     49 	.globl _PX0
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _EA
                                     67 	.globl _ET2
                                     68 	.globl _ES
                                     69 	.globl _ET1
                                     70 	.globl _EX1
                                     71 	.globl _ET0
                                     72 	.globl _EX0
                                     73 	.globl _P2_7
                                     74 	.globl _P2_6
                                     75 	.globl _P2_5
                                     76 	.globl _P2_4
                                     77 	.globl _P2_3
                                     78 	.globl _P2_2
                                     79 	.globl _P2_1
                                     80 	.globl _P2_0
                                     81 	.globl _SM0
                                     82 	.globl _SM1
                                     83 	.globl _SM2
                                     84 	.globl _REN
                                     85 	.globl _TB8
                                     86 	.globl _RB8
                                     87 	.globl _TI
                                     88 	.globl _RI
                                     89 	.globl _T2EX
                                     90 	.globl _T2
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _A
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _TH2
                                    120 	.globl _TL2
                                    121 	.globl _RCAP2H
                                    122 	.globl _RCAP2L
                                    123 	.globl _T2MOD
                                    124 	.globl _T2CON
                                    125 	.globl _IP
                                    126 	.globl _P3
                                    127 	.globl _IE
                                    128 	.globl _P2
                                    129 	.globl _SBUF
                                    130 	.globl _SCON
                                    131 	.globl _P1
                                    132 	.globl _TH1
                                    133 	.globl _TH0
                                    134 	.globl _TL1
                                    135 	.globl _TL0
                                    136 	.globl _TMOD
                                    137 	.globl _TCON
                                    138 	.globl _PCON
                                    139 	.globl _DPH
                                    140 	.globl _DPL
                                    141 	.globl _SP
                                    142 	.globl _P0
                                    143 	.globl _gpo
                                    144 	.globl _OE
                                    145 	.globl _column
                                    146 	.globl _ddata
                                    147 	.globl _dcol
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        287 	.ds 8
                                    288 ;--------------------------------------------------------
                                    289 ; internal ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area DSEG    (DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; overlayable items in internal ram 
                                    294 ;--------------------------------------------------------
                                    295 ;--------------------------------------------------------
                                    296 ; Stack segment in internal ram 
                                    297 ;--------------------------------------------------------
                                    298 	.area	SSEG
      000000                        299 __start__stack:
      000000                        300 	.ds	1
                                    301 
                                    302 ;--------------------------------------------------------
                                    303 ; indirectly addressable internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area ISEG    (DATA)
      000000                        306 _dcol::
      000000                        307 	.ds 8
      000008                        308 _ddata::
      000008                        309 	.ds 8
      000010                        310 _column::
      000010                        311 	.ds 1
      000011                        312 _OE::
      000011                        313 	.ds 1
                                    314 ;--------------------------------------------------------
                                    315 ; absolute internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area IABS    (ABS,DATA)
                                    318 	.area IABS    (ABS,DATA)
                                    319 ;--------------------------------------------------------
                                    320 ; bit data
                                    321 ;--------------------------------------------------------
                                    322 	.area BSEG    (BIT)
                                    323 ;--------------------------------------------------------
                                    324 ; paged external ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area PSEG    (PAG,XDATA)
                           000000   327 _gpo	=	0x0000
                                    328 ;--------------------------------------------------------
                                    329 ; external ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XSEG    (XDATA)
                                    332 ;--------------------------------------------------------
                                    333 ; absolute external ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XABS    (ABS,XDATA)
                                    336 ;--------------------------------------------------------
                                    337 ; external initialized ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area XISEG   (XDATA)
                                    340 	.area HOME    (CODE)
                                    341 	.area GSINIT0 (CODE)
                                    342 	.area GSINIT1 (CODE)
                                    343 	.area GSINIT2 (CODE)
                                    344 	.area GSINIT3 (CODE)
                                    345 	.area GSINIT4 (CODE)
                                    346 	.area GSINIT5 (CODE)
                                    347 	.area GSINIT  (CODE)
                                    348 	.area GSFINAL (CODE)
                                    349 	.area CSEG    (CODE)
                                    350 ;--------------------------------------------------------
                                    351 ; interrupt vector 
                                    352 ;--------------------------------------------------------
                                    353 	.area HOME    (CODE)
      000000                        354 __interrupt_vect:
      000000 02r00r00         [24]  355 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  356 	reti
      000004                        357 	.ds	7
      00000B 02r00r89         [24]  358 	ljmp	_timer0_intr
                                    359 ;--------------------------------------------------------
                                    360 ; global & static initialisations
                                    361 ;--------------------------------------------------------
                                    362 	.area HOME    (CODE)
                                    363 	.area GSINIT  (CODE)
                                    364 	.area GSFINAL (CODE)
                                    365 	.area GSINIT  (CODE)
                                    366 	.globl __sdcc_gsinit_startup
                                    367 	.globl __sdcc_program_startup
                                    368 	.globl __start__stack
                                    369 	.globl __mcs51_genXINIT
                                    370 	.globl __mcs51_genXRAMCLEAR
                                    371 	.globl __mcs51_genRAMCLEAR
                                    372 ;	disp.c:42: __idata const uint8_t dcol[8] = {
      000000 78r00            [12]  373 	mov	r0,#_dcol
      000002 76 01            [12]  374 	mov	@r0,#0x01
      000004 78r01            [12]  375 	mov	r0,#(_dcol + 0x0001)
      000006 76 02            [12]  376 	mov	@r0,#0x02
      000008 78r02            [12]  377 	mov	r0,#(_dcol + 0x0002)
      00000A 76 04            [12]  378 	mov	@r0,#0x04
      00000C 78r03            [12]  379 	mov	r0,#(_dcol + 0x0003)
      00000E 76 08            [12]  380 	mov	@r0,#0x08
      000010 78r04            [12]  381 	mov	r0,#(_dcol + 0x0004)
      000012 76 10            [12]  382 	mov	@r0,#0x10
      000014 78r05            [12]  383 	mov	r0,#(_dcol + 0x0005)
      000016 76 20            [12]  384 	mov	@r0,#0x20
      000018 78r06            [12]  385 	mov	r0,#(_dcol + 0x0006)
      00001A 76 40            [12]  386 	mov	@r0,#0x40
      00001C 78r07            [12]  387 	mov	r0,#(_dcol + 0x0007)
      00001E 76 80            [12]  388 	mov	@r0,#0x80
                                    389 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  390 	ljmp	__sdcc_program_startup
                                    391 ;--------------------------------------------------------
                                    392 ; Home
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
                                    395 	.area HOME    (CODE)
      00000E                        396 __sdcc_program_startup:
      00000E 02r00rC8         [24]  397 	ljmp	_main
                                    398 ;	return from main will return to caller
                                    399 ;--------------------------------------------------------
                                    400 ; code
                                    401 ;--------------------------------------------------------
                                    402 	.area CSEG    (CODE)
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'putchar'
                                    405 ;------------------------------------------------------------
                                    406 ;c                         Allocated to registers 
                                    407 ;------------------------------------------------------------
                                    408 ;	disp.c:7: int putchar(int c) __naked {
                                    409 ;	-----------------------------------------
                                    410 ;	 function putchar
                                    411 ;	-----------------------------------------
      000000                        412 _putchar:
                                    413 ;	naked function: no prologue.
                                    414 ;	disp.c:12: __endasm;
      000000 E5 82            [12]  415 	mov	a, dpl
      000002 02 00 30         [24]  416 	ljmp	0x0030
                                    417 ;	disp.c:13: }
                                    418 ;	naked function: no epilogue.
                                    419 ;------------------------------------------------------------
                                    420 ;Allocation info for local variables in function 'getchar'
                                    421 ;------------------------------------------------------------
                                    422 ;	disp.c:15: int getchar(void) __naked {
                                    423 ;	-----------------------------------------
                                    424 ;	 function getchar
                                    425 ;	-----------------------------------------
      000005                        426 _getchar:
                                    427 ;	naked function: no prologue.
                                    428 ;	disp.c:21: __endasm;
      000005 12 00 32         [24]  429 	lcall	0x0032
      000008 F5 82            [12]  430 	mov	dpl, a
      00000A 75 83 00         [24]  431 	mov	dph, #0
      00000D 22               [24]  432 	ret
                                    433 ;	disp.c:22: }
                                    434 ;	naked function: no epilogue.
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'init_gpo'
                                    437 ;------------------------------------------------------------
                                    438 ;	disp.c:61: void init_gpo(void) {
                                    439 ;	-----------------------------------------
                                    440 ;	 function init_gpo
                                    441 ;	-----------------------------------------
      00000E                        442 _init_gpo:
                           000007   443 	ar7 = 0x07
                           000006   444 	ar6 = 0x06
                           000005   445 	ar5 = 0x05
                           000004   446 	ar4 = 0x04
                           000003   447 	ar3 = 0x03
                           000002   448 	ar2 = 0x02
                           000001   449 	ar1 = 0x01
                           000000   450 	ar0 = 0x00
                                    451 ;	disp.c:62: P1_7 = 0;
                                    452 ;	assignBit
      00000E C2 97            [12]  453 	clr	_P1_7
                                    454 ;	disp.c:64: P2 = GPO_BASE_H;
      000010 75 A0 F0         [24]  455 	mov	_P2,#0xf0
                                    456 ;	disp.c:66: CLEAR_GPO;
      000013 78 06            [12]  457 	mov	r0,#(_gpo + 0x0006)
      000015 74 3F            [12]  458 	mov	a,#0x3f
      000017 F2               [24]  459 	movx	@r0,a
      000018 78 00            [12]  460 	mov	r0,#_gpo
      00001A E4               [12]  461 	clr	a
      00001B F2               [24]  462 	movx	@r0,a
      00001C 78 01            [12]  463 	mov	r0,#(_gpo + 0x0001)
      00001E F2               [24]  464 	movx	@r0,a
      00001F 78 02            [12]  465 	mov	r0,#(_gpo + 0x0002)
      000021 F2               [24]  466 	movx	@r0,a
      000022 78 03            [12]  467 	mov	r0,#(_gpo + 0x0003)
      000024 F2               [24]  468 	movx	@r0,a
      000025 78 04            [12]  469 	mov	r0,#(_gpo + 0x0004)
      000027 F2               [24]  470 	movx	@r0,a
      000028 78 05            [12]  471 	mov	r0,#(_gpo + 0x0005)
      00002A F2               [24]  472 	movx	@r0,a
                                    473 ;	disp.c:68: return;
                                    474 ;	disp.c:69: }
      00002B 22               [24]  475 	ret
                                    476 ;------------------------------------------------------------
                                    477 ;Allocation info for local variables in function 'clear_gpo'
                                    478 ;------------------------------------------------------------
                                    479 ;	disp.c:71: void clear_gpo(void) {
                                    480 ;	-----------------------------------------
                                    481 ;	 function clear_gpo
                                    482 ;	-----------------------------------------
      00002C                        483 _clear_gpo:
                                    484 ;	disp.c:72: CLEAR_GPO;
      00002C 78 06            [12]  485 	mov	r0,#(_gpo + 0x0006)
      00002E 74 3F            [12]  486 	mov	a,#0x3f
      000030 F2               [24]  487 	movx	@r0,a
      000031 78 00            [12]  488 	mov	r0,#_gpo
      000033 E4               [12]  489 	clr	a
      000034 F2               [24]  490 	movx	@r0,a
      000035 78 01            [12]  491 	mov	r0,#(_gpo + 0x0001)
      000037 F2               [24]  492 	movx	@r0,a
      000038 78 02            [12]  493 	mov	r0,#(_gpo + 0x0002)
      00003A F2               [24]  494 	movx	@r0,a
      00003B 78 03            [12]  495 	mov	r0,#(_gpo + 0x0003)
      00003D F2               [24]  496 	movx	@r0,a
      00003E 78 04            [12]  497 	mov	r0,#(_gpo + 0x0004)
      000040 F2               [24]  498 	movx	@r0,a
      000041 78 05            [12]  499 	mov	r0,#(_gpo + 0x0005)
      000043 F2               [24]  500 	movx	@r0,a
                                    501 ;	disp.c:74: return;
                                    502 ;	disp.c:75: }
      000044 22               [24]  503 	ret
                                    504 ;------------------------------------------------------------
                                    505 ;Allocation info for local variables in function 'init_intr'
                                    506 ;------------------------------------------------------------
                                    507 ;	disp.c:77: void init_intr(void) {
                                    508 ;	-----------------------------------------
                                    509 ;	 function init_intr
                                    510 ;	-----------------------------------------
      000045                        511 _init_intr:
                                    512 ;	disp.c:78: DIS_TR0;
                                    513 ;	assignBit
      000045 C2 8C            [12]  514 	clr	_TR0
                                    515 ;	disp.c:79: ET0 = 1;
                                    516 ;	assignBit
      000047 D2 A9            [12]  517 	setb	_ET0
                                    518 ;	disp.c:80: EA  = 1;
                                    519 ;	assignBit
      000049 D2 AF            [12]  520 	setb	_EA
                                    521 ;	disp.c:82: return;
                                    522 ;	disp.c:83: }
      00004B 22               [24]  523 	ret
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function 'init_timer0'
                                    526 ;------------------------------------------------------------
                                    527 ;	disp.c:85: void init_timer0(void) {
                                    528 ;	-----------------------------------------
                                    529 ;	 function init_timer0
                                    530 ;	-----------------------------------------
      00004C                        531 _init_timer0:
                                    532 ;	disp.c:86: DIS_TR0;
                                    533 ;	assignBit
      00004C C2 8C            [12]  534 	clr	_TR0
                                    535 ;	disp.c:87: TMOD = 0x01;
      00004E 75 89 01         [24]  536 	mov	_TMOD,#0x01
                                    537 ;	disp.c:88: TH0 = 0xfb;
      000051 75 8C FB         [24]  538 	mov	_TH0,#0xfb
                                    539 ;	disp.c:89: TL0 = 0x00;
      000054 75 8A 00         [24]  540 	mov	_TL0,#0x00
                                    541 ;	disp.c:91: return;
                                    542 ;	disp.c:92: }
      000057 22               [24]  543 	ret
                                    544 ;------------------------------------------------------------
                                    545 ;Allocation info for local variables in function 'init_disp'
                                    546 ;------------------------------------------------------------
                                    547 ;	disp.c:94: void init_disp(void) {
                                    548 ;	-----------------------------------------
                                    549 ;	 function init_disp
                                    550 ;	-----------------------------------------
      000058                        551 _init_disp:
                                    552 ;	disp.c:95: gpo[DISP_COL] = 0u;
      000058 78 05            [12]  553 	mov	r0,#(_gpo + 0x0005)
      00005A E4               [12]  554 	clr	a
      00005B F2               [24]  555 	movx	@r0,a
                                    556 ;	disp.c:96: gpo[DISP_DATA] = 0u;
      00005C 78 04            [12]  557 	mov	r0,#(_gpo + 0x0004)
      00005E F2               [24]  558 	movx	@r0,a
                                    559 ;	disp.c:98: OE = 0x0fu; /* 00_001111 */
      00005F 78r11            [12]  560 	mov	r0,#_OE
      000061 76 0F            [12]  561 	mov	@r0,#0x0f
                                    562 ;	disp.c:99: gpo[GPO_OE] = OE; /* 00_001111 */
      000063 78 06            [12]  563 	mov	r0,#(_gpo + 0x0006)
      000065 74 0F            [12]  564 	mov	a,#0x0f
      000067 F2               [24]  565 	movx	@r0,a
                                    566 ;	disp.c:101: for (column = 0u; column < 8u; column++)
      000068 78r10            [12]  567 	mov	r0,#_column
      00006A 76 00            [12]  568 	mov	@r0,#0x00
      00006C                        569 00103$:
      00006C 78r10            [12]  570 	mov	r0,#_column
      00006E B6 08 00         [24]  571 	cjne	@r0,#0x08,00115$
      000071                        572 00115$:
      000071 50 11            [24]  573 	jnc	00101$
                                    574 ;	disp.c:102: ddata[column] = 0u;
      000073 78r10            [12]  575 	mov	r0,#_column
      000075 E6               [12]  576 	mov	a,@r0
      000076 24r08            [12]  577 	add	a,#_ddata
      000078 F8               [12]  578 	mov	r0,a
      000079 76 00            [12]  579 	mov	@r0,#0x00
                                    580 ;	disp.c:101: for (column = 0u; column < 8u; column++)
      00007B 78r10            [12]  581 	mov	r0,#_column
      00007D E6               [12]  582 	mov	a,@r0
      00007E 78r10            [12]  583 	mov	r0,#_column
      000080 04               [12]  584 	inc	a
      000081 F6               [12]  585 	mov	@r0,a
      000082 80 E8            [24]  586 	sjmp	00103$
      000084                        587 00101$:
                                    588 ;	disp.c:104: column = 0u;
      000084 78r10            [12]  589 	mov	r0,#_column
      000086 76 00            [12]  590 	mov	@r0,#0x00
                                    591 ;	disp.c:106: return;
                                    592 ;	disp.c:107: }
      000088 22               [24]  593 	ret
                                    594 ;------------------------------------------------------------
                                    595 ;Allocation info for local variables in function 'timer0_intr'
                                    596 ;------------------------------------------------------------
                                    597 ;t                         Allocated to registers r7 
                                    598 ;------------------------------------------------------------
                                    599 ;	disp.c:109: void timer0_intr(void) __interrupt TF0_VECTOR __using 1 {
                                    600 ;	-----------------------------------------
                                    601 ;	 function timer0_intr
                                    602 ;	-----------------------------------------
      000089                        603 _timer0_intr:
                           00000F   604 	ar7 = 0x0f
                           00000E   605 	ar6 = 0x0e
                           00000D   606 	ar5 = 0x0d
                           00000C   607 	ar4 = 0x0c
                           00000B   608 	ar3 = 0x0b
                           00000A   609 	ar2 = 0x0a
                           000009   610 	ar1 = 0x09
                           000008   611 	ar0 = 0x08
      000089 C0 E0            [24]  612 	push	acc
      00008B C0 D0            [24]  613 	push	psw
      00008D 75 D0 08         [24]  614 	mov	psw,#0x08
                                    615 ;	disp.c:112: t = column & 7u;
      000090 78r10            [12]  616 	mov	r0,#_column
      000092 86 0F            [24]  617 	mov	ar7,@r0
      000094 53 0F 07         [24]  618 	anl	ar7,#0x07
                                    619 ;	disp.c:113: gpo[DISP_COL] = gpo[DISP_DATA] = 0u;
      000097 78 04            [12]  620 	mov	r0,#(_gpo + 0x0004)
      000099 E4               [12]  621 	clr	a
      00009A F2               [24]  622 	movx	@r0,a
      00009B 78 05            [12]  623 	mov	r0,#(_gpo + 0x0005)
      00009D F2               [24]  624 	movx	@r0,a
                                    625 ;	disp.c:114: gpo[DISP_COL] = dcol[t];
      00009E EF               [12]  626 	mov	a,r7
      00009F 24r00            [12]  627 	add	a,#_dcol
      0000A1 F9               [12]  628 	mov	r1,a
      0000A2 87 0E            [24]  629 	mov	ar6,@r1
      0000A4 78 05            [12]  630 	mov	r0,#(_gpo + 0x0005)
      0000A6 EE               [12]  631 	mov	a,r6
      0000A7 F2               [24]  632 	movx	@r0,a
                                    633 ;	disp.c:115: gpo[DISP_DATA] = ddata[t];
      0000A8 EF               [12]  634 	mov	a,r7
      0000A9 24r08            [12]  635 	add	a,#_ddata
      0000AB F9               [12]  636 	mov	r1,a
      0000AC 87 0F            [24]  637 	mov	ar7,@r1
      0000AE 78 04            [12]  638 	mov	r0,#(_gpo + 0x0004)
      0000B0 EF               [12]  639 	mov	a,r7
      0000B1 F2               [24]  640 	movx	@r0,a
                                    641 ;	disp.c:116: column++;
      0000B2 78r10            [12]  642 	mov	r0,#_column
      0000B4 E6               [12]  643 	mov	a,@r0
      0000B5 78r10            [12]  644 	mov	r0,#_column
      0000B7 04               [12]  645 	inc	a
      0000B8 F6               [12]  646 	mov	@r0,a
                                    647 ;	disp.c:118: DIS_TR0;
                                    648 ;	assignBit
      0000B9 C2 8C            [12]  649 	clr	_TR0
                                    650 ;	disp.c:119: TH0 = 0xfb;
      0000BB 75 8C FB         [24]  651 	mov	_TH0,#0xfb
                                    652 ;	disp.c:120: TL0 = 0x00;
      0000BE 75 8A 00         [24]  653 	mov	_TL0,#0x00
                                    654 ;	disp.c:121: EN_TR0;
                                    655 ;	assignBit
      0000C1 D2 8C            [12]  656 	setb	_TR0
                                    657 ;	disp.c:123: return;
                                    658 ;	disp.c:124: }
      0000C3 D0 D0            [24]  659 	pop	psw
      0000C5 D0 E0            [24]  660 	pop	acc
      0000C7 32               [24]  661 	reti
                                    662 ;	eliminated unneeded push/pop dpl
                                    663 ;	eliminated unneeded push/pop dph
                                    664 ;	eliminated unneeded push/pop b
                                    665 ;------------------------------------------------------------
                                    666 ;Allocation info for local variables in function 'main'
                                    667 ;------------------------------------------------------------
                                    668 ;counter                   Allocated to registers 
                                    669 ;j                         Allocated to registers r7 
                                    670 ;i                         Allocated to registers r6 
                                    671 ;j                         Allocated to registers r5 
                                    672 ;------------------------------------------------------------
                                    673 ;	disp.c:153: void main(void) {
                                    674 ;	-----------------------------------------
                                    675 ;	 function main
                                    676 ;	-----------------------------------------
      0000C8                        677 _main:
                           000007   678 	ar7 = 0x07
                           000006   679 	ar6 = 0x06
                           000005   680 	ar5 = 0x05
                           000004   681 	ar4 = 0x04
                           000003   682 	ar3 = 0x03
                           000002   683 	ar2 = 0x02
                           000001   684 	ar1 = 0x01
                           000000   685 	ar0 = 0x00
                                    686 ;	disp.c:157: init_gpo();
      0000C8 12r00r0E         [24]  687 	lcall	_init_gpo
                                    688 ;	disp.c:158: clear_gpo();
      0000CB 12r00r2C         [24]  689 	lcall	_clear_gpo
                                    690 ;	disp.c:159: init_disp();
      0000CE 12r00r58         [24]  691 	lcall	_init_disp
                                    692 ;	disp.c:162: for (j = 0u; j < 8u; j++)
      0000D1 7F 00            [12]  693 	mov	r7,#0x00
      0000D3                        694 00116$:
                                    695 ;	disp.c:166: ddata[j] = counter - j;
      0000D3 EF               [12]  696 	mov	a,r7
      0000D4 24r08            [12]  697 	add	a,#_ddata
      0000D6 F9               [12]  698 	mov	r1,a
      0000D7 C3               [12]  699 	clr	c
      0000D8 E4               [12]  700 	clr	a
      0000D9 9F               [12]  701 	subb	a,r7
      0000DA F7               [12]  702 	mov	@r1,a
                                    703 ;	disp.c:162: for (j = 0u; j < 8u; j++)
      0000DB 0F               [12]  704 	inc	r7
      0000DC BF 08 00         [24]  705 	cjne	r7,#0x08,00161$
      0000DF                        706 00161$:
      0000DF 40 F2            [24]  707 	jc	00116$
                                    708 ;	disp.c:169: init_timer0();
      0000E1 12r00r4C         [24]  709 	lcall	_init_timer0
                                    710 ;	disp.c:170: init_intr();
      0000E4 12r00r45         [24]  711 	lcall	_init_intr
                                    712 ;	disp.c:172: EN_TR0;
                                    713 ;	assignBit
      0000E7 D2 8C            [12]  714 	setb	_TR0
                                    715 ;	disp.c:174: while (1) {
      0000E9 7F 00            [12]  716 	mov	r7,#0x00
      0000EB                        717 00107$:
                                    718 ;	disp.c:175: OE = (counter << 6) | 0x0fu;
      0000EB 8F 06            [24]  719 	mov	ar6,r7
      0000ED EE               [12]  720 	mov	a,r6
      0000EE 03               [12]  721 	rr	a
      0000EF 03               [12]  722 	rr	a
      0000F0 54 C0            [12]  723 	anl	a,#0xc0
      0000F2 FE               [12]  724 	mov	r6,a
      0000F3 43 06 0F         [24]  725 	orl	ar6,#0x0f
      0000F6 78r11            [12]  726 	mov	r0,#_OE
      0000F8 A6 06            [24]  727 	mov	@r0,ar6
                                    728 ;	disp.c:176: gpo[GPO_OE] = OE;
      0000FA 78 06            [12]  729 	mov	r0,#(_gpo + 0x0006)
      0000FC EE               [12]  730 	mov	a,r6
      0000FD F2               [24]  731 	movx	@r0,a
                                    732 ;	disp.c:134: do {
      0000FE 7E 00            [12]  733 	mov	r6,#0x00
      000100                        734 00112$:
                                    735 ;	disp.c:135: j = 0u;
      000100 7D 00            [12]  736 	mov	r5,#0x00
                                    737 ;	disp.c:136: do {
      000102                        738 00109$:
                                    739 ;	disp.c:146: __endasm;
      000102 00               [12]  740 	nop
      000103 00               [12]  741 	nop
      000104 00               [12]  742 	nop
      000105 00               [12]  743 	nop
      000106 00               [12]  744 	nop
      000107 00               [12]  745 	nop
      000108 00               [12]  746 	nop
      000109 00               [12]  747 	nop
                                    748 ;	disp.c:147: } while (++j);
      00010A ED               [12]  749 	mov	a,r5
      00010B 04               [12]  750 	inc	a
      00010C FC               [12]  751 	mov	r4,a
      00010D FD               [12]  752 	mov	r5,a
      00010E 70 F2            [24]  753 	jnz	00109$
                                    754 ;	disp.c:148: } while ((++i) ^ 0x80u);
      000110 0E               [12]  755 	inc	r6
      000111 8E 04            [24]  756 	mov	ar4,r6
      000113 7D 00            [12]  757 	mov	r5,#0x00
      000115 74 80            [12]  758 	mov	a,#0x80
      000117 6C               [12]  759 	xrl	a,r4
      000118 70 E6            [24]  760 	jnz	00112$
      00011A ED               [12]  761 	mov	a,r5
      00011B 70 E3            [24]  762 	jnz	00112$
                                    763 ;	disp.c:180: counter++;
      00011D 0F               [12]  764 	inc	r7
                                    765 ;	disp.c:181: for (j = 0u; j < 8u; j++)
      00011E 7E 00            [12]  766 	mov	r6,#0x00
      000120                        767 00118$:
                                    768 ;	disp.c:185: ddata[j] = counter - j;
      000120 EE               [12]  769 	mov	a,r6
      000121 24r08            [12]  770 	add	a,#_ddata
      000123 F9               [12]  771 	mov	r1,a
      000124 EF               [12]  772 	mov	a,r7
      000125 C3               [12]  773 	clr	c
      000126 9E               [12]  774 	subb	a,r6
      000127 F7               [12]  775 	mov	@r1,a
                                    776 ;	disp.c:181: for (j = 0u; j < 8u; j++)
      000128 0E               [12]  777 	inc	r6
      000129 BE 08 00         [24]  778 	cjne	r6,#0x08,00166$
      00012C                        779 00166$:
      00012C 40 F2            [24]  780 	jc	00118$
                                    781 ;	disp.c:191: __endasm;
                                    782 ;	disp.c:192: }
      00012E 80 BB            [24]  783 	sjmp	00107$
                                    784 	.area CSEG    (CODE)
                                    785 	.area CONST   (CODE)
                                    786 	.area XINIT   (CODE)
                                    787 	.area CABS    (ABS,CODE)
