                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _fix_fftr
                                     14 	.globl ___memcpy
                                     15 	.globl _srand
                                     16 	.globl _rand
                                     17 	.globl _printf
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _FL
                                     25 	.globl _P
                                     26 	.globl _TF2
                                     27 	.globl _EXF2
                                     28 	.globl _RCLK
                                     29 	.globl _TCLK
                                     30 	.globl _EXEN2
                                     31 	.globl _TR2
                                     32 	.globl _C_T2
                                     33 	.globl _CP_RL2
                                     34 	.globl _T2CON_7
                                     35 	.globl _T2CON_6
                                     36 	.globl _T2CON_5
                                     37 	.globl _T2CON_4
                                     38 	.globl _T2CON_3
                                     39 	.globl _T2CON_2
                                     40 	.globl _T2CON_1
                                     41 	.globl _T2CON_0
                                     42 	.globl _PT2
                                     43 	.globl _PS
                                     44 	.globl _PT1
                                     45 	.globl _PX1
                                     46 	.globl _PT0
                                     47 	.globl _PX0
                                     48 	.globl _RD
                                     49 	.globl _WR
                                     50 	.globl _T1
                                     51 	.globl _T0
                                     52 	.globl _INT1
                                     53 	.globl _INT0
                                     54 	.globl _TXD
                                     55 	.globl _RXD
                                     56 	.globl _P3_7
                                     57 	.globl _P3_6
                                     58 	.globl _P3_5
                                     59 	.globl _P3_4
                                     60 	.globl _P3_3
                                     61 	.globl _P3_2
                                     62 	.globl _P3_1
                                     63 	.globl _P3_0
                                     64 	.globl _EA
                                     65 	.globl _ET2
                                     66 	.globl _ES
                                     67 	.globl _ET1
                                     68 	.globl _EX1
                                     69 	.globl _ET0
                                     70 	.globl _EX0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _SM0
                                     80 	.globl _SM1
                                     81 	.globl _SM2
                                     82 	.globl _REN
                                     83 	.globl _TB8
                                     84 	.globl _RB8
                                     85 	.globl _TI
                                     86 	.globl _RI
                                     87 	.globl _T2EX
                                     88 	.globl _T2
                                     89 	.globl _P1_7
                                     90 	.globl _P1_6
                                     91 	.globl _P1_5
                                     92 	.globl _P1_4
                                     93 	.globl _P1_3
                                     94 	.globl _P1_2
                                     95 	.globl _P1_1
                                     96 	.globl _P1_0
                                     97 	.globl _TF1
                                     98 	.globl _TR1
                                     99 	.globl _TF0
                                    100 	.globl _TR0
                                    101 	.globl _IE1
                                    102 	.globl _IT1
                                    103 	.globl _IE0
                                    104 	.globl _IT0
                                    105 	.globl _P0_7
                                    106 	.globl _P0_6
                                    107 	.globl _P0_5
                                    108 	.globl _P0_4
                                    109 	.globl _P0_3
                                    110 	.globl _P0_2
                                    111 	.globl _P0_1
                                    112 	.globl _P0_0
                                    113 	.globl _B
                                    114 	.globl _A
                                    115 	.globl _ACC
                                    116 	.globl _PSW
                                    117 	.globl _TH2
                                    118 	.globl _TL2
                                    119 	.globl _RCAP2H
                                    120 	.globl _RCAP2L
                                    121 	.globl _T2MOD
                                    122 	.globl _T2CON
                                    123 	.globl _IP
                                    124 	.globl _P3
                                    125 	.globl _IE
                                    126 	.globl _P2
                                    127 	.globl _SBUF
                                    128 	.globl _SCON
                                    129 	.globl _P1
                                    130 	.globl _TH1
                                    131 	.globl _TH0
                                    132 	.globl _TL1
                                    133 	.globl _TL0
                                    134 	.globl _TMOD
                                    135 	.globl _TCON
                                    136 	.globl _PCON
                                    137 	.globl _DPH
                                    138 	.globl _DPL
                                    139 	.globl _SP
                                    140 	.globl _P0
                                    141 	.globl _ifft
                                    142 	.globl _fft
                                    143 	.globl _samples
                                    144 ;--------------------------------------------------------
                                    145 ; special function registers
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0	=	0x0080
                           000081   150 _SP	=	0x0081
                           000082   151 _DPL	=	0x0082
                           000083   152 _DPH	=	0x0083
                           000087   153 _PCON	=	0x0087
                           000088   154 _TCON	=	0x0088
                           000089   155 _TMOD	=	0x0089
                           00008A   156 _TL0	=	0x008a
                           00008B   157 _TL1	=	0x008b
                           00008C   158 _TH0	=	0x008c
                           00008D   159 _TH1	=	0x008d
                           000090   160 _P1	=	0x0090
                           000098   161 _SCON	=	0x0098
                           000099   162 _SBUF	=	0x0099
                           0000A0   163 _P2	=	0x00a0
                           0000A8   164 _IE	=	0x00a8
                           0000B0   165 _P3	=	0x00b0
                           0000B8   166 _IP	=	0x00b8
                           0000C8   167 _T2CON	=	0x00c8
                           0000C9   168 _T2MOD	=	0x00c9
                           0000CA   169 _RCAP2L	=	0x00ca
                           0000CB   170 _RCAP2H	=	0x00cb
                           0000CC   171 _TL2	=	0x00cc
                           0000CD   172 _TH2	=	0x00cd
                           0000D0   173 _PSW	=	0x00d0
                           0000E0   174 _ACC	=	0x00e0
                           0000E0   175 _A	=	0x00e0
                           0000F0   176 _B	=	0x00f0
                                    177 ;--------------------------------------------------------
                                    178 ; special function bits
                                    179 ;--------------------------------------------------------
                                    180 	.area RSEG    (ABS,DATA)
      000000                        181 	.org 0x0000
                           000080   182 _P0_0	=	0x0080
                           000081   183 _P0_1	=	0x0081
                           000082   184 _P0_2	=	0x0082
                           000083   185 _P0_3	=	0x0083
                           000084   186 _P0_4	=	0x0084
                           000085   187 _P0_5	=	0x0085
                           000086   188 _P0_6	=	0x0086
                           000087   189 _P0_7	=	0x0087
                           000088   190 _IT0	=	0x0088
                           000089   191 _IE0	=	0x0089
                           00008A   192 _IT1	=	0x008a
                           00008B   193 _IE1	=	0x008b
                           00008C   194 _TR0	=	0x008c
                           00008D   195 _TF0	=	0x008d
                           00008E   196 _TR1	=	0x008e
                           00008F   197 _TF1	=	0x008f
                           000090   198 _P1_0	=	0x0090
                           000091   199 _P1_1	=	0x0091
                           000092   200 _P1_2	=	0x0092
                           000093   201 _P1_3	=	0x0093
                           000094   202 _P1_4	=	0x0094
                           000095   203 _P1_5	=	0x0095
                           000096   204 _P1_6	=	0x0096
                           000097   205 _P1_7	=	0x0097
                           000090   206 _T2	=	0x0090
                           000091   207 _T2EX	=	0x0091
                           000098   208 _RI	=	0x0098
                           000099   209 _TI	=	0x0099
                           00009A   210 _RB8	=	0x009a
                           00009B   211 _TB8	=	0x009b
                           00009C   212 _REN	=	0x009c
                           00009D   213 _SM2	=	0x009d
                           00009E   214 _SM1	=	0x009e
                           00009F   215 _SM0	=	0x009f
                           0000A0   216 _P2_0	=	0x00a0
                           0000A1   217 _P2_1	=	0x00a1
                           0000A2   218 _P2_2	=	0x00a2
                           0000A3   219 _P2_3	=	0x00a3
                           0000A4   220 _P2_4	=	0x00a4
                           0000A5   221 _P2_5	=	0x00a5
                           0000A6   222 _P2_6	=	0x00a6
                           0000A7   223 _P2_7	=	0x00a7
                           0000A8   224 _EX0	=	0x00a8
                           0000A9   225 _ET0	=	0x00a9
                           0000AA   226 _EX1	=	0x00aa
                           0000AB   227 _ET1	=	0x00ab
                           0000AC   228 _ES	=	0x00ac
                           0000AD   229 _ET2	=	0x00ad
                           0000AF   230 _EA	=	0x00af
                           0000B0   231 _P3_0	=	0x00b0
                           0000B1   232 _P3_1	=	0x00b1
                           0000B2   233 _P3_2	=	0x00b2
                           0000B3   234 _P3_3	=	0x00b3
                           0000B4   235 _P3_4	=	0x00b4
                           0000B5   236 _P3_5	=	0x00b5
                           0000B6   237 _P3_6	=	0x00b6
                           0000B7   238 _P3_7	=	0x00b7
                           0000B0   239 _RXD	=	0x00b0
                           0000B1   240 _TXD	=	0x00b1
                           0000B2   241 _INT0	=	0x00b2
                           0000B3   242 _INT1	=	0x00b3
                           0000B4   243 _T0	=	0x00b4
                           0000B5   244 _T1	=	0x00b5
                           0000B6   245 _WR	=	0x00b6
                           0000B7   246 _RD	=	0x00b7
                           0000B8   247 _PX0	=	0x00b8
                           0000B9   248 _PT0	=	0x00b9
                           0000BA   249 _PX1	=	0x00ba
                           0000BB   250 _PT1	=	0x00bb
                           0000BC   251 _PS	=	0x00bc
                           0000BD   252 _PT2	=	0x00bd
                           0000C8   253 _T2CON_0	=	0x00c8
                           0000C9   254 _T2CON_1	=	0x00c9
                           0000CA   255 _T2CON_2	=	0x00ca
                           0000CB   256 _T2CON_3	=	0x00cb
                           0000CC   257 _T2CON_4	=	0x00cc
                           0000CD   258 _T2CON_5	=	0x00cd
                           0000CE   259 _T2CON_6	=	0x00ce
                           0000CF   260 _T2CON_7	=	0x00cf
                           0000C8   261 _CP_RL2	=	0x00c8
                           0000C9   262 _C_T2	=	0x00c9
                           0000CA   263 _TR2	=	0x00ca
                           0000CB   264 _EXEN2	=	0x00cb
                           0000CC   265 _TCLK	=	0x00cc
                           0000CD   266 _RCLK	=	0x00cd
                           0000CE   267 _EXF2	=	0x00ce
                           0000CF   268 _TF2	=	0x00cf
                           0000D0   269 _P	=	0x00d0
                           0000D1   270 _FL	=	0x00d1
                           0000D2   271 _OV	=	0x00d2
                           0000D3   272 _RS0	=	0x00d3
                           0000D4   273 _RS1	=	0x00d4
                           0000D5   274 _F0	=	0x00d5
                           0000D6   275 _AC	=	0x00d6
                           0000D7   276 _CY	=	0x00d7
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable register banks
                                    279 ;--------------------------------------------------------
                                    280 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        283 	.ds 8
                                    284 ;--------------------------------------------------------
                                    285 ; overlayable bit register bank
                                    286 ;--------------------------------------------------------
                                    287 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        288 bits:
      000000                        289 	.ds 1
                           008000   290 	b0 = bits[0]
                           008100   291 	b1 = bits[1]
                           008200   292 	b2 = bits[2]
                           008300   293 	b3 = bits[3]
                           008400   294 	b4 = bits[4]
                           008500   295 	b5 = bits[5]
                           008600   296 	b6 = bits[6]
                           008700   297 	b7 = bits[7]
                                    298 ;--------------------------------------------------------
                                    299 ; internal ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area DSEG    (DATA)
                                    302 ;--------------------------------------------------------
                                    303 ; overlayable items in internal ram 
                                    304 ;--------------------------------------------------------
                                    305 ;--------------------------------------------------------
                                    306 ; Stack segment in internal ram 
                                    307 ;--------------------------------------------------------
                                    308 	.area	SSEG
      000000                        309 __start__stack:
      000000                        310 	.ds	1
                                    311 
                                    312 ;--------------------------------------------------------
                                    313 ; indirectly addressable internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area ISEG    (DATA)
      000000                        316 _print:
      000000                        317 	.ds 1
                                    318 ;--------------------------------------------------------
                                    319 ; absolute internal ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area IABS    (ABS,DATA)
                                    322 	.area IABS    (ABS,DATA)
                                    323 ;--------------------------------------------------------
                                    324 ; bit data
                                    325 ;--------------------------------------------------------
                                    326 	.area BSEG    (BIT)
                                    327 ;--------------------------------------------------------
                                    328 ; paged external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area PSEG    (PAG,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XSEG    (XDATA)
      000000                        335 _samples::
      000000                        336 	.ds 128
      000080                        337 _fft::
      000080                        338 	.ds 128
      000100                        339 _ifft::
      000100                        340 	.ds 128
      000180                        341 _main_R_65536_73:
      000180                        342 	.ds 2
                                    343 ;--------------------------------------------------------
                                    344 ; absolute external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XABS    (ABS,XDATA)
                                    347 ;--------------------------------------------------------
                                    348 ; external initialized ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area XISEG   (XDATA)
                                    351 	.area HOME    (CODE)
                                    352 	.area GSINIT0 (CODE)
                                    353 	.area GSINIT1 (CODE)
                                    354 	.area GSINIT2 (CODE)
                                    355 	.area GSINIT3 (CODE)
                                    356 	.area GSINIT4 (CODE)
                                    357 	.area GSINIT5 (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area CSEG    (CODE)
                                    361 ;--------------------------------------------------------
                                    362 ; interrupt vector 
                                    363 ;--------------------------------------------------------
                                    364 	.area HOME    (CODE)
      000000                        365 __interrupt_vect:
      000000 02r00r00         [24]  366 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  367 	ljmp	_int0
                                    368 ;--------------------------------------------------------
                                    369 ; global & static initialisations
                                    370 ;--------------------------------------------------------
                                    371 	.area HOME    (CODE)
                                    372 	.area GSINIT  (CODE)
                                    373 	.area GSFINAL (CODE)
                                    374 	.area GSINIT  (CODE)
                                    375 	.globl __sdcc_gsinit_startup
                                    376 	.globl __sdcc_program_startup
                                    377 	.globl __start__stack
                                    378 	.globl __mcs51_genXINIT
                                    379 	.globl __mcs51_genXRAMCLEAR
                                    380 	.globl __mcs51_genRAMCLEAR
                                    381 ;------------------------------------------------------------
                                    382 ;Allocation info for local variables in function 'main'
                                    383 ;------------------------------------------------------------
                                    384 ;i                         Allocated to registers 
                                    385 ;j                         Allocated to stack - _bp +1
                                    386 ;scale                     Allocated to stack - _bp +3
                                    387 ;sloc0                     Allocated to stack - _bp +7
                                    388 ;R                         Allocated with name '_main_R_65536_73'
                                    389 ;------------------------------------------------------------
                                    390 ;	main.c:23: static volatile __xdata int *R = (__xdata int *)0xfffe;
      000000 90r01r80         [24]  391 	mov	dptr,#_main_R_65536_73
      000003 74 FE            [12]  392 	mov	a,#0xfe
      000005 F0               [24]  393 	movx	@dptr,a
      000006 04               [12]  394 	inc	a
      000007 A3               [24]  395 	inc	dptr
      000008 F0               [24]  396 	movx	@dptr,a
                                    397 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  398 	ljmp	__sdcc_program_startup
                                    399 ;--------------------------------------------------------
                                    400 ; Home
                                    401 ;--------------------------------------------------------
                                    402 	.area HOME    (CODE)
                                    403 	.area HOME    (CODE)
      000006                        404 __sdcc_program_startup:
      000006 02r00r1D         [24]  405 	ljmp	_main
                                    406 ;	return from main will return to caller
                                    407 ;--------------------------------------------------------
                                    408 ; code
                                    409 ;--------------------------------------------------------
                                    410 	.area CSEG    (CODE)
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'int0'
                                    413 ;------------------------------------------------------------
                                    414 ;	main.c:13: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    415 ;	-----------------------------------------
                                    416 ;	 function int0
                                    417 ;	-----------------------------------------
      000000                        418 _int0:
                           00000F   419 	ar7 = 0x0f
                           00000E   420 	ar6 = 0x0e
                           00000D   421 	ar5 = 0x0d
                           00000C   422 	ar4 = 0x0c
                           00000B   423 	ar3 = 0x0b
                           00000A   424 	ar2 = 0x0a
                           000009   425 	ar1 = 0x09
                           000008   426 	ar0 = 0x08
      000000 C0*00            [24]  427 	push	bits
      000002 C0 E0            [24]  428 	push	acc
      000004 C0 D0            [24]  429 	push	psw
      000006 75 D0 08         [24]  430 	mov	psw,#0x08
                                    431 ;	main.c:14: print = !print;
      000009 78r00            [12]  432 	mov	r0,#_print
      00000B E6               [12]  433 	mov	a,@r0
      00000C B4 01 00         [24]  434 	cjne	a,#0x01,00103$
      00000F                        435 00103$:
      00000F 92*00            [24]  436 	mov	b0,c
      000011 78r00            [12]  437 	mov	r0,#_print
      000013 E4               [12]  438 	clr	a
      000014 33               [12]  439 	rlc	a
      000015 F6               [12]  440 	mov	@r0,a
                                    441 ;	main.c:15: }
      000016 D0 D0            [24]  442 	pop	psw
      000018 D0 E0            [24]  443 	pop	acc
      00001A D0*00            [24]  444 	pop	bits
      00001C 32               [24]  445 	reti
                                    446 ;	eliminated unneeded push/pop dpl
                                    447 ;	eliminated unneeded push/pop dph
                                    448 ;	eliminated unneeded push/pop b
                                    449 ;------------------------------------------------------------
                                    450 ;Allocation info for local variables in function 'main'
                                    451 ;------------------------------------------------------------
                                    452 ;i                         Allocated to registers 
                                    453 ;j                         Allocated to stack - _bp +1
                                    454 ;scale                     Allocated to stack - _bp +3
                                    455 ;sloc0                     Allocated to stack - _bp +7
                                    456 ;R                         Allocated with name '_main_R_65536_73'
                                    457 ;------------------------------------------------------------
                                    458 ;	main.c:22: void main(void) {
                                    459 ;	-----------------------------------------
                                    460 ;	 function main
                                    461 ;	-----------------------------------------
      00001D                        462 _main:
                           000007   463 	ar7 = 0x07
                           000006   464 	ar6 = 0x06
                           000005   465 	ar5 = 0x05
                           000004   466 	ar4 = 0x04
                           000003   467 	ar3 = 0x03
                           000002   468 	ar2 = 0x02
                           000001   469 	ar1 = 0x01
                           000000   470 	ar0 = 0x00
      00001D C0*00            [24]  471 	push	_bp
      00001F E5 81            [12]  472 	mov	a,sp
      000021 F5*00            [12]  473 	mov	_bp,a
      000023 24 04            [12]  474 	add	a,#0x04
      000025 F5 81            [12]  475 	mov	sp,a
                                    476 ;	main.c:27: print = 1;
      000027 78r00            [12]  477 	mov	r0,#_print
      000029 76 01            [12]  478 	mov	@r0,#0x01
                                    479 ;	main.c:29: IT0 = 1;
                                    480 ;	assignBit
      00002B D2 88            [12]  481 	setb	_IT0
                                    482 ;	main.c:30: EX0 = 1;
                                    483 ;	assignBit
      00002D D2 A8            [12]  484 	setb	_EX0
                                    485 ;	main.c:31: EA = 1;
                                    486 ;	assignBit
      00002F D2 AF            [12]  487 	setb	_EA
                                    488 ;	main.c:33: srand(*R);
      000031 90r01r80         [24]  489 	mov	dptr,#_main_R_65536_73
      000034 E0               [24]  490 	movx	a,@dptr
      000035 FE               [12]  491 	mov	r6,a
      000036 A3               [24]  492 	inc	dptr
      000037 E0               [24]  493 	movx	a,@dptr
      000038 FF               [12]  494 	mov	r7,a
      000039 8E 82            [24]  495 	mov	dpl,r6
      00003B 8F 83            [24]  496 	mov	dph,r7
      00003D E0               [24]  497 	movx	a,@dptr
      00003E FE               [12]  498 	mov	r6,a
      00003F A3               [24]  499 	inc	dptr
      000040 E0               [24]  500 	movx	a,@dptr
      000041 FF               [12]  501 	mov	r7,a
      000042 8E 82            [24]  502 	mov	dpl,r6
      000044 8F 83            [24]  503 	mov	dph,r7
      000046 12r00r00         [24]  504 	lcall	_srand
                                    505 ;	main.c:35: for (i = 0; 1; i++) {
      000049 7E 00            [12]  506 	mov	r6,#0x00
      00004B 7F 00            [12]  507 	mov	r7,#0x00
                                    508 ;	main.c:36: for (j = 0; j < (1 << N); j++)
      00004D                        509 00117$:
      00004D A8*00            [24]  510 	mov	r0,_bp
      00004F 08               [12]  511 	inc	r0
      000050 E4               [12]  512 	clr	a
      000051 F6               [12]  513 	mov	@r0,a
      000052 08               [12]  514 	inc	r0
      000053 F6               [12]  515 	mov	@r0,a
      000054                        516 00106$:
                                    517 ;	main.c:37: samples[j] = ((rand() & 1) ? -1 : 1) * (int16_t)rand();
      000054 A8*00            [24]  518 	mov	r0,_bp
      000056 08               [12]  519 	inc	r0
      000057 E6               [12]  520 	mov	a,@r0
      000058 25 E0            [12]  521 	add	a,acc
      00005A FA               [12]  522 	mov	r2,a
      00005B 08               [12]  523 	inc	r0
      00005C E6               [12]  524 	mov	a,@r0
      00005D 33               [12]  525 	rlc	a
      00005E FB               [12]  526 	mov	r3,a
      00005F EA               [12]  527 	mov	a,r2
      000060 24r00            [12]  528 	add	a,#_samples
      000062 FA               [12]  529 	mov	r2,a
      000063 EB               [12]  530 	mov	a,r3
      000064 34s00            [12]  531 	addc	a,#(_samples >> 8)
      000066 FB               [12]  532 	mov	r3,a
      000067 C0 07            [24]  533 	push	ar7
      000069 C0 06            [24]  534 	push	ar6
      00006B C0 03            [24]  535 	push	ar3
      00006D C0 02            [24]  536 	push	ar2
      00006F 12r00r00         [24]  537 	lcall	_rand
      000072 E5 82            [12]  538 	mov	a,dpl
      000074 85 83 F0         [24]  539 	mov	b,dph
      000077 D0 02            [24]  540 	pop	ar2
      000079 D0 03            [24]  541 	pop	ar3
      00007B D0 06            [24]  542 	pop	ar6
      00007D D0 07            [24]  543 	pop	ar7
      00007F 30 E0 06         [24]  544 	jnb	acc.0,00114$
      000082 7C FF            [12]  545 	mov	r4,#0xff
      000084 7D FF            [12]  546 	mov	r5,#0xff
      000086 80 04            [24]  547 	sjmp	00115$
      000088                        548 00114$:
      000088 7C 01            [12]  549 	mov	r4,#0x01
      00008A 7D 00            [12]  550 	mov	r5,#0x00
      00008C                        551 00115$:
      00008C C0 06            [24]  552 	push	ar6
      00008E C0 07            [24]  553 	push	ar7
      000090 C0 05            [24]  554 	push	ar5
      000092 C0 04            [24]  555 	push	ar4
      000094 C0 03            [24]  556 	push	ar3
      000096 C0 02            [24]  557 	push	ar2
      000098 12r00r00         [24]  558 	lcall	_rand
      00009B AE 82            [24]  559 	mov	r6,dpl
      00009D AF 83            [24]  560 	mov	r7,dph
      00009F D0 02            [24]  561 	pop	ar2
      0000A1 D0 03            [24]  562 	pop	ar3
      0000A3 D0 04            [24]  563 	pop	ar4
      0000A5 D0 05            [24]  564 	pop	ar5
      0000A7 C0 03            [24]  565 	push	ar3
      0000A9 C0 02            [24]  566 	push	ar2
      0000AB C0 06            [24]  567 	push	ar6
      0000AD C0 07            [24]  568 	push	ar7
      0000AF 8C 82            [24]  569 	mov	dpl,r4
      0000B1 8D 83            [24]  570 	mov	dph,r5
      0000B3 12r00r00         [24]  571 	lcall	__mulint
      0000B6 AE 82            [24]  572 	mov	r6,dpl
      0000B8 AF 83            [24]  573 	mov	r7,dph
      0000BA 15 81            [12]  574 	dec	sp
      0000BC 15 81            [12]  575 	dec	sp
      0000BE D0 02            [24]  576 	pop	ar2
      0000C0 D0 03            [24]  577 	pop	ar3
      0000C2 8A 82            [24]  578 	mov	dpl,r2
      0000C4 8B 83            [24]  579 	mov	dph,r3
      0000C6 EE               [12]  580 	mov	a,r6
      0000C7 F0               [24]  581 	movx	@dptr,a
      0000C8 EF               [12]  582 	mov	a,r7
      0000C9 A3               [24]  583 	inc	dptr
      0000CA F0               [24]  584 	movx	@dptr,a
                                    585 ;	main.c:36: for (j = 0; j < (1 << N); j++)
      0000CB A8*00            [24]  586 	mov	r0,_bp
      0000CD 08               [12]  587 	inc	r0
      0000CE 06               [12]  588 	inc	@r0
      0000CF B6 00 02         [24]  589 	cjne	@r0,#0x00,00143$
      0000D2 08               [12]  590 	inc	r0
      0000D3 06               [12]  591 	inc	@r0
      0000D4                        592 00143$:
      0000D4 A8*00            [24]  593 	mov	r0,_bp
      0000D6 08               [12]  594 	inc	r0
      0000D7 C3               [12]  595 	clr	c
      0000D8 E6               [12]  596 	mov	a,@r0
      0000D9 94 40            [12]  597 	subb	a,#0x40
      0000DB 08               [12]  598 	inc	r0
      0000DC E6               [12]  599 	mov	a,@r0
      0000DD 64 80            [12]  600 	xrl	a,#0x80
      0000DF 94 80            [12]  601 	subb	a,#0x80
      0000E1 D0 07            [24]  602 	pop	ar7
      0000E3 D0 06            [24]  603 	pop	ar6
      0000E5 50 03            [24]  604 	jnc	00144$
      0000E7 02r00r54         [24]  605 	ljmp	00106$
      0000EA                        606 00144$:
                                    607 ;	main.c:39: printf("DO FFT IFFT %d\r\n", i);
      0000EA C0 07            [24]  608 	push	ar7
      0000EC C0 06            [24]  609 	push	ar6
      0000EE C0 06            [24]  610 	push	ar6
      0000F0 C0 07            [24]  611 	push	ar7
      0000F2 74r00            [12]  612 	mov	a,#___str_0
      0000F4 C0 E0            [24]  613 	push	acc
      0000F6 74s00            [12]  614 	mov	a,#(___str_0 >> 8)
      0000F8 C0 E0            [24]  615 	push	acc
      0000FA 74 80            [12]  616 	mov	a,#0x80
      0000FC C0 E0            [24]  617 	push	acc
      0000FE 12r00r00         [24]  618 	lcall	_printf
      000101 E5 81            [12]  619 	mov	a,sp
      000103 24 FB            [12]  620 	add	a,#0xfb
      000105 F5 81            [12]  621 	mov	sp,a
                                    622 ;	main.c:41: memcpy(fft, samples, sizeof (samples));
      000107 74 80            [12]  623 	mov	a,#0x80
      000109 C0 E0            [24]  624 	push	acc
      00010B E4               [12]  625 	clr	a
      00010C C0 E0            [24]  626 	push	acc
      00010E 74r00            [12]  627 	mov	a,#_samples
      000110 C0 E0            [24]  628 	push	acc
      000112 74s00            [12]  629 	mov	a,#(_samples >> 8)
      000114 C0 E0            [24]  630 	push	acc
      000116 E4               [12]  631 	clr	a
      000117 C0 E0            [24]  632 	push	acc
      000119 90r00r80         [24]  633 	mov	dptr,#_fft
      00011C 75 F0 00         [24]  634 	mov	b,#0x00
      00011F 12r00r00         [24]  635 	lcall	___memcpy
      000122 E5 81            [12]  636 	mov	a,sp
      000124 24 FB            [12]  637 	add	a,#0xfb
      000126 F5 81            [12]  638 	mov	sp,a
                                    639 ;	main.c:42: scale = fix_fftr(fft, N, 0);		
      000128 E4               [12]  640 	clr	a
      000129 C0 E0            [24]  641 	push	acc
      00012B C0 E0            [24]  642 	push	acc
      00012D 74 06            [12]  643 	mov	a,#0x06
      00012F C0 E0            [24]  644 	push	acc
      000131 E4               [12]  645 	clr	a
      000132 C0 E0            [24]  646 	push	acc
      000134 90r00r80         [24]  647 	mov	dptr,#_fft
      000137 75 F0 00         [24]  648 	mov	b,#0x00
      00013A 12r00r00         [24]  649 	lcall	_fix_fftr
      00013D E5 81            [12]  650 	mov	a,sp
      00013F 24 FC            [12]  651 	add	a,#0xfc
      000141 F5 81            [12]  652 	mov	sp,a
                                    653 ;	main.c:49: memcpy(ifft, fft, sizeof (fft));
      000143 74 80            [12]  654 	mov	a,#0x80
      000145 C0 E0            [24]  655 	push	acc
      000147 E4               [12]  656 	clr	a
      000148 C0 E0            [24]  657 	push	acc
      00014A 74r80            [12]  658 	mov	a,#_fft
      00014C C0 E0            [24]  659 	push	acc
      00014E 74s00            [12]  660 	mov	a,#(_fft >> 8)
      000150 C0 E0            [24]  661 	push	acc
      000152 E4               [12]  662 	clr	a
      000153 C0 E0            [24]  663 	push	acc
      000155 90r01r00         [24]  664 	mov	dptr,#_ifft
      000158 75 F0 00         [24]  665 	mov	b,#0x00
      00015B 12r00r00         [24]  666 	lcall	___memcpy
      00015E E5 81            [12]  667 	mov	a,sp
      000160 24 FB            [12]  668 	add	a,#0xfb
      000162 F5 81            [12]  669 	mov	sp,a
                                    670 ;	main.c:50: scale = fix_fftr(ifft, N, 1);
      000164 74 01            [12]  671 	mov	a,#0x01
      000166 C0 E0            [24]  672 	push	acc
      000168 E4               [12]  673 	clr	a
      000169 C0 E0            [24]  674 	push	acc
      00016B 74 06            [12]  675 	mov	a,#0x06
      00016D C0 E0            [24]  676 	push	acc
      00016F E4               [12]  677 	clr	a
      000170 C0 E0            [24]  678 	push	acc
      000172 90r01r00         [24]  679 	mov	dptr,#_ifft
      000175 75 F0 00         [24]  680 	mov	b,#0x00
      000178 12r00r00         [24]  681 	lcall	_fix_fftr
      00017B AC 82            [24]  682 	mov	r4,dpl
      00017D AD 83            [24]  683 	mov	r5,dph
      00017F E5 81            [12]  684 	mov	a,sp
      000181 24 FC            [12]  685 	add	a,#0xfc
      000183 F5 81            [12]  686 	mov	sp,a
      000185 D0 06            [24]  687 	pop	ar6
      000187 D0 07            [24]  688 	pop	ar7
      000189 E5*00            [12]  689 	mov	a,_bp
      00018B 24 03            [12]  690 	add	a,#0x03
      00018D F8               [12]  691 	mov	r0,a
      00018E A6 04            [24]  692 	mov	@r0,ar4
      000190 08               [12]  693 	inc	r0
      000191 A6 05            [24]  694 	mov	@r0,ar5
                                    695 ;	main.c:52: if (print)
      000193 78r00            [12]  696 	mov	r0,#_print
      000195 E6               [12]  697 	mov	a,@r0
      000196 70 03            [24]  698 	jnz	00145$
      000198 02r02r48         [24]  699 	ljmp	00104$
      00019B                        700 00145$:
                                    701 ;	main.c:53: for (j = 0; j < (1 << N); j++)
      00019B A8*00            [24]  702 	mov	r0,_bp
      00019D 08               [12]  703 	inc	r0
      00019E E4               [12]  704 	clr	a
      00019F F6               [12]  705 	mov	@r0,a
      0001A0 08               [12]  706 	inc	r0
      0001A1 F6               [12]  707 	mov	@r0,a
      0001A2                        708 00108$:
                                    709 ;	main.c:55: samples[j], ifft[j] * (1 << scale));
      0001A2 C0 06            [24]  710 	push	ar6
      0001A4 C0 07            [24]  711 	push	ar7
      0001A6 A8*00            [24]  712 	mov	r0,_bp
      0001A8 08               [12]  713 	inc	r0
      0001A9 E6               [12]  714 	mov	a,@r0
      0001AA 25 E0            [12]  715 	add	a,acc
      0001AC FE               [12]  716 	mov	r6,a
      0001AD 08               [12]  717 	inc	r0
      0001AE E6               [12]  718 	mov	a,@r0
      0001AF 33               [12]  719 	rlc	a
      0001B0 FF               [12]  720 	mov	r7,a
      0001B1 EE               [12]  721 	mov	a,r6
      0001B2 24r00            [12]  722 	add	a,#_ifft
      0001B4 F5 82            [12]  723 	mov	dpl,a
      0001B6 EF               [12]  724 	mov	a,r7
      0001B7 34s01            [12]  725 	addc	a,#(_ifft >> 8)
      0001B9 F5 83            [12]  726 	mov	dph,a
      0001BB E0               [24]  727 	movx	a,@dptr
      0001BC FC               [12]  728 	mov	r4,a
      0001BD A3               [24]  729 	inc	dptr
      0001BE E0               [24]  730 	movx	a,@dptr
      0001BF FD               [12]  731 	mov	r5,a
      0001C0 E5*00            [12]  732 	mov	a,_bp
      0001C2 24 03            [12]  733 	add	a,#0x03
      0001C4 F8               [12]  734 	mov	r0,a
      0001C5 86 03            [24]  735 	mov	ar3,@r0
      0001C7 8B F0            [24]  736 	mov	b,r3
      0001C9 05 F0            [12]  737 	inc	b
      0001CB 7B 01            [12]  738 	mov	r3,#0x01
      0001CD 7A 00            [12]  739 	mov	r2,#0x00
      0001CF 80 06            [24]  740 	sjmp	00147$
      0001D1                        741 00146$:
      0001D1 EB               [12]  742 	mov	a,r3
      0001D2 2B               [12]  743 	add	a,r3
      0001D3 FB               [12]  744 	mov	r3,a
      0001D4 EA               [12]  745 	mov	a,r2
      0001D5 33               [12]  746 	rlc	a
      0001D6 FA               [12]  747 	mov	r2,a
      0001D7                        748 00147$:
      0001D7 D5 F0 F7         [24]  749 	djnz	b,00146$
      0001DA C0 07            [24]  750 	push	ar7
      0001DC C0 06            [24]  751 	push	ar6
      0001DE C0 03            [24]  752 	push	ar3
      0001E0 C0 02            [24]  753 	push	ar2
      0001E2 8C 82            [24]  754 	mov	dpl,r4
      0001E4 8D 83            [24]  755 	mov	dph,r5
      0001E6 12r00r00         [24]  756 	lcall	__mulint
      0001E9 AC 82            [24]  757 	mov	r4,dpl
      0001EB AD 83            [24]  758 	mov	r5,dph
      0001ED 15 81            [12]  759 	dec	sp
      0001EF 15 81            [12]  760 	dec	sp
      0001F1 D0 06            [24]  761 	pop	ar6
      0001F3 D0 07            [24]  762 	pop	ar7
      0001F5 EE               [12]  763 	mov	a,r6
      0001F6 24r00            [12]  764 	add	a,#_samples
      0001F8 F5 82            [12]  765 	mov	dpl,a
      0001FA EF               [12]  766 	mov	a,r7
      0001FB 34s00            [12]  767 	addc	a,#(_samples >> 8)
      0001FD F5 83            [12]  768 	mov	dph,a
      0001FF E0               [24]  769 	movx	a,@dptr
      000200 FE               [12]  770 	mov	r6,a
      000201 A3               [24]  771 	inc	dptr
      000202 E0               [24]  772 	movx	a,@dptr
      000203 FF               [12]  773 	mov	r7,a
                                    774 ;	main.c:54: printf("% 8d% 8d\r\n",
      000204 C0 07            [24]  775 	push	ar7
      000206 C0 06            [24]  776 	push	ar6
      000208 C0 04            [24]  777 	push	ar4
      00020A C0 05            [24]  778 	push	ar5
      00020C C0 06            [24]  779 	push	ar6
      00020E C0 07            [24]  780 	push	ar7
      000210 74r11            [12]  781 	mov	a,#___str_1
      000212 C0 E0            [24]  782 	push	acc
      000214 74s00            [12]  783 	mov	a,#(___str_1 >> 8)
      000216 C0 E0            [24]  784 	push	acc
      000218 74 80            [12]  785 	mov	a,#0x80
      00021A C0 E0            [24]  786 	push	acc
      00021C 12r00r00         [24]  787 	lcall	_printf
      00021F E5 81            [12]  788 	mov	a,sp
      000221 24 F9            [12]  789 	add	a,#0xf9
      000223 F5 81            [12]  790 	mov	sp,a
      000225 D0 06            [24]  791 	pop	ar6
      000227 D0 07            [24]  792 	pop	ar7
                                    793 ;	main.c:53: for (j = 0; j < (1 << N); j++)
      000229 A8*00            [24]  794 	mov	r0,_bp
      00022B 08               [12]  795 	inc	r0
      00022C 06               [12]  796 	inc	@r0
      00022D B6 00 02         [24]  797 	cjne	@r0,#0x00,00148$
      000230 08               [12]  798 	inc	r0
      000231 06               [12]  799 	inc	@r0
      000232                        800 00148$:
      000232 A8*00            [24]  801 	mov	r0,_bp
      000234 08               [12]  802 	inc	r0
      000235 C3               [12]  803 	clr	c
      000236 E6               [12]  804 	mov	a,@r0
      000237 94 40            [12]  805 	subb	a,#0x40
      000239 08               [12]  806 	inc	r0
      00023A E6               [12]  807 	mov	a,@r0
      00023B 64 80            [12]  808 	xrl	a,#0x80
      00023D 94 80            [12]  809 	subb	a,#0x80
      00023F D0 07            [24]  810 	pop	ar7
      000241 D0 06            [24]  811 	pop	ar6
      000243 50 03            [24]  812 	jnc	00149$
      000245 02r01rA2         [24]  813 	ljmp	00108$
      000248                        814 00149$:
      000248                        815 00104$:
                                    816 ;	main.c:57: printf("DONE\r\n\r\n");
      000248 C0 07            [24]  817 	push	ar7
      00024A C0 06            [24]  818 	push	ar6
      00024C 74r1C            [12]  819 	mov	a,#___str_2
      00024E C0 E0            [24]  820 	push	acc
      000250 74s00            [12]  821 	mov	a,#(___str_2 >> 8)
      000252 C0 E0            [24]  822 	push	acc
      000254 74 80            [12]  823 	mov	a,#0x80
      000256 C0 E0            [24]  824 	push	acc
      000258 12r00r00         [24]  825 	lcall	_printf
      00025B 15 81            [12]  826 	dec	sp
      00025D 15 81            [12]  827 	dec	sp
      00025F 15 81            [12]  828 	dec	sp
      000261 D0 06            [24]  829 	pop	ar6
      000263 D0 07            [24]  830 	pop	ar7
                                    831 ;	main.c:35: for (i = 0; 1; i++) {
      000265 0E               [12]  832 	inc	r6
      000266 BE 00 01         [24]  833 	cjne	r6,#0x00,00150$
      000269 0F               [12]  834 	inc	r7
      00026A                        835 00150$:
      00026A 02r00r4D         [24]  836 	ljmp	00117$
                                    837 ;	main.c:62: return;
                                    838 ;	main.c:63: }
      00026D 85*00 81         [24]  839 	mov	sp,_bp
      000270 D0*00            [24]  840 	pop	_bp
      000272 22               [24]  841 	ret
                                    842 	.area CSEG    (CODE)
                                    843 	.area CONST   (CODE)
                                    844 	.area CONST   (CODE)
      000000                        845 ___str_0:
      000000 44 4F 20 46 46 54 20   846 	.ascii "DO FFT IFFT %d"
             49 46 46 54 20 25 64
      00000E 0D                     847 	.db 0x0d
      00000F 0A                     848 	.db 0x0a
      000010 00                     849 	.db 0x00
                                    850 	.area CSEG    (CODE)
                                    851 	.area CONST   (CODE)
      000011                        852 ___str_1:
      000011 25 20 38 64 25 20 38   853 	.ascii "% 8d% 8d"
             64
      000019 0D                     854 	.db 0x0d
      00001A 0A                     855 	.db 0x0a
      00001B 00                     856 	.db 0x00
                                    857 	.area CSEG    (CODE)
                                    858 	.area CONST   (CODE)
      00001C                        859 ___str_2:
      00001C 44 4F 4E 45            860 	.ascii "DONE"
      000020 0D                     861 	.db 0x0d
      000021 0A                     862 	.db 0x0a
      000022 0D                     863 	.db 0x0d
      000023 0A                     864 	.db 0x0a
      000024 00                     865 	.db 0x00
                                    866 	.area CSEG    (CODE)
                                    867 	.area XINIT   (CODE)
                                    868 	.area CABS    (ABS,CODE)
