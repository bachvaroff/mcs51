                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module walk
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _int0
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _puts
                                     16 	.globl _printf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0	=	0x0080
                           000081   146 _SP	=	0x0081
                           000082   147 _DPL	=	0x0082
                           000083   148 _DPH	=	0x0083
                           000087   149 _PCON	=	0x0087
                           000088   150 _TCON	=	0x0088
                           000089   151 _TMOD	=	0x0089
                           00008A   152 _TL0	=	0x008a
                           00008B   153 _TL1	=	0x008b
                           00008C   154 _TH0	=	0x008c
                           00008D   155 _TH1	=	0x008d
                           000090   156 _P1	=	0x0090
                           000098   157 _SCON	=	0x0098
                           000099   158 _SBUF	=	0x0099
                           0000A0   159 _P2	=	0x00a0
                           0000A8   160 _IE	=	0x00a8
                           0000B0   161 _P3	=	0x00b0
                           0000B8   162 _IP	=	0x00b8
                           0000C8   163 _T2CON	=	0x00c8
                           0000C9   164 _T2MOD	=	0x00c9
                           0000CA   165 _RCAP2L	=	0x00ca
                           0000CB   166 _RCAP2H	=	0x00cb
                           0000CC   167 _TL2	=	0x00cc
                           0000CD   168 _TH2	=	0x00cd
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000E0   171 _A	=	0x00e0
                           0000F0   172 _B	=	0x00f0
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000090   202 _T2	=	0x0090
                           000091   203 _T2EX	=	0x0091
                           000098   204 _RI	=	0x0098
                           000099   205 _TI	=	0x0099
                           00009A   206 _RB8	=	0x009a
                           00009B   207 _TB8	=	0x009b
                           00009C   208 _REN	=	0x009c
                           00009D   209 _SM2	=	0x009d
                           00009E   210 _SM1	=	0x009e
                           00009F   211 _SM0	=	0x009f
                           0000A0   212 _P2_0	=	0x00a0
                           0000A1   213 _P2_1	=	0x00a1
                           0000A2   214 _P2_2	=	0x00a2
                           0000A3   215 _P2_3	=	0x00a3
                           0000A4   216 _P2_4	=	0x00a4
                           0000A5   217 _P2_5	=	0x00a5
                           0000A6   218 _P2_6	=	0x00a6
                           0000A7   219 _P2_7	=	0x00a7
                           0000A8   220 _EX0	=	0x00a8
                           0000A9   221 _ET0	=	0x00a9
                           0000AA   222 _EX1	=	0x00aa
                           0000AB   223 _ET1	=	0x00ab
                           0000AC   224 _ES	=	0x00ac
                           0000AD   225 _ET2	=	0x00ad
                           0000AF   226 _EA	=	0x00af
                           0000B0   227 _P3_0	=	0x00b0
                           0000B1   228 _P3_1	=	0x00b1
                           0000B2   229 _P3_2	=	0x00b2
                           0000B3   230 _P3_3	=	0x00b3
                           0000B4   231 _P3_4	=	0x00b4
                           0000B5   232 _P3_5	=	0x00b5
                           0000B6   233 _P3_6	=	0x00b6
                           0000B7   234 _P3_7	=	0x00b7
                           0000B0   235 _RXD	=	0x00b0
                           0000B1   236 _TXD	=	0x00b1
                           0000B2   237 _INT0	=	0x00b2
                           0000B3   238 _INT1	=	0x00b3
                           0000B4   239 _T0	=	0x00b4
                           0000B5   240 _T1	=	0x00b5
                           0000B6   241 _WR	=	0x00b6
                           0000B7   242 _RD	=	0x00b7
                           0000B8   243 _PX0	=	0x00b8
                           0000B9   244 _PT0	=	0x00b9
                           0000BA   245 _PX1	=	0x00ba
                           0000BB   246 _PT1	=	0x00bb
                           0000BC   247 _PS	=	0x00bc
                           0000BD   248 _PT2	=	0x00bd
                           0000C8   249 _T2CON_0	=	0x00c8
                           0000C9   250 _T2CON_1	=	0x00c9
                           0000CA   251 _T2CON_2	=	0x00ca
                           0000CB   252 _T2CON_3	=	0x00cb
                           0000CC   253 _T2CON_4	=	0x00cc
                           0000CD   254 _T2CON_5	=	0x00cd
                           0000CE   255 _T2CON_6	=	0x00ce
                           0000CF   256 _T2CON_7	=	0x00cf
                           0000C8   257 _CP_RL2	=	0x00c8
                           0000C9   258 _C_T2	=	0x00c9
                           0000CA   259 _TR2	=	0x00ca
                           0000CB   260 _EXEN2	=	0x00cb
                           0000CC   261 _TCLK	=	0x00cc
                           0000CD   262 _RCLK	=	0x00cd
                           0000CE   263 _EXF2	=	0x00ce
                           0000CF   264 _TF2	=	0x00cf
                           0000D0   265 _P	=	0x00d0
                           0000D1   266 _FL	=	0x00d1
                           0000D2   267 _OV	=	0x00d2
                           0000D3   268 _RS0	=	0x00d3
                           0000D4   269 _RS1	=	0x00d4
                           0000D5   270 _F0	=	0x00d5
                           0000D6   271 _AC	=	0x00d6
                           0000D7   272 _CY	=	0x00d7
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; internal ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area DSEG    (DATA)
                                    284 ;--------------------------------------------------------
                                    285 ; overlayable items in internal ram 
                                    286 ;--------------------------------------------------------
                                    287 ;--------------------------------------------------------
                                    288 ; Stack segment in internal ram 
                                    289 ;--------------------------------------------------------
                                    290 	.area	SSEG
      000000                        291 __start__stack:
      000000                        292 	.ds	1
                                    293 
                                    294 ;--------------------------------------------------------
                                    295 ; indirectly addressable internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area ISEG    (DATA)
      000000                        298 _i0:
      000000                        299 	.ds 1
      000001                        300 _OE76:
      000001                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; absolute internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area IABS    (ABS,DATA)
                                    306 	.area IABS    (ABS,DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; bit data
                                    309 ;--------------------------------------------------------
                                    310 	.area BSEG    (BIT)
                                    311 ;--------------------------------------------------------
                                    312 ; paged external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area PSEG    (PAG,XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XSEG    (XDATA)
                           008000   319 _RND	=	0x8000
      000000                        320 _g:
      000000                        321 	.ds 9216
      002400                        322 _queue:
      002400                        323 	.ds 36864
      00B400                        324 _hp:
      00B400                        325 	.ds 2
      00B402                        326 _tp:
      00B402                        327 	.ds 2
                           00F006   328 _OEreg	=	0xf006
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _neigh:
      000000                        338 	.ds 64
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  355 	ljmp	_int0
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000006                        376 __sdcc_program_startup:
      000006 02r06r9B         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'int0'
                                    385 ;------------------------------------------------------------
                                    386 ;	walk.c:12: void int0(void) __interrupt IE0_VECTOR __using 1 {
                                    387 ;	-----------------------------------------
                                    388 ;	 function int0
                                    389 ;	-----------------------------------------
      000000                        390 _int0:
                           00000F   391 	ar7 = 0x0f
                           00000E   392 	ar6 = 0x0e
                           00000D   393 	ar5 = 0x0d
                           00000C   394 	ar4 = 0x0c
                           00000B   395 	ar3 = 0x0b
                           00000A   396 	ar2 = 0x0a
                           000009   397 	ar1 = 0x09
                           000008   398 	ar0 = 0x08
      000000 C0 D0            [24]  399 	push	psw
      000002 75 D0 08         [24]  400 	mov	psw,#0x08
                                    401 ;	walk.c:13: i0 = 0u;
      000005 78r00            [12]  402 	mov	r0,#_i0
      000007 76 00            [12]  403 	mov	@r0,#0x00
                                    404 ;	walk.c:14: }
      000009 D0 D0            [24]  405 	pop	psw
      00000B 32               [24]  406 	reti
                                    407 ;	eliminated unneeded push/pop dpl
                                    408 ;	eliminated unneeded push/pop dph
                                    409 ;	eliminated unneeded push/pop b
                                    410 ;	eliminated unneeded push/pop acc
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'bang'
                                    413 ;------------------------------------------------------------
                                    414 ;	walk.c:20: static void bang(void) {
                                    415 ;	-----------------------------------------
                                    416 ;	 function bang
                                    417 ;	-----------------------------------------
      00000C                        418 _bang:
                           000007   419 	ar7 = 0x07
                           000006   420 	ar6 = 0x06
                           000005   421 	ar5 = 0x05
                           000004   422 	ar4 = 0x04
                           000003   423 	ar3 = 0x03
                           000002   424 	ar2 = 0x02
                           000001   425 	ar1 = 0x01
                           000000   426 	ar0 = 0x00
                                    427 ;	walk.c:21: (void)puts("Memory error");
      00000C 90r00r00         [24]  428 	mov	dptr,#___str_0
      00000F 75 F0 80         [24]  429 	mov	b,#0x80
      000012 12r00r00         [24]  430 	lcall	_puts
                                    431 ;	walk.c:17: PCON |= 2;
      000015 43 87 02         [24]  432 	orl	_PCON,#0x02
                                    433 ;	walk.c:24: return;
                                    434 ;	walk.c:25: }
      000018 22               [24]  435 	ret
                                    436 ;------------------------------------------------------------
                                    437 ;Allocation info for local variables in function 'setOE'
                                    438 ;------------------------------------------------------------
                                    439 ;mask                      Allocated to registers r7 
                                    440 ;------------------------------------------------------------
                                    441 ;	walk.c:67: static void setOE(uint8_t mask) {
                                    442 ;	-----------------------------------------
                                    443 ;	 function setOE
                                    444 ;	-----------------------------------------
      000019                        445 _setOE:
      000019 AF 82            [24]  446 	mov	r7,dpl
                                    447 ;	walk.c:68: OE76 |= mask;
      00001B 78r01            [12]  448 	mov	r0,#_OE76
      00001D EF               [12]  449 	mov	a,r7
      00001E 46               [12]  450 	orl	a,@r0
      00001F F6               [12]  451 	mov	@r0,a
                                    452 ;	walk.c:69: P1_7 = 0;
                                    453 ;	assignBit
      000020 C2 97            [12]  454 	clr	_P1_7
                                    455 ;	walk.c:74: __endasm;
      000022 00               [12]  456 	nop
      000023 00               [12]  457 	nop
      000024 00               [12]  458 	nop
                                    459 ;	walk.c:75: OEreg = OE76;
      000025 78r01            [12]  460 	mov	r0,#_OE76
      000027 90 F0 06         [24]  461 	mov	dptr,#_OEreg
      00002A E6               [12]  462 	mov	a,@r0
      00002B F0               [24]  463 	movx	@dptr,a
                                    464 ;	walk.c:76: P1_7 = 1;
                                    465 ;	assignBit
      00002C D2 97            [12]  466 	setb	_P1_7
                                    467 ;	walk.c:81: __endasm;
      00002E 00               [12]  468 	nop
      00002F 00               [12]  469 	nop
      000030 00               [12]  470 	nop
                                    471 ;	walk.c:83: return;
                                    472 ;	walk.c:84: }
      000031 22               [24]  473 	ret
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'unsetOE'
                                    476 ;------------------------------------------------------------
                                    477 ;mask                      Allocated to registers r7 
                                    478 ;------------------------------------------------------------
                                    479 ;	walk.c:86: static void unsetOE(uint8_t mask) {
                                    480 ;	-----------------------------------------
                                    481 ;	 function unsetOE
                                    482 ;	-----------------------------------------
      000032                        483 _unsetOE:
                                    484 ;	walk.c:87: OE76 &= ~mask;
      000032 E5 82            [12]  485 	mov	a,dpl
      000034 F4               [12]  486 	cpl	a
      000035 FF               [12]  487 	mov	r7,a
      000036 78r01            [12]  488 	mov	r0,#_OE76
      000038 56               [12]  489 	anl	a,@r0
      000039 F6               [12]  490 	mov	@r0,a
                                    491 ;	walk.c:88: P1_7 = 0;
                                    492 ;	assignBit
      00003A C2 97            [12]  493 	clr	_P1_7
                                    494 ;	walk.c:93: __endasm;
      00003C 00               [12]  495 	nop
      00003D 00               [12]  496 	nop
      00003E 00               [12]  497 	nop
                                    498 ;	walk.c:94: OEreg = OE76;
      00003F 78r01            [12]  499 	mov	r0,#_OE76
      000041 90 F0 06         [24]  500 	mov	dptr,#_OEreg
      000044 E6               [12]  501 	mov	a,@r0
      000045 F0               [24]  502 	movx	@dptr,a
                                    503 ;	walk.c:95: P1_7 = 1;
                                    504 ;	assignBit
      000046 D2 97            [12]  505 	setb	_P1_7
                                    506 ;	walk.c:100: __endasm;
      000048 00               [12]  507 	nop
      000049 00               [12]  508 	nop
      00004A 00               [12]  509 	nop
                                    510 ;	walk.c:102: return;
                                    511 ;	walk.c:103: }
      00004B 22               [24]  512 	ret
                                    513 ;------------------------------------------------------------
                                    514 ;Allocation info for local variables in function 'flipOE'
                                    515 ;------------------------------------------------------------
                                    516 ;mask                      Allocated to registers r7 
                                    517 ;------------------------------------------------------------
                                    518 ;	walk.c:105: static void flipOE(uint8_t mask) {
                                    519 ;	-----------------------------------------
                                    520 ;	 function flipOE
                                    521 ;	-----------------------------------------
      00004C                        522 _flipOE:
      00004C AF 82            [24]  523 	mov	r7,dpl
                                    524 ;	walk.c:106: OE76 ^= mask;
      00004E 78r01            [12]  525 	mov	r0,#_OE76
      000050 EF               [12]  526 	mov	a,r7
      000051 66               [12]  527 	xrl	a,@r0
      000052 F6               [12]  528 	mov	@r0,a
                                    529 ;	walk.c:107: P1_7 = 0;
                                    530 ;	assignBit
      000053 C2 97            [12]  531 	clr	_P1_7
                                    532 ;	walk.c:112: __endasm;
      000055 00               [12]  533 	nop
      000056 00               [12]  534 	nop
      000057 00               [12]  535 	nop
                                    536 ;	walk.c:113: OEreg = OE76;
      000058 78r01            [12]  537 	mov	r0,#_OE76
      00005A 90 F0 06         [24]  538 	mov	dptr,#_OEreg
      00005D E6               [12]  539 	mov	a,@r0
      00005E F0               [24]  540 	movx	@dptr,a
                                    541 ;	walk.c:114: P1_7 = 1;
                                    542 ;	assignBit
      00005F D2 97            [12]  543 	setb	_P1_7
                                    544 ;	walk.c:119: __endasm;
      000061 00               [12]  545 	nop
      000062 00               [12]  546 	nop
      000063 00               [12]  547 	nop
                                    548 ;	walk.c:121: return;
                                    549 ;	walk.c:122: }
      000064 22               [24]  550 	ret
                                    551 ;------------------------------------------------------------
                                    552 ;Allocation info for local variables in function 'update'
                                    553 ;------------------------------------------------------------
                                    554 ;cur                       Allocated to stack - _bp -5
                                    555 ;j                         Allocated to stack - _bp -6
                                    556 ;t                         Allocated to stack - _bp +1
                                    557 ;sloc0                     Allocated to stack - _bp +4
                                    558 ;sloc1                     Allocated to stack - _bp +6
                                    559 ;sloc2                     Allocated to stack - _bp +8
                                    560 ;------------------------------------------------------------
                                    561 ;	walk.c:124: static uint8_t update(struct node *t, struct node *cur, uint8_t j) {
                                    562 ;	-----------------------------------------
                                    563 ;	 function update
                                    564 ;	-----------------------------------------
      000065                        565 _update:
      000065 C0*00            [24]  566 	push	_bp
      000067 85 81*00         [24]  567 	mov	_bp,sp
      00006A C0 82            [24]  568 	push	dpl
      00006C C0 83            [24]  569 	push	dph
      00006E C0 F0            [24]  570 	push	b
      000070 E5 81            [12]  571 	mov	a,sp
      000072 24 07            [12]  572 	add	a,#0x07
      000074 F5 81            [12]  573 	mov	sp,a
                                    574 ;	walk.c:125: t->r = cur->r + neigh[j].r;
      000076 E5*00            [12]  575 	mov	a,_bp
      000078 24 FB            [12]  576 	add	a,#0xfb
      00007A F8               [12]  577 	mov	r0,a
      00007B 86 02            [24]  578 	mov	ar2,@r0
      00007D 08               [12]  579 	inc	r0
      00007E 86 03            [24]  580 	mov	ar3,@r0
      000080 08               [12]  581 	inc	r0
      000081 86 04            [24]  582 	mov	ar4,@r0
      000083 8A 82            [24]  583 	mov	dpl,r2
      000085 8B 83            [24]  584 	mov	dph,r3
      000087 8C F0            [24]  585 	mov	b,r4
      000089 E5*00            [12]  586 	mov	a,_bp
      00008B 24 04            [12]  587 	add	a,#0x04
      00008D F8               [12]  588 	mov	r0,a
      00008E 12r00r00         [24]  589 	lcall	__gptrget
      000091 F6               [12]  590 	mov	@r0,a
      000092 A3               [24]  591 	inc	dptr
      000093 12r00r00         [24]  592 	lcall	__gptrget
      000096 08               [12]  593 	inc	r0
      000097 F6               [12]  594 	mov	@r0,a
      000098 E5*00            [12]  595 	mov	a,_bp
      00009A 24 FA            [12]  596 	add	a,#0xfa
      00009C F8               [12]  597 	mov	r0,a
      00009D E5*00            [12]  598 	mov	a,_bp
      00009F 24 06            [12]  599 	add	a,#0x06
      0000A1 F9               [12]  600 	mov	r1,a
      0000A2 E6               [12]  601 	mov	a,@r0
      0000A3 75 F0 04         [24]  602 	mov	b,#0x04
      0000A6 A4               [48]  603 	mul	ab
      0000A7 F7               [12]  604 	mov	@r1,a
      0000A8 09               [12]  605 	inc	r1
      0000A9 A7 F0            [24]  606 	mov	@r1,b
      0000AB E5*00            [12]  607 	mov	a,_bp
      0000AD 24 06            [12]  608 	add	a,#0x06
      0000AF F8               [12]  609 	mov	r0,a
      0000B0 E6               [12]  610 	mov	a,@r0
      0000B1 24r00            [12]  611 	add	a,#_neigh
      0000B3 F5 82            [12]  612 	mov	dpl,a
      0000B5 08               [12]  613 	inc	r0
      0000B6 E6               [12]  614 	mov	a,@r0
      0000B7 34s00            [12]  615 	addc	a,#(_neigh >> 8)
      0000B9 F5 83            [12]  616 	mov	dph,a
      0000BB E0               [24]  617 	movx	a,@dptr
      0000BC FF               [12]  618 	mov	r7,a
      0000BD A3               [24]  619 	inc	dptr
      0000BE E0               [24]  620 	movx	a,@dptr
      0000BF FE               [12]  621 	mov	r6,a
      0000C0 E5*00            [12]  622 	mov	a,_bp
      0000C2 24 04            [12]  623 	add	a,#0x04
      0000C4 F8               [12]  624 	mov	r0,a
      0000C5 EF               [12]  625 	mov	a,r7
      0000C6 26               [12]  626 	add	a,@r0
      0000C7 FF               [12]  627 	mov	r7,a
      0000C8 EE               [12]  628 	mov	a,r6
      0000C9 08               [12]  629 	inc	r0
      0000CA 36               [12]  630 	addc	a,@r0
      0000CB FE               [12]  631 	mov	r6,a
      0000CC A8*00            [24]  632 	mov	r0,_bp
      0000CE 08               [12]  633 	inc	r0
      0000CF 86 82            [24]  634 	mov	dpl,@r0
      0000D1 08               [12]  635 	inc	r0
      0000D2 86 83            [24]  636 	mov	dph,@r0
      0000D4 08               [12]  637 	inc	r0
      0000D5 86 F0            [24]  638 	mov	b,@r0
      0000D7 EF               [12]  639 	mov	a,r7
      0000D8 12r00r00         [24]  640 	lcall	__gptrput
      0000DB A3               [24]  641 	inc	dptr
      0000DC EE               [12]  642 	mov	a,r6
      0000DD 12r00r00         [24]  643 	lcall	__gptrput
                                    644 ;	walk.c:126: t->c = cur->c + neigh[j].c;
      0000E0 A8*00            [24]  645 	mov	r0,_bp
      0000E2 08               [12]  646 	inc	r0
      0000E3 E5*00            [12]  647 	mov	a,_bp
      0000E5 24 08            [12]  648 	add	a,#0x08
      0000E7 F9               [12]  649 	mov	r1,a
      0000E8 74 02            [12]  650 	mov	a,#0x02
      0000EA 26               [12]  651 	add	a,@r0
      0000EB F7               [12]  652 	mov	@r1,a
      0000EC E4               [12]  653 	clr	a
      0000ED 08               [12]  654 	inc	r0
      0000EE 36               [12]  655 	addc	a,@r0
      0000EF 09               [12]  656 	inc	r1
      0000F0 F7               [12]  657 	mov	@r1,a
      0000F1 08               [12]  658 	inc	r0
      0000F2 09               [12]  659 	inc	r1
      0000F3 E6               [12]  660 	mov	a,@r0
      0000F4 F7               [12]  661 	mov	@r1,a
      0000F5 74 02            [12]  662 	mov	a,#0x02
      0000F7 2A               [12]  663 	add	a,r2
      0000F8 FA               [12]  664 	mov	r2,a
      0000F9 E4               [12]  665 	clr	a
      0000FA 3B               [12]  666 	addc	a,r3
      0000FB FB               [12]  667 	mov	r3,a
      0000FC 8A 82            [24]  668 	mov	dpl,r2
      0000FE 8B 83            [24]  669 	mov	dph,r3
      000100 8C F0            [24]  670 	mov	b,r4
      000102 12r00r00         [24]  671 	lcall	__gptrget
      000105 FA               [12]  672 	mov	r2,a
      000106 A3               [24]  673 	inc	dptr
      000107 12r00r00         [24]  674 	lcall	__gptrget
      00010A FB               [12]  675 	mov	r3,a
      00010B E5*00            [12]  676 	mov	a,_bp
      00010D 24 06            [12]  677 	add	a,#0x06
      00010F F8               [12]  678 	mov	r0,a
      000110 E6               [12]  679 	mov	a,@r0
      000111 24r00            [12]  680 	add	a,#_neigh
      000113 FC               [12]  681 	mov	r4,a
      000114 08               [12]  682 	inc	r0
      000115 E6               [12]  683 	mov	a,@r0
      000116 34s00            [12]  684 	addc	a,#(_neigh >> 8)
      000118 FD               [12]  685 	mov	r5,a
      000119 8C 82            [24]  686 	mov	dpl,r4
      00011B 8D 83            [24]  687 	mov	dph,r5
      00011D A3               [24]  688 	inc	dptr
      00011E A3               [24]  689 	inc	dptr
      00011F E0               [24]  690 	movx	a,@dptr
      000120 FC               [12]  691 	mov	r4,a
      000121 A3               [24]  692 	inc	dptr
      000122 E0               [24]  693 	movx	a,@dptr
      000123 FD               [12]  694 	mov	r5,a
      000124 EC               [12]  695 	mov	a,r4
      000125 2A               [12]  696 	add	a,r2
      000126 FA               [12]  697 	mov	r2,a
      000127 ED               [12]  698 	mov	a,r5
      000128 3B               [12]  699 	addc	a,r3
      000129 FB               [12]  700 	mov	r3,a
      00012A E5*00            [12]  701 	mov	a,_bp
      00012C 24 08            [12]  702 	add	a,#0x08
      00012E F8               [12]  703 	mov	r0,a
      00012F 86 82            [24]  704 	mov	dpl,@r0
      000131 08               [12]  705 	inc	r0
      000132 86 83            [24]  706 	mov	dph,@r0
      000134 08               [12]  707 	inc	r0
      000135 86 F0            [24]  708 	mov	b,@r0
      000137 EA               [12]  709 	mov	a,r2
      000138 12r00r00         [24]  710 	lcall	__gptrput
      00013B A3               [24]  711 	inc	dptr
      00013C EB               [12]  712 	mov	a,r3
      00013D 12r00r00         [24]  713 	lcall	__gptrput
                                    714 ;	walk.c:128: if (t->r < 0) t->r += ROWS;
      000140 A8*00            [24]  715 	mov	r0,_bp
      000142 08               [12]  716 	inc	r0
      000143 86 82            [24]  717 	mov	dpl,@r0
      000145 08               [12]  718 	inc	r0
      000146 86 83            [24]  719 	mov	dph,@r0
      000148 08               [12]  720 	inc	r0
      000149 86 F0            [24]  721 	mov	b,@r0
      00014B 12r00r00         [24]  722 	lcall	__gptrget
      00014E FD               [12]  723 	mov	r5,a
      00014F A3               [24]  724 	inc	dptr
      000150 12r00r00         [24]  725 	lcall	__gptrget
      000153 FC               [12]  726 	mov	r4,a
      000154 EE               [12]  727 	mov	a,r6
      000155 30 E7 1D         [24]  728 	jnb	acc.7,00104$
      000158 74 30            [12]  729 	mov	a,#0x30
      00015A 2D               [12]  730 	add	a,r5
      00015B FF               [12]  731 	mov	r7,a
      00015C E4               [12]  732 	clr	a
      00015D 3C               [12]  733 	addc	a,r4
      00015E FE               [12]  734 	mov	r6,a
      00015F A8*00            [24]  735 	mov	r0,_bp
      000161 08               [12]  736 	inc	r0
      000162 86 82            [24]  737 	mov	dpl,@r0
      000164 08               [12]  738 	inc	r0
      000165 86 83            [24]  739 	mov	dph,@r0
      000167 08               [12]  740 	inc	r0
      000168 86 F0            [24]  741 	mov	b,@r0
      00016A EF               [12]  742 	mov	a,r7
      00016B 12r00r00         [24]  743 	lcall	__gptrput
      00016E A3               [24]  744 	inc	dptr
      00016F EE               [12]  745 	mov	a,r6
      000170 12r00r00         [24]  746 	lcall	__gptrput
      000173 80 27            [24]  747 	sjmp	00105$
      000175                        748 00104$:
                                    749 ;	walk.c:129: else if (t->r >= ROWS) t->r -= ROWS;
      000175 C3               [12]  750 	clr	c
      000176 ED               [12]  751 	mov	a,r5
      000177 94 30            [12]  752 	subb	a,#0x30
      000179 EC               [12]  753 	mov	a,r4
      00017A 64 80            [12]  754 	xrl	a,#0x80
      00017C 94 80            [12]  755 	subb	a,#0x80
      00017E 40 1C            [24]  756 	jc	00105$
      000180 ED               [12]  757 	mov	a,r5
      000181 24 D0            [12]  758 	add	a,#0xd0
      000183 FD               [12]  759 	mov	r5,a
      000184 EC               [12]  760 	mov	a,r4
      000185 34 FF            [12]  761 	addc	a,#0xff
      000187 FC               [12]  762 	mov	r4,a
      000188 A8*00            [24]  763 	mov	r0,_bp
      00018A 08               [12]  764 	inc	r0
      00018B 86 82            [24]  765 	mov	dpl,@r0
      00018D 08               [12]  766 	inc	r0
      00018E 86 83            [24]  767 	mov	dph,@r0
      000190 08               [12]  768 	inc	r0
      000191 86 F0            [24]  769 	mov	b,@r0
      000193 ED               [12]  770 	mov	a,r5
      000194 12r00r00         [24]  771 	lcall	__gptrput
      000197 A3               [24]  772 	inc	dptr
      000198 EC               [12]  773 	mov	a,r4
      000199 12r00r00         [24]  774 	lcall	__gptrput
      00019C                        775 00105$:
                                    776 ;	walk.c:130: if (t->c < 0) t->c += COLS;
      00019C E5*00            [12]  777 	mov	a,_bp
      00019E 24 08            [12]  778 	add	a,#0x08
      0001A0 F8               [12]  779 	mov	r0,a
      0001A1 86 82            [24]  780 	mov	dpl,@r0
      0001A3 08               [12]  781 	inc	r0
      0001A4 86 83            [24]  782 	mov	dph,@r0
      0001A6 08               [12]  783 	inc	r0
      0001A7 86 F0            [24]  784 	mov	b,@r0
      0001A9 12r00r00         [24]  785 	lcall	__gptrget
      0001AC A3               [24]  786 	inc	dptr
      0001AD 12r00r00         [24]  787 	lcall	__gptrget
      0001B0 30 E7 35         [24]  788 	jnb	acc.7,00109$
      0001B3 E5*00            [12]  789 	mov	a,_bp
      0001B5 24 08            [12]  790 	add	a,#0x08
      0001B7 F8               [12]  791 	mov	r0,a
      0001B8 86 82            [24]  792 	mov	dpl,@r0
      0001BA 08               [12]  793 	inc	r0
      0001BB 86 83            [24]  794 	mov	dph,@r0
      0001BD 08               [12]  795 	inc	r0
      0001BE 86 F0            [24]  796 	mov	b,@r0
      0001C0 12r00r00         [24]  797 	lcall	__gptrget
      0001C3 FE               [12]  798 	mov	r6,a
      0001C4 A3               [24]  799 	inc	dptr
      0001C5 12r00r00         [24]  800 	lcall	__gptrget
      0001C8 FF               [12]  801 	mov	r7,a
      0001C9 74 C0            [12]  802 	mov	a,#0xc0
      0001CB 2E               [12]  803 	add	a,r6
      0001CC FE               [12]  804 	mov	r6,a
      0001CD E4               [12]  805 	clr	a
      0001CE 3F               [12]  806 	addc	a,r7
      0001CF FF               [12]  807 	mov	r7,a
      0001D0 E5*00            [12]  808 	mov	a,_bp
      0001D2 24 08            [12]  809 	add	a,#0x08
      0001D4 F8               [12]  810 	mov	r0,a
      0001D5 86 82            [24]  811 	mov	dpl,@r0
      0001D7 08               [12]  812 	inc	r0
      0001D8 86 83            [24]  813 	mov	dph,@r0
      0001DA 08               [12]  814 	inc	r0
      0001DB 86 F0            [24]  815 	mov	b,@r0
      0001DD EE               [12]  816 	mov	a,r6
      0001DE 12r00r00         [24]  817 	lcall	__gptrput
      0001E1 A3               [24]  818 	inc	dptr
      0001E2 EF               [12]  819 	mov	a,r7
      0001E3 12r00r00         [24]  820 	lcall	__gptrput
      0001E6 80 55            [24]  821 	sjmp	00110$
      0001E8                        822 00109$:
                                    823 ;	walk.c:131: else if (t->c >= COLS) t->c -= COLS;
      0001E8 E5*00            [12]  824 	mov	a,_bp
      0001EA 24 08            [12]  825 	add	a,#0x08
      0001EC F8               [12]  826 	mov	r0,a
      0001ED 86 82            [24]  827 	mov	dpl,@r0
      0001EF 08               [12]  828 	inc	r0
      0001F0 86 83            [24]  829 	mov	dph,@r0
      0001F2 08               [12]  830 	inc	r0
      0001F3 86 F0            [24]  831 	mov	b,@r0
      0001F5 12r00r00         [24]  832 	lcall	__gptrget
      0001F8 FE               [12]  833 	mov	r6,a
      0001F9 A3               [24]  834 	inc	dptr
      0001FA 12r00r00         [24]  835 	lcall	__gptrget
      0001FD FF               [12]  836 	mov	r7,a
      0001FE C3               [12]  837 	clr	c
      0001FF EE               [12]  838 	mov	a,r6
      000200 94 C0            [12]  839 	subb	a,#0xc0
      000202 EF               [12]  840 	mov	a,r7
      000203 64 80            [12]  841 	xrl	a,#0x80
      000205 94 80            [12]  842 	subb	a,#0x80
      000207 40 34            [24]  843 	jc	00110$
      000209 E5*00            [12]  844 	mov	a,_bp
      00020B 24 08            [12]  845 	add	a,#0x08
      00020D F8               [12]  846 	mov	r0,a
      00020E 86 82            [24]  847 	mov	dpl,@r0
      000210 08               [12]  848 	inc	r0
      000211 86 83            [24]  849 	mov	dph,@r0
      000213 08               [12]  850 	inc	r0
      000214 86 F0            [24]  851 	mov	b,@r0
      000216 12r00r00         [24]  852 	lcall	__gptrget
      000219 FE               [12]  853 	mov	r6,a
      00021A A3               [24]  854 	inc	dptr
      00021B 12r00r00         [24]  855 	lcall	__gptrget
      00021E FF               [12]  856 	mov	r7,a
      00021F EE               [12]  857 	mov	a,r6
      000220 24 40            [12]  858 	add	a,#0x40
      000222 FE               [12]  859 	mov	r6,a
      000223 EF               [12]  860 	mov	a,r7
      000224 34 FF            [12]  861 	addc	a,#0xff
      000226 FF               [12]  862 	mov	r7,a
      000227 E5*00            [12]  863 	mov	a,_bp
      000229 24 08            [12]  864 	add	a,#0x08
      00022B F8               [12]  865 	mov	r0,a
      00022C 86 82            [24]  866 	mov	dpl,@r0
      00022E 08               [12]  867 	inc	r0
      00022F 86 83            [24]  868 	mov	dph,@r0
      000231 08               [12]  869 	inc	r0
      000232 86 F0            [24]  870 	mov	b,@r0
      000234 EE               [12]  871 	mov	a,r6
      000235 12r00r00         [24]  872 	lcall	__gptrput
      000238 A3               [24]  873 	inc	dptr
      000239 EF               [12]  874 	mov	a,r7
      00023A 12r00r00         [24]  875 	lcall	__gptrput
      00023D                        876 00110$:
                                    877 ;	walk.c:133: if (g[t->r][t->c] == 0xaau) return 0u;
      00023D A8*00            [24]  878 	mov	r0,_bp
      00023F 08               [12]  879 	inc	r0
      000240 86 82            [24]  880 	mov	dpl,@r0
      000242 08               [12]  881 	inc	r0
      000243 86 83            [24]  882 	mov	dph,@r0
      000245 08               [12]  883 	inc	r0
      000246 86 F0            [24]  884 	mov	b,@r0
      000248 12r00r00         [24]  885 	lcall	__gptrget
      00024B FE               [12]  886 	mov	r6,a
      00024C A3               [24]  887 	inc	dptr
      00024D 12r00r00         [24]  888 	lcall	__gptrget
      000250 FF               [12]  889 	mov	r7,a
      000251 C0 06            [24]  890 	push	ar6
      000253 C0 07            [24]  891 	push	ar7
      000255 90 00 C0         [24]  892 	mov	dptr,#0x00c0
      000258 12r00r00         [24]  893 	lcall	__mulint
      00025B AE 82            [24]  894 	mov	r6,dpl
      00025D AF 83            [24]  895 	mov	r7,dph
      00025F 15 81            [12]  896 	dec	sp
      000261 15 81            [12]  897 	dec	sp
      000263 EE               [12]  898 	mov	a,r6
      000264 24r00            [12]  899 	add	a,#_g
      000266 FE               [12]  900 	mov	r6,a
      000267 EF               [12]  901 	mov	a,r7
      000268 34s00            [12]  902 	addc	a,#(_g >> 8)
      00026A FF               [12]  903 	mov	r7,a
      00026B E5*00            [12]  904 	mov	a,_bp
      00026D 24 08            [12]  905 	add	a,#0x08
      00026F F8               [12]  906 	mov	r0,a
      000270 86 82            [24]  907 	mov	dpl,@r0
      000272 08               [12]  908 	inc	r0
      000273 86 83            [24]  909 	mov	dph,@r0
      000275 08               [12]  910 	inc	r0
      000276 86 F0            [24]  911 	mov	b,@r0
      000278 12r00r00         [24]  912 	lcall	__gptrget
      00027B FC               [12]  913 	mov	r4,a
      00027C A3               [24]  914 	inc	dptr
      00027D 12r00r00         [24]  915 	lcall	__gptrget
      000280 FD               [12]  916 	mov	r5,a
      000281 EC               [12]  917 	mov	a,r4
      000282 2E               [12]  918 	add	a,r6
      000283 F5 82            [12]  919 	mov	dpl,a
      000285 ED               [12]  920 	mov	a,r5
      000286 3F               [12]  921 	addc	a,r7
      000287 F5 83            [12]  922 	mov	dph,a
      000289 E0               [24]  923 	movx	a,@dptr
      00028A FF               [12]  924 	mov	r7,a
      00028B BF AA 05         [24]  925 	cjne	r7,#0xaa,00114$
      00028E 75 82 00         [24]  926 	mov	dpl,#0x00
      000291 80 59            [24]  927 	sjmp	00116$
      000293                        928 00114$:
                                    929 ;	walk.c:134: else if (g[t->r][t->c] != 0x55u) bang();
      000293 A8*00            [24]  930 	mov	r0,_bp
      000295 08               [12]  931 	inc	r0
      000296 86 82            [24]  932 	mov	dpl,@r0
      000298 08               [12]  933 	inc	r0
      000299 86 83            [24]  934 	mov	dph,@r0
      00029B 08               [12]  935 	inc	r0
      00029C 86 F0            [24]  936 	mov	b,@r0
      00029E 12r00r00         [24]  937 	lcall	__gptrget
      0002A1 FE               [12]  938 	mov	r6,a
      0002A2 A3               [24]  939 	inc	dptr
      0002A3 12r00r00         [24]  940 	lcall	__gptrget
      0002A6 FF               [12]  941 	mov	r7,a
      0002A7 C0 06            [24]  942 	push	ar6
      0002A9 C0 07            [24]  943 	push	ar7
      0002AB 90 00 C0         [24]  944 	mov	dptr,#0x00c0
      0002AE 12r00r00         [24]  945 	lcall	__mulint
      0002B1 AE 82            [24]  946 	mov	r6,dpl
      0002B3 AF 83            [24]  947 	mov	r7,dph
      0002B5 15 81            [12]  948 	dec	sp
      0002B7 15 81            [12]  949 	dec	sp
      0002B9 EE               [12]  950 	mov	a,r6
      0002BA 24r00            [12]  951 	add	a,#_g
      0002BC FE               [12]  952 	mov	r6,a
      0002BD EF               [12]  953 	mov	a,r7
      0002BE 34s00            [12]  954 	addc	a,#(_g >> 8)
      0002C0 FF               [12]  955 	mov	r7,a
      0002C1 E5*00            [12]  956 	mov	a,_bp
      0002C3 24 08            [12]  957 	add	a,#0x08
      0002C5 F8               [12]  958 	mov	r0,a
      0002C6 86 82            [24]  959 	mov	dpl,@r0
      0002C8 08               [12]  960 	inc	r0
      0002C9 86 83            [24]  961 	mov	dph,@r0
      0002CB 08               [12]  962 	inc	r0
      0002CC 86 F0            [24]  963 	mov	b,@r0
      0002CE 12r00r00         [24]  964 	lcall	__gptrget
      0002D1 FC               [12]  965 	mov	r4,a
      0002D2 A3               [24]  966 	inc	dptr
      0002D3 12r00r00         [24]  967 	lcall	__gptrget
      0002D6 FD               [12]  968 	mov	r5,a
      0002D7 EC               [12]  969 	mov	a,r4
      0002D8 2E               [12]  970 	add	a,r6
      0002D9 F5 82            [12]  971 	mov	dpl,a
      0002DB ED               [12]  972 	mov	a,r5
      0002DC 3F               [12]  973 	addc	a,r7
      0002DD F5 83            [12]  974 	mov	dph,a
      0002DF E0               [24]  975 	movx	a,@dptr
      0002E0 FF               [12]  976 	mov	r7,a
      0002E1 BF 55 02         [24]  977 	cjne	r7,#0x55,00148$
      0002E4 80 03            [24]  978 	sjmp	00115$
      0002E6                        979 00148$:
      0002E6 12r00r0C         [24]  980 	lcall	_bang
      0002E9                        981 00115$:
                                    982 ;	walk.c:136: return 1u;
      0002E9 75 82 01         [24]  983 	mov	dpl,#0x01
      0002EC                        984 00116$:
                                    985 ;	walk.c:137: }
      0002EC 85*00 81         [24]  986 	mov	sp,_bp
      0002EF D0*00            [24]  987 	pop	_bp
      0002F1 22               [24]  988 	ret
                                    989 ;------------------------------------------------------------
                                    990 ;Allocation info for local variables in function 'walk'
                                    991 ;------------------------------------------------------------
                                    992 ;nstart                    Allocated to registers r5 r6 r7 
                                    993 ;cur                       Allocated to stack - _bp +7
                                    994 ;t                         Allocated to stack - _bp +11
                                    995 ;scramble                  Allocated to stack - _bp +15
                                    996 ;ti                        Allocated to registers r2 
                                    997 ;tj                        Allocated to registers r6 
                                    998 ;tx                        Allocated to stack - _bp +31
                                    999 ;j                         Allocated to stack - _bp +32
                                   1000 ;sloc0                     Allocated to stack - _bp +1
                                   1001 ;sloc1                     Allocated to stack - _bp +3
                                   1002 ;sloc2                     Allocated to stack - _bp +35
                                   1003 ;sloc3                     Allocated to stack - _bp +4
                                   1004 ;------------------------------------------------------------
                                   1005 ;	walk.c:139: static void walk(struct node *nstart) {
                                   1006 ;	-----------------------------------------
                                   1007 ;	 function walk
                                   1008 ;	-----------------------------------------
      0002F2                       1009 _walk:
      0002F2 C0*00            [24] 1010 	push	_bp
      0002F4 E5 81            [12] 1011 	mov	a,sp
      0002F6 F5*00            [12] 1012 	mov	_bp,a
      0002F8 24 20            [12] 1013 	add	a,#0x20
      0002FA F5 81            [12] 1014 	mov	sp,a
                                   1015 ;	walk.c:144: if (!qadd(nstart)) bang();
      0002FC AD 82            [24] 1016 	mov	r5,dpl
      0002FE AE 83            [24] 1017 	mov	r6,dph
      000300 AF F0            [24] 1018 	mov	r7,b
      000302 C0 07            [24] 1019 	push	ar7
      000304 C0 06            [24] 1020 	push	ar6
      000306 C0 05            [24] 1021 	push	ar5
      000308 12r0Ar84         [24] 1022 	lcall	_qadd
      00030B E5 82            [12] 1023 	mov	a,dpl
      00030D D0 05            [24] 1024 	pop	ar5
      00030F D0 06            [24] 1025 	pop	ar6
      000311 D0 07            [24] 1026 	pop	ar7
      000313 70 0F            [24] 1027 	jnz	00102$
      000315 C0 07            [24] 1028 	push	ar7
      000317 C0 06            [24] 1029 	push	ar6
      000319 C0 05            [24] 1030 	push	ar5
      00031B 12r00r0C         [24] 1031 	lcall	_bang
      00031E D0 05            [24] 1032 	pop	ar5
      000320 D0 06            [24] 1033 	pop	ar6
      000322 D0 07            [24] 1034 	pop	ar7
      000324                       1035 00102$:
                                   1036 ;	walk.c:145: g[nstart->r][nstart->c] = 0xaau;
      000324 8D 82            [24] 1037 	mov	dpl,r5
      000326 8E 83            [24] 1038 	mov	dph,r6
      000328 8F F0            [24] 1039 	mov	b,r7
      00032A 12r00r00         [24] 1040 	lcall	__gptrget
      00032D FB               [12] 1041 	mov	r3,a
      00032E A3               [24] 1042 	inc	dptr
      00032F 12r00r00         [24] 1043 	lcall	__gptrget
      000332 FC               [12] 1044 	mov	r4,a
      000333 C0 07            [24] 1045 	push	ar7
      000335 C0 06            [24] 1046 	push	ar6
      000337 C0 05            [24] 1047 	push	ar5
      000339 C0 03            [24] 1048 	push	ar3
      00033B C0 04            [24] 1049 	push	ar4
      00033D 90 00 C0         [24] 1050 	mov	dptr,#0x00c0
      000340 12r00r00         [24] 1051 	lcall	__mulint
      000343 AB 82            [24] 1052 	mov	r3,dpl
      000345 AC 83            [24] 1053 	mov	r4,dph
      000347 15 81            [12] 1054 	dec	sp
      000349 15 81            [12] 1055 	dec	sp
      00034B D0 05            [24] 1056 	pop	ar5
      00034D D0 06            [24] 1057 	pop	ar6
      00034F D0 07            [24] 1058 	pop	ar7
      000351 EB               [12] 1059 	mov	a,r3
      000352 24r00            [12] 1060 	add	a,#_g
      000354 FB               [12] 1061 	mov	r3,a
      000355 EC               [12] 1062 	mov	a,r4
      000356 34s00            [12] 1063 	addc	a,#(_g >> 8)
      000358 FC               [12] 1064 	mov	r4,a
      000359 74 02            [12] 1065 	mov	a,#0x02
      00035B 2D               [12] 1066 	add	a,r5
      00035C FD               [12] 1067 	mov	r5,a
      00035D E4               [12] 1068 	clr	a
      00035E 3E               [12] 1069 	addc	a,r6
      00035F FE               [12] 1070 	mov	r6,a
      000360 8D 82            [24] 1071 	mov	dpl,r5
      000362 8E 83            [24] 1072 	mov	dph,r6
      000364 8F F0            [24] 1073 	mov	b,r7
      000366 12r00r00         [24] 1074 	lcall	__gptrget
      000369 FD               [12] 1075 	mov	r5,a
      00036A A3               [24] 1076 	inc	dptr
      00036B 12r00r00         [24] 1077 	lcall	__gptrget
      00036E FE               [12] 1078 	mov	r6,a
      00036F ED               [12] 1079 	mov	a,r5
      000370 2B               [12] 1080 	add	a,r3
      000371 F5 82            [12] 1081 	mov	dpl,a
      000373 EE               [12] 1082 	mov	a,r6
      000374 3C               [12] 1083 	addc	a,r4
      000375 F5 83            [12] 1084 	mov	dph,a
      000377 74 AA            [12] 1085 	mov	a,#0xaa
      000379 F0               [24] 1086 	movx	@dptr,a
                                   1087 ;	walk.c:147: process:
      00037A E5*00            [12] 1088 	mov	a,_bp
      00037C 24 0F            [12] 1089 	add	a,#0x0f
      00037E FF               [12] 1090 	mov	r7,a
      00037F E5*00            [12] 1091 	mov	a,_bp
      000381 24 0B            [12] 1092 	add	a,#0x0b
      000383 F9               [12] 1093 	mov	r1,a
      000384 E5*00            [12] 1094 	mov	a,_bp
      000386 24 03            [12] 1095 	add	a,#0x03
      000388 F8               [12] 1096 	mov	r0,a
      000389 A6 01            [24] 1097 	mov	@r0,ar1
      00038B 74 02            [12] 1098 	mov	a,#0x02
      00038D 29               [12] 1099 	add	a,r1
      00038E F8               [12] 1100 	mov	r0,a
      00038F E5*00            [12] 1101 	mov	a,_bp
      000391 24 07            [12] 1102 	add	a,#0x07
      000393 FD               [12] 1103 	mov	r5,a
      000394                       1104 00103$:
                                   1105 ;	walk.c:148: unsetOE(OE76_MASK7 | OE76_MASK6);
      000394 75 82 C0         [24] 1106 	mov	dpl,#0xc0
      000397 C0 07            [24] 1107 	push	ar7
      000399 C0 05            [24] 1108 	push	ar5
      00039B C0 01            [24] 1109 	push	ar1
      00039D C0 00            [24] 1110 	push	ar0
      00039F 12r00r32         [24] 1111 	lcall	_unsetOE
      0003A2 D0 00            [24] 1112 	pop	ar0
      0003A4 D0 01            [24] 1113 	pop	ar1
      0003A6 D0 05            [24] 1114 	pop	ar5
                                   1115 ;	walk.c:150: if (!qget(&cur)) goto term;
      0003A8 8D 02            [24] 1116 	mov	ar2,r5
      0003AA 7B 00            [12] 1117 	mov	r3,#0x00
      0003AC 7C 40            [12] 1118 	mov	r4,#0x40
      0003AE 8A 82            [24] 1119 	mov	dpl,r2
      0003B0 8B 83            [24] 1120 	mov	dph,r3
      0003B2 8C F0            [24] 1121 	mov	b,r4
      0003B4 C0 05            [24] 1122 	push	ar5
      0003B6 C0 01            [24] 1123 	push	ar1
      0003B8 C0 00            [24] 1124 	push	ar0
      0003BA 12r0Br74         [24] 1125 	lcall	_qget
      0003BD E5 82            [12] 1126 	mov	a,dpl
      0003BF D0 00            [24] 1127 	pop	ar0
      0003C1 D0 01            [24] 1128 	pop	ar1
      0003C3 D0 05            [24] 1129 	pop	ar5
      0003C5 D0 07            [24] 1130 	pop	ar7
      0003C7 70 03            [24] 1131 	jnz	00184$
      0003C9 02r06r95         [24] 1132 	ljmp	00119$
      0003CC                       1133 00184$:
                                   1134 ;	walk.c:152: printf("\033[2;1H% 8d% 8d% 8d% 8d", hp, tp, cur.r, cur.c);
      0003CC 74 02            [12] 1135 	mov	a,#0x02
      0003CE 2D               [12] 1136 	add	a,r5
      0003CF FC               [12] 1137 	mov	r4,a
      0003D0 C0 00            [24] 1138 	push	ar0
      0003D2 A8*00            [24] 1139 	mov	r0,_bp
      0003D4 08               [12] 1140 	inc	r0
      0003D5 C0 01            [24] 1141 	push	ar1
      0003D7 A9 04            [24] 1142 	mov	r1,ar4
      0003D9 E7               [12] 1143 	mov	a,@r1
      0003DA F6               [12] 1144 	mov	@r0,a
      0003DB 09               [12] 1145 	inc	r1
      0003DC E7               [12] 1146 	mov	a,@r1
      0003DD 08               [12] 1147 	inc	r0
      0003DE F6               [12] 1148 	mov	@r0,a
      0003DF D0 01            [24] 1149 	pop	ar1
      0003E1 A8 05            [24] 1150 	mov	r0,ar5
      0003E3 86 03            [24] 1151 	mov	ar3,@r0
      0003E5 08               [12] 1152 	inc	r0
      0003E6 86 06            [24] 1153 	mov	ar6,@r0
      0003E8 D0 00            [24] 1154 	pop	ar0
      0003EA C0 07            [24] 1155 	push	ar7
      0003EC C0 05            [24] 1156 	push	ar5
      0003EE C0 04            [24] 1157 	push	ar4
      0003F0 C0 01            [24] 1158 	push	ar1
      0003F2 C0 00            [24] 1159 	push	ar0
      0003F4 85 00 F0         [24] 1160 	mov	b,ar0
      0003F7 A8*00            [24] 1161 	mov	r0,_bp
      0003F9 08               [12] 1162 	inc	r0
      0003FA E6               [12] 1163 	mov	a,@r0
      0003FB C0 E0            [24] 1164 	push	acc
      0003FD 08               [12] 1165 	inc	r0
      0003FE E6               [12] 1166 	mov	a,@r0
      0003FF C0 E0            [24] 1167 	push	acc
      000401 C0 03            [24] 1168 	push	ar3
      000403 C0 06            [24] 1169 	push	ar6
      000405 90rB4r02         [24] 1170 	mov	dptr,#_tp
      000408 E0               [24] 1171 	movx	a,@dptr
      000409 C0 E0            [24] 1172 	push	acc
      00040B A3               [24] 1173 	inc	dptr
      00040C E0               [24] 1174 	movx	a,@dptr
      00040D C0 E0            [24] 1175 	push	acc
      00040F 90rB4r00         [24] 1176 	mov	dptr,#_hp
      000412 E0               [24] 1177 	movx	a,@dptr
      000413 C0 E0            [24] 1178 	push	acc
      000415 A3               [24] 1179 	inc	dptr
      000416 E0               [24] 1180 	movx	a,@dptr
      000417 C0 E0            [24] 1181 	push	acc
      000419 74r0D            [12] 1182 	mov	a,#___str_1
      00041B C0 E0            [24] 1183 	push	acc
      00041D 74s00            [12] 1184 	mov	a,#(___str_1 >> 8)
      00041F C0 E0            [24] 1185 	push	acc
      000421 74 80            [12] 1186 	mov	a,#0x80
      000423 C0 E0            [24] 1187 	push	acc
      000425 12r00r00         [24] 1188 	lcall	_printf
      000428 E5 81            [12] 1189 	mov	a,sp
      00042A 24 F5            [12] 1190 	add	a,#0xf5
      00042C F5 81            [12] 1191 	mov	sp,a
      00042E D0 00            [24] 1192 	pop	ar0
      000430 D0 01            [24] 1193 	pop	ar1
      000432 D0 04            [24] 1194 	pop	ar4
      000434 D0 05            [24] 1195 	pop	ar5
      000436 D0 07            [24] 1196 	pop	ar7
                                   1197 ;	walk.c:154: printf("\033[%d;%dH.", cur.r + 4, cur.c + 1);
      000438 C0 00            [24] 1198 	push	ar0
      00043A A8 04            [24] 1199 	mov	r0,ar4
      00043C 86 04            [24] 1200 	mov	ar4,@r0
      00043E 08               [12] 1201 	inc	r0
      00043F 86 06            [24] 1202 	mov	ar6,@r0
      000441 D0 00            [24] 1203 	pop	ar0
      000443 0C               [12] 1204 	inc	r4
      000444 BC 00 01         [24] 1205 	cjne	r4,#0x00,00185$
      000447 0E               [12] 1206 	inc	r6
      000448                       1207 00185$:
      000448 C0 00            [24] 1208 	push	ar0
      00044A A8 05            [24] 1209 	mov	r0,ar5
      00044C 86 02            [24] 1210 	mov	ar2,@r0
      00044E 08               [12] 1211 	inc	r0
      00044F 86 03            [24] 1212 	mov	ar3,@r0
      000451 D0 00            [24] 1213 	pop	ar0
      000453 74 04            [12] 1214 	mov	a,#0x04
      000455 2A               [12] 1215 	add	a,r2
      000456 FA               [12] 1216 	mov	r2,a
      000457 E4               [12] 1217 	clr	a
      000458 3B               [12] 1218 	addc	a,r3
      000459 FB               [12] 1219 	mov	r3,a
      00045A C0 07            [24] 1220 	push	ar7
      00045C C0 05            [24] 1221 	push	ar5
      00045E C0 01            [24] 1222 	push	ar1
      000460 C0 00            [24] 1223 	push	ar0
      000462 C0 04            [24] 1224 	push	ar4
      000464 C0 06            [24] 1225 	push	ar6
      000466 C0 02            [24] 1226 	push	ar2
      000468 C0 03            [24] 1227 	push	ar3
      00046A 74r24            [12] 1228 	mov	a,#___str_2
      00046C C0 E0            [24] 1229 	push	acc
      00046E 74s00            [12] 1230 	mov	a,#(___str_2 >> 8)
      000470 C0 E0            [24] 1231 	push	acc
      000472 74 80            [12] 1232 	mov	a,#0x80
      000474 C0 E0            [24] 1233 	push	acc
      000476 12r00r00         [24] 1234 	lcall	_printf
      000479 E5 81            [12] 1235 	mov	a,sp
      00047B 24 F9            [12] 1236 	add	a,#0xf9
      00047D F5 81            [12] 1237 	mov	sp,a
                                   1238 ;	walk.c:155: setOE(OE76_MASK6);
      00047F 75 82 40         [24] 1239 	mov	dpl,#0x40
      000482 12r00r19         [24] 1240 	lcall	_setOE
      000485 D0 00            [24] 1241 	pop	ar0
      000487 D0 01            [24] 1242 	pop	ar1
      000489 D0 05            [24] 1243 	pop	ar5
      00048B D0 07            [24] 1244 	pop	ar7
                                   1245 ;	walk.c:157: for (j = 0u; j < NMAX; j++)
      00048D 7E 00            [12] 1246 	mov	r6,#0x00
                                   1247 ;	walk.c:184: return;
                                   1248 ;	walk.c:157: for (j = 0u; j < NMAX; j++)
      00048F                       1249 00120$:
                                   1250 ;	walk.c:158: scramble[j] = j;
      00048F EE               [12] 1251 	mov	a,r6
      000490 2F               [12] 1252 	add	a,r7
      000491 C0 00            [24] 1253 	push	ar0
      000493 F8               [12] 1254 	mov	r0,a
      000494 A6 06            [24] 1255 	mov	@r0,ar6
      000496 D0 00            [24] 1256 	pop	ar0
                                   1257 ;	walk.c:157: for (j = 0u; j < NMAX; j++)
      000498 0E               [12] 1258 	inc	r6
      000499 BE 10 00         [24] 1259 	cjne	r6,#0x10,00186$
      00049C                       1260 00186$:
      00049C 40 F1            [24] 1261 	jc	00120$
                                   1262 ;	walk.c:160: do ti = (uint8_t)(rand() % NMAX);
      00049E 7C 00            [12] 1263 	mov	r4,#0x00
      0004A0                       1264 00107$:
      0004A0 C0 07            [24] 1265 	push	ar7
      0004A2 C0 05            [24] 1266 	push	ar5
      0004A4 C0 04            [24] 1267 	push	ar4
      0004A6 C0 01            [24] 1268 	push	ar1
      0004A8 C0 00            [24] 1269 	push	ar0
      0004AA 12r00r00         [24] 1270 	lcall	_rand
      0004AD AA 82            [24] 1271 	mov	r2,dpl
      0004AF D0 00            [24] 1272 	pop	ar0
      0004B1 D0 01            [24] 1273 	pop	ar1
      0004B3 D0 04            [24] 1274 	pop	ar4
      0004B5 D0 05            [24] 1275 	pop	ar5
      0004B7 D0 07            [24] 1276 	pop	ar7
      0004B9 53 02 0F         [24] 1277 	anl	ar2,#0x0f
      0004BC 7B 00            [12] 1278 	mov	r3,#0x00
                                   1279 ;	walk.c:161: while (ti == j);
      0004BE EA               [12] 1280 	mov	a,r2
      0004BF B5 04 02         [24] 1281 	cjne	a,ar4,00188$
      0004C2 80 DC            [24] 1282 	sjmp	00107$
      0004C4                       1283 00188$:
                                   1284 ;	walk.c:162: do tj = (uint8_t)(rand() % NMAX);
      0004C4                       1285 00110$:
      0004C4 C0 05            [24] 1286 	push	ar5
      0004C6 C0 07            [24] 1287 	push	ar7
      0004C8 C0 04            [24] 1288 	push	ar4
      0004CA C0 02            [24] 1289 	push	ar2
      0004CC C0 01            [24] 1290 	push	ar1
      0004CE C0 00            [24] 1291 	push	ar0
      0004D0 12r00r00         [24] 1292 	lcall	_rand
      0004D3 AB 82            [24] 1293 	mov	r3,dpl
      0004D5 D0 00            [24] 1294 	pop	ar0
      0004D7 D0 01            [24] 1295 	pop	ar1
      0004D9 D0 02            [24] 1296 	pop	ar2
      0004DB D0 04            [24] 1297 	pop	ar4
      0004DD D0 07            [24] 1298 	pop	ar7
      0004DF 53 03 0F         [24] 1299 	anl	ar3,#0x0f
      0004E2 8B 06            [24] 1300 	mov	ar6,r3
                                   1301 ;	walk.c:163: while (ti == tj);
      0004E4 EA               [12] 1302 	mov	a,r2
      0004E5 B5 06 04         [24] 1303 	cjne	a,ar6,00189$
      0004E8 D0 05            [24] 1304 	pop	ar5
      0004EA 80 D8            [24] 1305 	sjmp	00110$
      0004EC                       1306 00189$:
                                   1307 ;	walk.c:164: tx = scramble[ti];
      0004EC EA               [12] 1308 	mov	a,r2
      0004ED 2F               [12] 1309 	add	a,r7
      0004EE FB               [12] 1310 	mov	r3,a
      0004EF C0 00            [24] 1311 	push	ar0
      0004F1 E5*00            [12] 1312 	mov	a,_bp
      0004F3 24 1F            [12] 1313 	add	a,#0x1f
      0004F5 F8               [12] 1314 	mov	r0,a
      0004F6 C0 01            [24] 1315 	push	ar1
      0004F8 A9 03            [24] 1316 	mov	r1,ar3
      0004FA E7               [12] 1317 	mov	a,@r1
      0004FB F6               [12] 1318 	mov	@r0,a
                                   1319 ;	walk.c:165: scramble[ti] = scramble[tj];
      0004FC EE               [12] 1320 	mov	a,r6
      0004FD 2F               [12] 1321 	add	a,r7
      0004FE FD               [12] 1322 	mov	r5,a
      0004FF A8 05            [24] 1323 	mov	r0,ar5
      000501 86 02            [24] 1324 	mov	ar2,@r0
      000503 A8 03            [24] 1325 	mov	r0,ar3
      000505 A6 02            [24] 1326 	mov	@r0,ar2
                                   1327 ;	walk.c:166: scramble[tj] = tx;
      000507 A8 05            [24] 1328 	mov	r0,ar5
      000509 E5*00            [12] 1329 	mov	a,_bp
      00050B 24 1F            [12] 1330 	add	a,#0x1f
      00050D F9               [12] 1331 	mov	r1,a
      00050E E7               [12] 1332 	mov	a,@r1
      00050F F6               [12] 1333 	mov	@r0,a
      000510 D0 00            [24] 1334 	pop	ar0
      000512 D0 01            [24] 1335 	pop	ar1
                                   1336 ;	walk.c:159: for (j = 0u; j < NMAX; j++) {
      000514 0C               [12] 1337 	inc	r4
      000515 BC 10 00         [24] 1338 	cjne	r4,#0x10,00190$
      000518                       1339 00190$:
      000518 D0 05            [24] 1340 	pop	ar5
      00051A 40 84            [24] 1341 	jc	00107$
                                   1342 ;	walk.c:169: for (j = 0u; j < NMAX; j++) {
      00051C C0 00            [24] 1343 	push	ar0
      00051E A8*00            [24] 1344 	mov	r0,_bp
      000520 08               [12] 1345 	inc	r0
      000521 A6 05            [24] 1346 	mov	@r0,ar5
      000523 E5*00            [12] 1347 	mov	a,_bp
      000525 24 20            [12] 1348 	add	a,#0x20
      000527 F8               [12] 1349 	mov	r0,a
      000528 76 00            [12] 1350 	mov	@r0,#0x00
      00052A D0 00            [24] 1351 	pop	ar0
      00052C                       1352 00124$:
                                   1353 ;	walk.c:170: unsetOE(OE76_MASK7);
      00052C C0 05            [24] 1354 	push	ar5
      00052E 75 82 80         [24] 1355 	mov	dpl,#0x80
      000531 C0 07            [24] 1356 	push	ar7
      000533 C0 05            [24] 1357 	push	ar5
      000535 C0 01            [24] 1358 	push	ar1
      000537 C0 00            [24] 1359 	push	ar0
      000539 12r00r32         [24] 1360 	lcall	_unsetOE
      00053C D0 00            [24] 1361 	pop	ar0
      00053E D0 01            [24] 1362 	pop	ar1
      000540 D0 05            [24] 1363 	pop	ar5
      000542 D0 07            [24] 1364 	pop	ar7
                                   1365 ;	walk.c:172: if (update(&t, &cur, scramble[j])) {
      000544 C0 00            [24] 1366 	push	ar0
      000546 E5*00            [12] 1367 	mov	a,_bp
      000548 24 20            [12] 1368 	add	a,#0x20
      00054A F8               [12] 1369 	mov	r0,a
      00054B E6               [12] 1370 	mov	a,@r0
      00054C 2F               [12] 1371 	add	a,r7
      00054D FA               [12] 1372 	mov	r2,a
      00054E A8 02            [24] 1373 	mov	r0,ar2
      000550 86 03            [24] 1374 	mov	ar3,@r0
      000552 A8*00            [24] 1375 	mov	r0,_bp
      000554 08               [12] 1376 	inc	r0
      000555 C0 01            [24] 1377 	push	ar1
      000557 E5*00            [12] 1378 	mov	a,_bp
      000559 24 04            [12] 1379 	add	a,#0x04
      00055B F9               [12] 1380 	mov	r1,a
      00055C E6               [12] 1381 	mov	a,@r0
      00055D F7               [12] 1382 	mov	@r1,a
      00055E 09               [12] 1383 	inc	r1
      00055F 77 00            [12] 1384 	mov	@r1,#0x00
      000561 09               [12] 1385 	inc	r1
      000562 77 40            [12] 1386 	mov	@r1,#0x40
      000564 D0 01            [24] 1387 	pop	ar1
      000566 D0 00            [24] 1388 	pop	ar0
      000568 89 02            [24] 1389 	mov	ar2,r1
      00056A 7C 00            [12] 1390 	mov	r4,#0x00
      00056C 7E 40            [12] 1391 	mov	r6,#0x40
      00056E C0 07            [24] 1392 	push	ar7
      000570 C0 05            [24] 1393 	push	ar5
      000572 C0 01            [24] 1394 	push	ar1
      000574 C0 00            [24] 1395 	push	ar0
      000576 C0 03            [24] 1396 	push	ar3
      000578 85 00 F0         [24] 1397 	mov	b,ar0
      00057B E5*00            [12] 1398 	mov	a,_bp
      00057D 24 04            [12] 1399 	add	a,#0x04
      00057F F8               [12] 1400 	mov	r0,a
      000580 E6               [12] 1401 	mov	a,@r0
      000581 C0 E0            [24] 1402 	push	acc
      000583 08               [12] 1403 	inc	r0
      000584 E6               [12] 1404 	mov	a,@r0
      000585 C0 E0            [24] 1405 	push	acc
      000587 08               [12] 1406 	inc	r0
      000588 E6               [12] 1407 	mov	a,@r0
      000589 C0 E0            [24] 1408 	push	acc
      00058B 8A 82            [24] 1409 	mov	dpl,r2
      00058D 8C 83            [24] 1410 	mov	dph,r4
      00058F 8E F0            [24] 1411 	mov	b,r6
      000591 12r00r65         [24] 1412 	lcall	_update
      000594 AE 82            [24] 1413 	mov	r6,dpl
      000596 E5 81            [12] 1414 	mov	a,sp
      000598 24 FC            [12] 1415 	add	a,#0xfc
      00059A F5 81            [12] 1416 	mov	sp,a
      00059C D0 00            [24] 1417 	pop	ar0
      00059E D0 01            [24] 1418 	pop	ar1
      0005A0 D0 05            [24] 1419 	pop	ar5
      0005A2 D0 07            [24] 1420 	pop	ar7
      0005A4 D0 05            [24] 1421 	pop	ar5
      0005A6 EE               [12] 1422 	mov	a,r6
      0005A7 70 03            [24] 1423 	jnz	00192$
      0005A9 02r06r7B         [24] 1424 	ljmp	00125$
      0005AC                       1425 00192$:
                                   1426 ;	walk.c:173: if (!qadd(&t)) bang();
      0005AC C0 00            [24] 1427 	push	ar0
      0005AE E5*00            [12] 1428 	mov	a,_bp
      0005B0 24 03            [12] 1429 	add	a,#0x03
      0005B2 F8               [12] 1430 	mov	r0,a
      0005B3 86 03            [24] 1431 	mov	ar3,@r0
      0005B5 7C 00            [12] 1432 	mov	r4,#0x00
      0005B7 7E 40            [12] 1433 	mov	r6,#0x40
      0005B9 D0 00            [24] 1434 	pop	ar0
      0005BB 8B 82            [24] 1435 	mov	dpl,r3
      0005BD 8C 83            [24] 1436 	mov	dph,r4
      0005BF 8E F0            [24] 1437 	mov	b,r6
      0005C1 C0 07            [24] 1438 	push	ar7
      0005C3 C0 05            [24] 1439 	push	ar5
      0005C5 C0 01            [24] 1440 	push	ar1
      0005C7 C0 00            [24] 1441 	push	ar0
      0005C9 12r0Ar84         [24] 1442 	lcall	_qadd
      0005CC E5 82            [12] 1443 	mov	a,dpl
      0005CE D0 00            [24] 1444 	pop	ar0
      0005D0 D0 01            [24] 1445 	pop	ar1
      0005D2 D0 05            [24] 1446 	pop	ar5
      0005D4 D0 07            [24] 1447 	pop	ar7
      0005D6 70 13            [24] 1448 	jnz	00115$
      0005D8 C0 07            [24] 1449 	push	ar7
      0005DA C0 05            [24] 1450 	push	ar5
      0005DC C0 01            [24] 1451 	push	ar1
      0005DE C0 00            [24] 1452 	push	ar0
      0005E0 12r00r0C         [24] 1453 	lcall	_bang
      0005E3 D0 00            [24] 1454 	pop	ar0
      0005E5 D0 01            [24] 1455 	pop	ar1
      0005E7 D0 05            [24] 1456 	pop	ar5
      0005E9 D0 07            [24] 1457 	pop	ar7
      0005EB                       1458 00115$:
                                   1459 ;	walk.c:174: g[t.r][t.c] = 0xaau;
      0005EB 87 04            [24] 1460 	mov	ar4,@r1
      0005ED 09               [12] 1461 	inc	r1
      0005EE 87 06            [24] 1462 	mov	ar6,@r1
      0005F0 19               [12] 1463 	dec	r1
      0005F1 C0 07            [24] 1464 	push	ar7
      0005F3 C0 05            [24] 1465 	push	ar5
      0005F5 C0 01            [24] 1466 	push	ar1
      0005F7 C0 00            [24] 1467 	push	ar0
      0005F9 C0 04            [24] 1468 	push	ar4
      0005FB C0 06            [24] 1469 	push	ar6
      0005FD 90 00 C0         [24] 1470 	mov	dptr,#0x00c0
      000600 12r00r00         [24] 1471 	lcall	__mulint
      000603 AC 82            [24] 1472 	mov	r4,dpl
      000605 AE 83            [24] 1473 	mov	r6,dph
      000607 15 81            [12] 1474 	dec	sp
      000609 15 81            [12] 1475 	dec	sp
      00060B D0 00            [24] 1476 	pop	ar0
      00060D EC               [12] 1477 	mov	a,r4
      00060E 24r00            [12] 1478 	add	a,#_g
      000610 FC               [12] 1479 	mov	r4,a
      000611 EE               [12] 1480 	mov	a,r6
      000612 34s00            [12] 1481 	addc	a,#(_g >> 8)
      000614 FE               [12] 1482 	mov	r6,a
      000615 86 02            [24] 1483 	mov	ar2,@r0
      000617 08               [12] 1484 	inc	r0
      000618 86 03            [24] 1485 	mov	ar3,@r0
      00061A 18               [12] 1486 	dec	r0
      00061B EA               [12] 1487 	mov	a,r2
      00061C 2C               [12] 1488 	add	a,r4
      00061D F5 82            [12] 1489 	mov	dpl,a
      00061F EB               [12] 1490 	mov	a,r3
      000620 3E               [12] 1491 	addc	a,r6
      000621 F5 83            [12] 1492 	mov	dph,a
      000623 74 AA            [12] 1493 	mov	a,#0xaa
      000625 F0               [24] 1494 	movx	@dptr,a
                                   1495 ;	walk.c:176: setOE(OE76_MASK7);
      000626 75 82 80         [24] 1496 	mov	dpl,#0x80
      000629 C0 00            [24] 1497 	push	ar0
      00062B 12r00r19         [24] 1498 	lcall	_setOE
      00062E D0 00            [24] 1499 	pop	ar0
      000630 D0 01            [24] 1500 	pop	ar1
      000632 D0 05            [24] 1501 	pop	ar5
      000634 D0 07            [24] 1502 	pop	ar7
                                   1503 ;	walk.c:177: printf("\033[%d;%dHo", t.r + 4, t.c + 1);
      000636 86 04            [24] 1504 	mov	ar4,@r0
      000638 08               [12] 1505 	inc	r0
      000639 86 06            [24] 1506 	mov	ar6,@r0
      00063B 18               [12] 1507 	dec	r0
      00063C 0C               [12] 1508 	inc	r4
      00063D BC 00 01         [24] 1509 	cjne	r4,#0x00,00194$
      000640 0E               [12] 1510 	inc	r6
      000641                       1511 00194$:
      000641 87 02            [24] 1512 	mov	ar2,@r1
      000643 09               [12] 1513 	inc	r1
      000644 87 03            [24] 1514 	mov	ar3,@r1
      000646 19               [12] 1515 	dec	r1
      000647 74 04            [12] 1516 	mov	a,#0x04
      000649 2A               [12] 1517 	add	a,r2
      00064A FA               [12] 1518 	mov	r2,a
      00064B E4               [12] 1519 	clr	a
      00064C 3B               [12] 1520 	addc	a,r3
      00064D FB               [12] 1521 	mov	r3,a
      00064E C0 07            [24] 1522 	push	ar7
      000650 C0 05            [24] 1523 	push	ar5
      000652 C0 01            [24] 1524 	push	ar1
      000654 C0 00            [24] 1525 	push	ar0
      000656 C0 04            [24] 1526 	push	ar4
      000658 C0 06            [24] 1527 	push	ar6
      00065A C0 02            [24] 1528 	push	ar2
      00065C C0 03            [24] 1529 	push	ar3
      00065E 74r2E            [12] 1530 	mov	a,#___str_3
      000660 C0 E0            [24] 1531 	push	acc
      000662 74s00            [12] 1532 	mov	a,#(___str_3 >> 8)
      000664 C0 E0            [24] 1533 	push	acc
      000666 74 80            [12] 1534 	mov	a,#0x80
      000668 C0 E0            [24] 1535 	push	acc
      00066A 12r00r00         [24] 1536 	lcall	_printf
      00066D E5 81            [12] 1537 	mov	a,sp
      00066F 24 F9            [12] 1538 	add	a,#0xf9
      000671 F5 81            [12] 1539 	mov	sp,a
      000673 D0 00            [24] 1540 	pop	ar0
      000675 D0 01            [24] 1541 	pop	ar1
      000677 D0 05            [24] 1542 	pop	ar5
      000679 D0 07            [24] 1543 	pop	ar7
      00067B                       1544 00125$:
                                   1545 ;	walk.c:169: for (j = 0u; j < NMAX; j++) {
      00067B C0 00            [24] 1546 	push	ar0
      00067D E5*00            [12] 1547 	mov	a,_bp
      00067F 24 20            [12] 1548 	add	a,#0x20
      000681 F8               [12] 1549 	mov	r0,a
      000682 06               [12] 1550 	inc	@r0
      000683 E5*00            [12] 1551 	mov	a,_bp
      000685 24 20            [12] 1552 	add	a,#0x20
      000687 F8               [12] 1553 	mov	r0,a
      000688 B6 10 00         [24] 1554 	cjne	@r0,#0x10,00195$
      00068B                       1555 00195$:
      00068B D0 00            [24] 1556 	pop	ar0
      00068D 50 03            [24] 1557 	jnc	00196$
      00068F 02r05r2C         [24] 1558 	ljmp	00124$
      000692                       1559 00196$:
                                   1560 ;	walk.c:181: goto process;
      000692 02r03r94         [24] 1561 	ljmp	00103$
                                   1562 ;	walk.c:183: term:
      000695                       1563 00119$:
                                   1564 ;	walk.c:184: return;
                                   1565 ;	walk.c:185: }
      000695 85*00 81         [24] 1566 	mov	sp,_bp
      000698 D0*00            [24] 1567 	pop	_bp
      00069A 22               [24] 1568 	ret
                                   1569 ;------------------------------------------------------------
                                   1570 ;Allocation info for local variables in function 'main'
                                   1571 ;------------------------------------------------------------
                                   1572 ;initial                   Allocated to stack - _bp +5
                                   1573 ;N                         Allocated to stack - _bp +9
                                   1574 ;i                         Allocated to stack - _bp +11
                                   1575 ;j                         Allocated to registers r2 r6 
                                   1576 ;sloc0                     Allocated to stack - _bp +1
                                   1577 ;sloc1                     Allocated to stack - _bp +3
                                   1578 ;sloc2                     Allocated to stack - _bp +15
                                   1579 ;------------------------------------------------------------
                                   1580 ;	walk.c:187: void main(void) {
                                   1581 ;	-----------------------------------------
                                   1582 ;	 function main
                                   1583 ;	-----------------------------------------
      00069B                       1584 _main:
      00069B C0*00            [24] 1585 	push	_bp
      00069D E5 81            [12] 1586 	mov	a,sp
      00069F F5*00            [12] 1587 	mov	_bp,a
      0006A1 24 0C            [12] 1588 	add	a,#0x0c
      0006A3 F5 81            [12] 1589 	mov	sp,a
                                   1590 ;	walk.c:192: i0 = 1u;
      0006A5 78r00            [12] 1591 	mov	r0,#_i0
      0006A7 76 01            [12] 1592 	mov	@r0,#0x01
                                   1593 ;	walk.c:194: P1_7 = 1;
                                   1594 ;	assignBit
      0006A9 D2 97            [12] 1595 	setb	_P1_7
                                   1596 ;	walk.c:195: IT0 = 1;
                                   1597 ;	assignBit
      0006AB D2 88            [12] 1598 	setb	_IT0
                                   1599 ;	walk.c:196: EX0 = 1;
                                   1600 ;	assignBit
      0006AD D2 A8            [12] 1601 	setb	_EX0
                                   1602 ;	walk.c:197: EA = 1;
                                   1603 ;	assignBit
      0006AF D2 AF            [12] 1604 	setb	_EA
                                   1605 ;	walk.c:199: srand(RND);
      0006B1 90 80 00         [24] 1606 	mov	dptr,#_RND
      0006B4 E0               [24] 1607 	movx	a,@dptr
      0006B5 FE               [12] 1608 	mov	r6,a
      0006B6 A3               [24] 1609 	inc	dptr
      0006B7 E0               [24] 1610 	movx	a,@dptr
      0006B8 FF               [12] 1611 	mov	r7,a
      0006B9 8E 82            [24] 1612 	mov	dpl,r6
      0006BB 8F 83            [24] 1613 	mov	dph,r7
      0006BD 12r00r00         [24] 1614 	lcall	_srand
                                   1615 ;	walk.c:200: qinit();
      0006C0 12r0Ar76         [24] 1616 	lcall	_qinit
                                   1617 ;	walk.c:202: puts("\033[2J\033[?25l");
      0006C3 90r00r38         [24] 1618 	mov	dptr,#___str_4
      0006C6 75 F0 80         [24] 1619 	mov	b,#0x80
      0006C9 12r00r00         [24] 1620 	lcall	_puts
                                   1621 ;	walk.c:204: while (i0) {
      0006CC E5*00            [12] 1622 	mov	a,_bp
      0006CE 24 05            [12] 1623 	add	a,#0x05
      0006D0 F9               [12] 1624 	mov	r1,a
      0006D1 FF               [12] 1625 	mov	r7,a
      0006D2 E5*00            [12] 1626 	mov	a,_bp
      0006D4 24 09            [12] 1627 	add	a,#0x09
      0006D6 F8               [12] 1628 	mov	r0,a
      0006D7 E4               [12] 1629 	clr	a
      0006D8 F6               [12] 1630 	mov	@r0,a
      0006D9 08               [12] 1631 	inc	r0
      0006DA F6               [12] 1632 	mov	@r0,a
      0006DB                       1633 00108$:
      0006DB 78r00            [12] 1634 	mov	r0,#_i0
      0006DD E6               [12] 1635 	mov	a,@r0
      0006DE 70 03            [24] 1636 	jnz	00182$
      0006E0 02r0Ar62         [24] 1637 	ljmp	00110$
      0006E3                       1638 00182$:
                                   1639 ;	walk.c:205: for (i = 0; i < ROWS; i++)
      0006E3 7B 00            [12] 1640 	mov	r3,#0x00
      0006E5 7C 00            [12] 1641 	mov	r4,#0x00
      0006E7 A8*00            [24] 1642 	mov	r0,_bp
      0006E9 08               [12] 1643 	inc	r0
      0006EA E4               [12] 1644 	clr	a
      0006EB F6               [12] 1645 	mov	@r0,a
      0006EC 08               [12] 1646 	inc	r0
      0006ED F6               [12] 1647 	mov	@r0,a
                                   1648 ;	walk.c:206: for (j = 0; j < COLS; j++)
      0006EE                       1649 00125$:
      0006EE A8*00            [24] 1650 	mov	r0,_bp
      0006F0 08               [12] 1651 	inc	r0
      0006F1 C0 01            [24] 1652 	push	ar1
      0006F3 E5*00            [12] 1653 	mov	a,_bp
      0006F5 24 03            [12] 1654 	add	a,#0x03
      0006F7 F9               [12] 1655 	mov	r1,a
      0006F8 E6               [12] 1656 	mov	a,@r0
      0006F9 24r00            [12] 1657 	add	a,#_g
      0006FB F7               [12] 1658 	mov	@r1,a
      0006FC 08               [12] 1659 	inc	r0
      0006FD E6               [12] 1660 	mov	a,@r0
      0006FE 34s00            [12] 1661 	addc	a,#(_g >> 8)
      000700 09               [12] 1662 	inc	r1
      000701 F7               [12] 1663 	mov	@r1,a
      000702 D0 01            [24] 1664 	pop	ar1
      000704 7A 00            [12] 1665 	mov	r2,#0x00
      000706 7E 00            [12] 1666 	mov	r6,#0x00
      000708                       1667 00112$:
                                   1668 ;	walk.c:207: g[i][j] = 0x55u;
      000708 E5*00            [12] 1669 	mov	a,_bp
      00070A 24 03            [12] 1670 	add	a,#0x03
      00070C F8               [12] 1671 	mov	r0,a
      00070D EA               [12] 1672 	mov	a,r2
      00070E 26               [12] 1673 	add	a,@r0
      00070F F5 82            [12] 1674 	mov	dpl,a
      000711 EE               [12] 1675 	mov	a,r6
      000712 08               [12] 1676 	inc	r0
      000713 36               [12] 1677 	addc	a,@r0
      000714 F5 83            [12] 1678 	mov	dph,a
      000716 74 55            [12] 1679 	mov	a,#0x55
      000718 F0               [24] 1680 	movx	@dptr,a
                                   1681 ;	walk.c:206: for (j = 0; j < COLS; j++)
      000719 0A               [12] 1682 	inc	r2
      00071A BA 00 01         [24] 1683 	cjne	r2,#0x00,00183$
      00071D 0E               [12] 1684 	inc	r6
      00071E                       1685 00183$:
      00071E C3               [12] 1686 	clr	c
      00071F EA               [12] 1687 	mov	a,r2
      000720 94 C0            [12] 1688 	subb	a,#0xc0
      000722 EE               [12] 1689 	mov	a,r6
      000723 64 80            [12] 1690 	xrl	a,#0x80
      000725 94 80            [12] 1691 	subb	a,#0x80
      000727 40 DF            [24] 1692 	jc	00112$
                                   1693 ;	walk.c:205: for (i = 0; i < ROWS; i++)
      000729 A8*00            [24] 1694 	mov	r0,_bp
      00072B 08               [12] 1695 	inc	r0
      00072C 74 C0            [12] 1696 	mov	a,#0xc0
      00072E 26               [12] 1697 	add	a,@r0
      00072F F6               [12] 1698 	mov	@r0,a
      000730 E4               [12] 1699 	clr	a
      000731 08               [12] 1700 	inc	r0
      000732 36               [12] 1701 	addc	a,@r0
      000733 F6               [12] 1702 	mov	@r0,a
      000734 0B               [12] 1703 	inc	r3
      000735 BB 00 01         [24] 1704 	cjne	r3,#0x00,00185$
      000738 0C               [12] 1705 	inc	r4
      000739                       1706 00185$:
      000739 C3               [12] 1707 	clr	c
      00073A EB               [12] 1708 	mov	a,r3
      00073B 94 30            [12] 1709 	subb	a,#0x30
      00073D EC               [12] 1710 	mov	a,r4
      00073E 64 80            [12] 1711 	xrl	a,#0x80
      000740 94 80            [12] 1712 	subb	a,#0x80
      000742 40 AA            [24] 1713 	jc	00125$
                                   1714 ;	walk.c:209: initial.r = rand() % ROWS;
      000744 E5*00            [12] 1715 	mov	a,_bp
      000746 24 05            [12] 1716 	add	a,#0x05
      000748 F8               [12] 1717 	mov	r0,a
      000749 C0 07            [24] 1718 	push	ar7
      00074B C0 01            [24] 1719 	push	ar1
      00074D C0 00            [24] 1720 	push	ar0
      00074F 12r00r00         [24] 1721 	lcall	_rand
      000752 AD 82            [24] 1722 	mov	r5,dpl
      000754 AE 83            [24] 1723 	mov	r6,dph
      000756 74 30            [12] 1724 	mov	a,#0x30
      000758 C0 E0            [24] 1725 	push	acc
      00075A E4               [12] 1726 	clr	a
      00075B C0 E0            [24] 1727 	push	acc
      00075D 8D 82            [24] 1728 	mov	dpl,r5
      00075F 8E 83            [24] 1729 	mov	dph,r6
      000761 12r00r00         [24] 1730 	lcall	__modsint
      000764 AD 82            [24] 1731 	mov	r5,dpl
      000766 AE 83            [24] 1732 	mov	r6,dph
      000768 15 81            [12] 1733 	dec	sp
      00076A 15 81            [12] 1734 	dec	sp
      00076C D0 00            [24] 1735 	pop	ar0
      00076E D0 01            [24] 1736 	pop	ar1
      000770 A6 05            [24] 1737 	mov	@r0,ar5
      000772 08               [12] 1738 	inc	r0
      000773 A6 06            [24] 1739 	mov	@r0,ar6
      000775 18               [12] 1740 	dec	r0
                                   1741 ;	walk.c:210: initial.c = rand() % COLS;
      000776 74 02            [12] 1742 	mov	a,#0x02
      000778 29               [12] 1743 	add	a,r1
      000779 F8               [12] 1744 	mov	r0,a
      00077A C0 01            [24] 1745 	push	ar1
      00077C C0 00            [24] 1746 	push	ar0
      00077E 12r00r00         [24] 1747 	lcall	_rand
      000781 AD 82            [24] 1748 	mov	r5,dpl
      000783 AE 83            [24] 1749 	mov	r6,dph
      000785 74 C0            [12] 1750 	mov	a,#0xc0
      000787 C0 E0            [24] 1751 	push	acc
      000789 E4               [12] 1752 	clr	a
      00078A C0 E0            [24] 1753 	push	acc
      00078C 8D 82            [24] 1754 	mov	dpl,r5
      00078E 8E 83            [24] 1755 	mov	dph,r6
      000790 12r00r00         [24] 1756 	lcall	__modsint
      000793 AD 82            [24] 1757 	mov	r5,dpl
      000795 AE 83            [24] 1758 	mov	r6,dph
      000797 15 81            [12] 1759 	dec	sp
      000799 15 81            [12] 1760 	dec	sp
      00079B D0 00            [24] 1761 	pop	ar0
      00079D A6 05            [24] 1762 	mov	@r0,ar5
      00079F 08               [12] 1763 	inc	r0
      0007A0 A6 06            [24] 1764 	mov	@r0,ar6
      0007A2 18               [12] 1765 	dec	r0
                                   1766 ;	walk.c:212: puts("\033[2J\033[?25l");
      0007A3 90r00r38         [24] 1767 	mov	dptr,#___str_4
      0007A6 75 F0 80         [24] 1768 	mov	b,#0x80
      0007A9 C0 00            [24] 1769 	push	ar0
      0007AB 12r00r00         [24] 1770 	lcall	_puts
      0007AE D0 00            [24] 1771 	pop	ar0
      0007B0 D0 01            [24] 1772 	pop	ar1
                                   1773 ;	walk.c:213: printf("\033[1;1H% 8u% 8d% 8d", N, initial.r, initial.c);
      0007B2 86 05            [24] 1774 	mov	ar5,@r0
      0007B4 08               [12] 1775 	inc	r0
      0007B5 86 06            [24] 1776 	mov	ar6,@r0
      0007B7 18               [12] 1777 	dec	r0
      0007B8 87 03            [24] 1778 	mov	ar3,@r1
      0007BA 09               [12] 1779 	inc	r1
      0007BB 87 04            [24] 1780 	mov	ar4,@r1
      0007BD 19               [12] 1781 	dec	r1
      0007BE C0 01            [24] 1782 	push	ar1
      0007C0 C0 05            [24] 1783 	push	ar5
      0007C2 C0 06            [24] 1784 	push	ar6
      0007C4 C0 03            [24] 1785 	push	ar3
      0007C6 C0 04            [24] 1786 	push	ar4
      0007C8 E5*00            [12] 1787 	mov	a,_bp
      0007CA 24 09            [12] 1788 	add	a,#0x09
      0007CC F8               [12] 1789 	mov	r0,a
      0007CD E6               [12] 1790 	mov	a,@r0
      0007CE C0 E0            [24] 1791 	push	acc
      0007D0 08               [12] 1792 	inc	r0
      0007D1 E6               [12] 1793 	mov	a,@r0
      0007D2 C0 E0            [24] 1794 	push	acc
      0007D4 74r43            [12] 1795 	mov	a,#___str_5
      0007D6 C0 E0            [24] 1796 	push	acc
      0007D8 74s00            [12] 1797 	mov	a,#(___str_5 >> 8)
      0007DA C0 E0            [24] 1798 	push	acc
      0007DC 74 80            [12] 1799 	mov	a,#0x80
      0007DE C0 E0            [24] 1800 	push	acc
      0007E0 12r00r00         [24] 1801 	lcall	_printf
      0007E3 E5 81            [12] 1802 	mov	a,sp
      0007E5 24 F7            [12] 1803 	add	a,#0xf7
      0007E7 F5 81            [12] 1804 	mov	sp,a
      0007E9 D0 01            [24] 1805 	pop	ar1
      0007EB D0 07            [24] 1806 	pop	ar7
                                   1807 ;	walk.c:215: for (i = 0; i < REG; i++) {
      0007ED E5*00            [12] 1808 	mov	a,_bp
      0007EF 24 0B            [12] 1809 	add	a,#0x0b
      0007F1 F8               [12] 1810 	mov	r0,a
      0007F2 E4               [12] 1811 	clr	a
      0007F3 F6               [12] 1812 	mov	@r0,a
      0007F4 08               [12] 1813 	inc	r0
      0007F5 F6               [12] 1814 	mov	@r0,a
      0007F6                       1815 00116$:
                                   1816 ;	walk.c:216: neigh[i].r = neigh[REG + i].r * (1 + rand() % 32);
      0007F6 C0 07            [24] 1817 	push	ar7
      0007F8 E5*00            [12] 1818 	mov	a,_bp
      0007FA 24 0B            [12] 1819 	add	a,#0x0b
      0007FC F8               [12] 1820 	mov	r0,a
      0007FD E6               [12] 1821 	mov	a,@r0
      0007FE 25 E0            [12] 1822 	add	a,acc
      000800 FB               [12] 1823 	mov	r3,a
      000801 08               [12] 1824 	inc	r0
      000802 E6               [12] 1825 	mov	a,@r0
      000803 33               [12] 1826 	rlc	a
      000804 FC               [12] 1827 	mov	r4,a
      000805 EB               [12] 1828 	mov	a,r3
      000806 2B               [12] 1829 	add	a,r3
      000807 FB               [12] 1830 	mov	r3,a
      000808 EC               [12] 1831 	mov	a,r4
      000809 33               [12] 1832 	rlc	a
      00080A FC               [12] 1833 	mov	r4,a
      00080B E5*00            [12] 1834 	mov	a,_bp
      00080D 24 03            [12] 1835 	add	a,#0x03
      00080F F8               [12] 1836 	mov	r0,a
      000810 EB               [12] 1837 	mov	a,r3
      000811 24r00            [12] 1838 	add	a,#_neigh
      000813 F6               [12] 1839 	mov	@r0,a
      000814 EC               [12] 1840 	mov	a,r4
      000815 34s00            [12] 1841 	addc	a,#(_neigh >> 8)
      000817 08               [12] 1842 	inc	r0
      000818 F6               [12] 1843 	mov	@r0,a
      000819 E5*00            [12] 1844 	mov	a,_bp
      00081B 24 0B            [12] 1845 	add	a,#0x0b
      00081D F8               [12] 1846 	mov	r0,a
      00081E 86 06            [24] 1847 	mov	ar6,@r0
      000820 74 08            [12] 1848 	mov	a,#0x08
      000822 2E               [12] 1849 	add	a,r6
      000823 FE               [12] 1850 	mov	r6,a
      000824 C2 D5            [12] 1851 	clr	F0
      000826 75 F0 04         [24] 1852 	mov	b,#0x04
      000829 EE               [12] 1853 	mov	a,r6
      00082A 30 E7 04         [24] 1854 	jnb	acc.7,00187$
      00082D B2 D5            [12] 1855 	cpl	F0
      00082F F4               [12] 1856 	cpl	a
      000830 04               [12] 1857 	inc	a
      000831                       1858 00187$:
      000831 A4               [48] 1859 	mul	ab
      000832 30 D5 0A         [24] 1860 	jnb	F0,00188$
      000835 F4               [12] 1861 	cpl	a
      000836 24 01            [12] 1862 	add	a,#0x01
      000838 C5 F0            [12] 1863 	xch	a,b
      00083A F4               [12] 1864 	cpl	a
      00083B 34 00            [12] 1865 	addc	a,#0x00
      00083D C5 F0            [12] 1866 	xch	a,b
      00083F                       1867 00188$:
      00083F FE               [12] 1868 	mov	r6,a
      000840 AD F0            [24] 1869 	mov	r5,b
      000842 24r00            [12] 1870 	add	a,#_neigh
      000844 F5 82            [12] 1871 	mov	dpl,a
      000846 ED               [12] 1872 	mov	a,r5
      000847 34s00            [12] 1873 	addc	a,#(_neigh >> 8)
      000849 F5 83            [12] 1874 	mov	dph,a
      00084B A8*00            [24] 1875 	mov	r0,_bp
      00084D 08               [12] 1876 	inc	r0
      00084E E0               [24] 1877 	movx	a,@dptr
      00084F F6               [12] 1878 	mov	@r0,a
      000850 A3               [24] 1879 	inc	dptr
      000851 E0               [24] 1880 	movx	a,@dptr
      000852 08               [12] 1881 	inc	r0
      000853 F6               [12] 1882 	mov	@r0,a
      000854 C0 06            [24] 1883 	push	ar6
      000856 C0 05            [24] 1884 	push	ar5
      000858 C0 04            [24] 1885 	push	ar4
      00085A C0 03            [24] 1886 	push	ar3
      00085C C0 01            [24] 1887 	push	ar1
      00085E 12r00r00         [24] 1888 	lcall	_rand
      000861 AA 82            [24] 1889 	mov	r2,dpl
      000863 AF 83            [24] 1890 	mov	r7,dph
      000865 74 20            [12] 1891 	mov	a,#0x20
      000867 C0 E0            [24] 1892 	push	acc
      000869 E4               [12] 1893 	clr	a
      00086A C0 E0            [24] 1894 	push	acc
      00086C 8A 82            [24] 1895 	mov	dpl,r2
      00086E 8F 83            [24] 1896 	mov	dph,r7
      000870 12r00r00         [24] 1897 	lcall	__modsint
      000873 AA 82            [24] 1898 	mov	r2,dpl
      000875 AF 83            [24] 1899 	mov	r7,dph
      000877 15 81            [12] 1900 	dec	sp
      000879 15 81            [12] 1901 	dec	sp
      00087B D0 01            [24] 1902 	pop	ar1
      00087D D0 03            [24] 1903 	pop	ar3
      00087F D0 04            [24] 1904 	pop	ar4
      000881 D0 05            [24] 1905 	pop	ar5
      000883 D0 06            [24] 1906 	pop	ar6
      000885 0A               [12] 1907 	inc	r2
      000886 BA 00 01         [24] 1908 	cjne	r2,#0x00,00189$
      000889 0F               [12] 1909 	inc	r7
      00088A                       1910 00189$:
      00088A C0 06            [24] 1911 	push	ar6
      00088C C0 05            [24] 1912 	push	ar5
      00088E C0 04            [24] 1913 	push	ar4
      000890 C0 03            [24] 1914 	push	ar3
      000892 C0 01            [24] 1915 	push	ar1
      000894 C0 02            [24] 1916 	push	ar2
      000896 C0 07            [24] 1917 	push	ar7
      000898 A8*00            [24] 1918 	mov	r0,_bp
      00089A 08               [12] 1919 	inc	r0
      00089B 86 82            [24] 1920 	mov	dpl,@r0
      00089D 08               [12] 1921 	inc	r0
      00089E 86 83            [24] 1922 	mov	dph,@r0
      0008A0 12r00r00         [24] 1923 	lcall	__mulint
      0008A3 AA 82            [24] 1924 	mov	r2,dpl
      0008A5 AF 83            [24] 1925 	mov	r7,dph
      0008A7 15 81            [12] 1926 	dec	sp
      0008A9 15 81            [12] 1927 	dec	sp
      0008AB D0 01            [24] 1928 	pop	ar1
      0008AD D0 03            [24] 1929 	pop	ar3
      0008AF D0 04            [24] 1930 	pop	ar4
      0008B1 D0 05            [24] 1931 	pop	ar5
      0008B3 D0 06            [24] 1932 	pop	ar6
      0008B5 E5*00            [12] 1933 	mov	a,_bp
      0008B7 24 03            [12] 1934 	add	a,#0x03
      0008B9 F8               [12] 1935 	mov	r0,a
      0008BA 86 82            [24] 1936 	mov	dpl,@r0
      0008BC 08               [12] 1937 	inc	r0
      0008BD 86 83            [24] 1938 	mov	dph,@r0
      0008BF EA               [12] 1939 	mov	a,r2
      0008C0 F0               [24] 1940 	movx	@dptr,a
      0008C1 EF               [12] 1941 	mov	a,r7
      0008C2 A3               [24] 1942 	inc	dptr
      0008C3 F0               [24] 1943 	movx	@dptr,a
                                   1944 ;	walk.c:217: neigh[i].c = neigh[REG + i].c * (1 + rand() % 32);
      0008C4 EB               [12] 1945 	mov	a,r3
      0008C5 24r00            [12] 1946 	add	a,#_neigh
      0008C7 FB               [12] 1947 	mov	r3,a
      0008C8 EC               [12] 1948 	mov	a,r4
      0008C9 34s00            [12] 1949 	addc	a,#(_neigh >> 8)
      0008CB FC               [12] 1950 	mov	r4,a
      0008CC 74 02            [12] 1951 	mov	a,#0x02
      0008CE 2B               [12] 1952 	add	a,r3
      0008CF FA               [12] 1953 	mov	r2,a
      0008D0 E4               [12] 1954 	clr	a
      0008D1 3C               [12] 1955 	addc	a,r4
      0008D2 FF               [12] 1956 	mov	r7,a
      0008D3 EE               [12] 1957 	mov	a,r6
      0008D4 24r00            [12] 1958 	add	a,#_neigh
      0008D6 FE               [12] 1959 	mov	r6,a
      0008D7 ED               [12] 1960 	mov	a,r5
      0008D8 34s00            [12] 1961 	addc	a,#(_neigh >> 8)
      0008DA FD               [12] 1962 	mov	r5,a
      0008DB 8E 82            [24] 1963 	mov	dpl,r6
      0008DD 8D 83            [24] 1964 	mov	dph,r5
      0008DF A3               [24] 1965 	inc	dptr
      0008E0 A3               [24] 1966 	inc	dptr
      0008E1 E5*00            [12] 1967 	mov	a,_bp
      0008E3 24 03            [12] 1968 	add	a,#0x03
      0008E5 F8               [12] 1969 	mov	r0,a
      0008E6 E0               [24] 1970 	movx	a,@dptr
      0008E7 F6               [12] 1971 	mov	@r0,a
      0008E8 A3               [24] 1972 	inc	dptr
      0008E9 E0               [24] 1973 	movx	a,@dptr
      0008EA 08               [12] 1974 	inc	r0
      0008EB F6               [12] 1975 	mov	@r0,a
      0008EC C0 07            [24] 1976 	push	ar7
      0008EE C0 04            [24] 1977 	push	ar4
      0008F0 C0 03            [24] 1978 	push	ar3
      0008F2 C0 02            [24] 1979 	push	ar2
      0008F4 C0 01            [24] 1980 	push	ar1
      0008F6 12r00r00         [24] 1981 	lcall	_rand
      0008F9 AD 82            [24] 1982 	mov	r5,dpl
      0008FB AE 83            [24] 1983 	mov	r6,dph
      0008FD 74 20            [12] 1984 	mov	a,#0x20
      0008FF C0 E0            [24] 1985 	push	acc
      000901 E4               [12] 1986 	clr	a
      000902 C0 E0            [24] 1987 	push	acc
      000904 8D 82            [24] 1988 	mov	dpl,r5
      000906 8E 83            [24] 1989 	mov	dph,r6
      000908 12r00r00         [24] 1990 	lcall	__modsint
      00090B AD 82            [24] 1991 	mov	r5,dpl
      00090D AE 83            [24] 1992 	mov	r6,dph
      00090F 15 81            [12] 1993 	dec	sp
      000911 15 81            [12] 1994 	dec	sp
      000913 D0 01            [24] 1995 	pop	ar1
      000915 D0 02            [24] 1996 	pop	ar2
      000917 D0 03            [24] 1997 	pop	ar3
      000919 D0 04            [24] 1998 	pop	ar4
      00091B D0 07            [24] 1999 	pop	ar7
      00091D 0D               [12] 2000 	inc	r5
      00091E BD 00 01         [24] 2001 	cjne	r5,#0x00,00190$
      000921 0E               [12] 2002 	inc	r6
      000922                       2003 00190$:
      000922 C0 07            [24] 2004 	push	ar7
      000924 C0 04            [24] 2005 	push	ar4
      000926 C0 03            [24] 2006 	push	ar3
      000928 C0 02            [24] 2007 	push	ar2
      00092A C0 01            [24] 2008 	push	ar1
      00092C C0 05            [24] 2009 	push	ar5
      00092E C0 06            [24] 2010 	push	ar6
      000930 E5*00            [12] 2011 	mov	a,_bp
      000932 24 03            [12] 2012 	add	a,#0x03
      000934 F8               [12] 2013 	mov	r0,a
      000935 86 82            [24] 2014 	mov	dpl,@r0
      000937 08               [12] 2015 	inc	r0
      000938 86 83            [24] 2016 	mov	dph,@r0
      00093A 12r00r00         [24] 2017 	lcall	__mulint
      00093D AD 82            [24] 2018 	mov	r5,dpl
      00093F AE 83            [24] 2019 	mov	r6,dph
      000941 15 81            [12] 2020 	dec	sp
      000943 15 81            [12] 2021 	dec	sp
      000945 D0 01            [24] 2022 	pop	ar1
      000947 D0 02            [24] 2023 	pop	ar2
      000949 D0 03            [24] 2024 	pop	ar3
      00094B D0 04            [24] 2025 	pop	ar4
      00094D D0 07            [24] 2026 	pop	ar7
      00094F 8A 82            [24] 2027 	mov	dpl,r2
      000951 8F 83            [24] 2028 	mov	dph,r7
      000953 ED               [12] 2029 	mov	a,r5
      000954 F0               [24] 2030 	movx	@dptr,a
      000955 EE               [12] 2031 	mov	a,r6
      000956 A3               [24] 2032 	inc	dptr
      000957 F0               [24] 2033 	movx	@dptr,a
                                   2034 ;	walk.c:218: printf("% 8d% 8d", neigh[i].r, neigh[i].c);
      000958 8B 82            [24] 2035 	mov	dpl,r3
      00095A 8C 83            [24] 2036 	mov	dph,r4
      00095C E0               [24] 2037 	movx	a,@dptr
      00095D FB               [12] 2038 	mov	r3,a
      00095E A3               [24] 2039 	inc	dptr
      00095F E0               [24] 2040 	movx	a,@dptr
      000960 FC               [12] 2041 	mov	r4,a
      000961 C0 07            [24] 2042 	push	ar7
      000963 C0 01            [24] 2043 	push	ar1
      000965 C0 05            [24] 2044 	push	ar5
      000967 C0 06            [24] 2045 	push	ar6
      000969 C0 03            [24] 2046 	push	ar3
      00096B C0 04            [24] 2047 	push	ar4
      00096D 74r56            [12] 2048 	mov	a,#___str_6
      00096F C0 E0            [24] 2049 	push	acc
      000971 74s00            [12] 2050 	mov	a,#(___str_6 >> 8)
      000973 C0 E0            [24] 2051 	push	acc
      000975 74 80            [12] 2052 	mov	a,#0x80
      000977 C0 E0            [24] 2053 	push	acc
      000979 12r00r00         [24] 2054 	lcall	_printf
      00097C E5 81            [12] 2055 	mov	a,sp
      00097E 24 F9            [12] 2056 	add	a,#0xf9
      000980 F5 81            [12] 2057 	mov	sp,a
      000982 D0 01            [24] 2058 	pop	ar1
      000984 D0 07            [24] 2059 	pop	ar7
                                   2060 ;	walk.c:215: for (i = 0; i < REG; i++) {
      000986 E5*00            [12] 2061 	mov	a,_bp
      000988 24 0B            [12] 2062 	add	a,#0x0b
      00098A F8               [12] 2063 	mov	r0,a
      00098B 06               [12] 2064 	inc	@r0
      00098C B6 00 02         [24] 2065 	cjne	@r0,#0x00,00191$
      00098F 08               [12] 2066 	inc	r0
      000990 06               [12] 2067 	inc	@r0
      000991                       2068 00191$:
      000991 E5*00            [12] 2069 	mov	a,_bp
      000993 24 0B            [12] 2070 	add	a,#0x0b
      000995 F8               [12] 2071 	mov	r0,a
      000996 86 05            [24] 2072 	mov	ar5,@r0
      000998 08               [12] 2073 	inc	r0
      000999 86 06            [24] 2074 	mov	ar6,@r0
      00099B C3               [12] 2075 	clr	c
      00099C ED               [12] 2076 	mov	a,r5
      00099D 94 08            [12] 2077 	subb	a,#0x08
      00099F EE               [12] 2078 	mov	a,r6
      0009A0 94 00            [12] 2079 	subb	a,#0x00
      0009A2 D0 07            [24] 2080 	pop	ar7
      0009A4 50 03            [24] 2081 	jnc	00192$
      0009A6 02r07rF6         [24] 2082 	ljmp	00116$
      0009A9                       2083 00192$:
                                   2084 ;	walk.c:221: OE76 = OE76_0;
      0009A9 78r01            [12] 2085 	mov	r0,#_OE76
      0009AB 76 3F            [12] 2086 	mov	@r0,#0x3f
                                   2087 ;	walk.c:222: setOE(OE76_NC);
      0009AD 75 82 00         [24] 2088 	mov	dpl,#0x00
      0009B0 C0 07            [24] 2089 	push	ar7
      0009B2 C0 01            [24] 2090 	push	ar1
      0009B4 12r00r19         [24] 2091 	lcall	_setOE
      0009B7 D0 01            [24] 2092 	pop	ar1
      0009B9 D0 07            [24] 2093 	pop	ar7
                                   2094 ;	walk.c:224: walk(&initial);
      0009BB 8F 04            [24] 2095 	mov	ar4,r7
      0009BD 7D 00            [12] 2096 	mov	r5,#0x00
      0009BF 7E 40            [12] 2097 	mov	r6,#0x40
      0009C1 8C 82            [24] 2098 	mov	dpl,r4
      0009C3 8D 83            [24] 2099 	mov	dph,r5
      0009C5 8E F0            [24] 2100 	mov	b,r6
      0009C7 C0 07            [24] 2101 	push	ar7
      0009C9 C0 01            [24] 2102 	push	ar1
      0009CB 12r02rF2         [24] 2103 	lcall	_walk
      0009CE D0 01            [24] 2104 	pop	ar1
      0009D0 D0 07            [24] 2105 	pop	ar7
                                   2106 ;	walk.c:226: for (i = 0; i < ROWS; i++)
      0009D2 E5*00            [12] 2107 	mov	a,_bp
      0009D4 24 0B            [12] 2108 	add	a,#0x0b
      0009D6 F8               [12] 2109 	mov	r0,a
      0009D7 E4               [12] 2110 	clr	a
      0009D8 F6               [12] 2111 	mov	@r0,a
      0009D9 08               [12] 2112 	inc	r0
      0009DA F6               [12] 2113 	mov	@r0,a
      0009DB 7B 00            [12] 2114 	mov	r3,#0x00
      0009DD 7C 00            [12] 2115 	mov	r4,#0x00
                                   2116 ;	walk.c:227: for (j = 0; j < COLS; j++)
      0009DF                       2117 00132$:
      0009DF E5*00            [12] 2118 	mov	a,_bp
      0009E1 24 03            [12] 2119 	add	a,#0x03
      0009E3 F8               [12] 2120 	mov	r0,a
      0009E4 EB               [12] 2121 	mov	a,r3
      0009E5 24r00            [12] 2122 	add	a,#_g
      0009E7 F6               [12] 2123 	mov	@r0,a
      0009E8 EC               [12] 2124 	mov	a,r4
      0009E9 34s00            [12] 2125 	addc	a,#(_g >> 8)
      0009EB 08               [12] 2126 	inc	r0
      0009EC F6               [12] 2127 	mov	@r0,a
      0009ED 7A 00            [12] 2128 	mov	r2,#0x00
      0009EF 7E 00            [12] 2129 	mov	r6,#0x00
      0009F1                       2130 00118$:
                                   2131 ;	walk.c:228: if (g[i][j] != 0xaau) bang();
      0009F1 E5*00            [12] 2132 	mov	a,_bp
      0009F3 24 03            [12] 2133 	add	a,#0x03
      0009F5 F8               [12] 2134 	mov	r0,a
      0009F6 EA               [12] 2135 	mov	a,r2
      0009F7 26               [12] 2136 	add	a,@r0
      0009F8 F5 82            [12] 2137 	mov	dpl,a
      0009FA EE               [12] 2138 	mov	a,r6
      0009FB 08               [12] 2139 	inc	r0
      0009FC 36               [12] 2140 	addc	a,@r0
      0009FD F5 83            [12] 2141 	mov	dph,a
      0009FF E0               [24] 2142 	movx	a,@dptr
      000A00 FD               [12] 2143 	mov	r5,a
      000A01 BD AA 02         [24] 2144 	cjne	r5,#0xaa,00193$
      000A04 80 1B            [24] 2145 	sjmp	00119$
      000A06                       2146 00193$:
      000A06 C0 07            [24] 2147 	push	ar7
      000A08 C0 06            [24] 2148 	push	ar6
      000A0A C0 04            [24] 2149 	push	ar4
      000A0C C0 03            [24] 2150 	push	ar3
      000A0E C0 02            [24] 2151 	push	ar2
      000A10 C0 01            [24] 2152 	push	ar1
      000A12 12r00r0C         [24] 2153 	lcall	_bang
      000A15 D0 01            [24] 2154 	pop	ar1
      000A17 D0 02            [24] 2155 	pop	ar2
      000A19 D0 03            [24] 2156 	pop	ar3
      000A1B D0 04            [24] 2157 	pop	ar4
      000A1D D0 06            [24] 2158 	pop	ar6
      000A1F D0 07            [24] 2159 	pop	ar7
      000A21                       2160 00119$:
                                   2161 ;	walk.c:227: for (j = 0; j < COLS; j++)
      000A21 0A               [12] 2162 	inc	r2
      000A22 BA 00 01         [24] 2163 	cjne	r2,#0x00,00194$
      000A25 0E               [12] 2164 	inc	r6
      000A26                       2165 00194$:
      000A26 C3               [12] 2166 	clr	c
      000A27 EA               [12] 2167 	mov	a,r2
      000A28 94 C0            [12] 2168 	subb	a,#0xc0
      000A2A EE               [12] 2169 	mov	a,r6
      000A2B 64 80            [12] 2170 	xrl	a,#0x80
      000A2D 94 80            [12] 2171 	subb	a,#0x80
      000A2F 40 C0            [24] 2172 	jc	00118$
                                   2173 ;	walk.c:226: for (i = 0; i < ROWS; i++)
      000A31 74 C0            [12] 2174 	mov	a,#0xc0
      000A33 2B               [12] 2175 	add	a,r3
      000A34 FB               [12] 2176 	mov	r3,a
      000A35 E4               [12] 2177 	clr	a
      000A36 3C               [12] 2178 	addc	a,r4
      000A37 FC               [12] 2179 	mov	r4,a
      000A38 E5*00            [12] 2180 	mov	a,_bp
      000A3A 24 0B            [12] 2181 	add	a,#0x0b
      000A3C F8               [12] 2182 	mov	r0,a
      000A3D 06               [12] 2183 	inc	@r0
      000A3E B6 00 02         [24] 2184 	cjne	@r0,#0x00,00196$
      000A41 08               [12] 2185 	inc	r0
      000A42 06               [12] 2186 	inc	@r0
      000A43                       2187 00196$:
      000A43 E5*00            [12] 2188 	mov	a,_bp
      000A45 24 0B            [12] 2189 	add	a,#0x0b
      000A47 F8               [12] 2190 	mov	r0,a
      000A48 C3               [12] 2191 	clr	c
      000A49 E6               [12] 2192 	mov	a,@r0
      000A4A 94 30            [12] 2193 	subb	a,#0x30
      000A4C 08               [12] 2194 	inc	r0
      000A4D E6               [12] 2195 	mov	a,@r0
      000A4E 64 80            [12] 2196 	xrl	a,#0x80
      000A50 94 80            [12] 2197 	subb	a,#0x80
      000A52 40 8B            [24] 2198 	jc	00132$
                                   2199 ;	walk.c:230: N++;
      000A54 E5*00            [12] 2200 	mov	a,_bp
      000A56 24 09            [12] 2201 	add	a,#0x09
      000A58 F8               [12] 2202 	mov	r0,a
      000A59 06               [12] 2203 	inc	@r0
      000A5A B6 00 02         [24] 2204 	cjne	@r0,#0x00,00198$
      000A5D 08               [12] 2205 	inc	r0
      000A5E 06               [12] 2206 	inc	@r0
      000A5F                       2207 00198$:
      000A5F 02r06rDB         [24] 2208 	ljmp	00108$
      000A62                       2209 00110$:
                                   2210 ;	walk.c:233: EA = 0;
                                   2211 ;	assignBit
      000A62 C2 AF            [12] 2212 	clr	_EA
                                   2213 ;	walk.c:235: puts("\033[2J\033[?25h");
      000A64 90r00r5F         [24] 2214 	mov	dptr,#___str_7
      000A67 75 F0 80         [24] 2215 	mov	b,#0x80
      000A6A 12r00r00         [24] 2216 	lcall	_puts
                                   2217 ;	walk.c:17: PCON |= 2;
      000A6D 43 87 02         [24] 2218 	orl	_PCON,#0x02
                                   2219 ;	walk.c:239: return;
                                   2220 ;	walk.c:240: }
      000A70 85*00 81         [24] 2221 	mov	sp,_bp
      000A73 D0*00            [24] 2222 	pop	_bp
      000A75 22               [24] 2223 	ret
                                   2224 ;------------------------------------------------------------
                                   2225 ;Allocation info for local variables in function 'qinit'
                                   2226 ;------------------------------------------------------------
                                   2227 ;	walk.c:242: static void qinit(void) {
                                   2228 ;	-----------------------------------------
                                   2229 ;	 function qinit
                                   2230 ;	-----------------------------------------
      000A76                       2231 _qinit:
                                   2232 ;	walk.c:243: hp = tp = 0;
      000A76 90rB4r02         [24] 2233 	mov	dptr,#_tp
      000A79 E4               [12] 2234 	clr	a
      000A7A F0               [24] 2235 	movx	@dptr,a
      000A7B A3               [24] 2236 	inc	dptr
      000A7C F0               [24] 2237 	movx	@dptr,a
      000A7D 90rB4r00         [24] 2238 	mov	dptr,#_hp
      000A80 F0               [24] 2239 	movx	@dptr,a
      000A81 A3               [24] 2240 	inc	dptr
      000A82 F0               [24] 2241 	movx	@dptr,a
                                   2242 ;	walk.c:244: return;
                                   2243 ;	walk.c:245: }
      000A83 22               [24] 2244 	ret
                                   2245 ;------------------------------------------------------------
                                   2246 ;Allocation info for local variables in function 'qadd'
                                   2247 ;------------------------------------------------------------
                                   2248 ;t                         Allocated to registers r7 r5 r6 
                                   2249 ;sloc0                     Allocated to stack - _bp +1
                                   2250 ;sloc1                     Allocated to stack - _bp +3
                                   2251 ;sloc2                     Allocated to stack - _bp +5
                                   2252 ;sloc3                     Allocated to stack - _bp +10
                                   2253 ;------------------------------------------------------------
                                   2254 ;	walk.c:247: static uint8_t qadd(struct node *t) {
                                   2255 ;	-----------------------------------------
                                   2256 ;	 function qadd
                                   2257 ;	-----------------------------------------
      000A84                       2258 _qadd:
      000A84 C0*00            [24] 2259 	push	_bp
      000A86 E5 81            [12] 2260 	mov	a,sp
      000A88 F5*00            [12] 2261 	mov	_bp,a
      000A8A 24 06            [12] 2262 	add	a,#0x06
      000A8C F5 81            [12] 2263 	mov	sp,a
      000A8E AF 82            [24] 2264 	mov	r7,dpl
      000A90 AD 83            [24] 2265 	mov	r5,dph
      000A92 AE F0            [24] 2266 	mov	r6,b
                                   2267 ;	walk.c:248: if (((hp + 1) % QMAX) == tp) return 0u;
      000A94 90rB4r00         [24] 2268 	mov	dptr,#_hp
      000A97 E0               [24] 2269 	movx	a,@dptr
      000A98 FB               [12] 2270 	mov	r3,a
      000A99 A3               [24] 2271 	inc	dptr
      000A9A E0               [24] 2272 	movx	a,@dptr
      000A9B FC               [12] 2273 	mov	r4,a
      000A9C A8*00            [24] 2274 	mov	r0,_bp
      000A9E 08               [12] 2275 	inc	r0
      000A9F 74 01            [12] 2276 	mov	a,#0x01
      000AA1 2B               [12] 2277 	add	a,r3
      000AA2 F6               [12] 2278 	mov	@r0,a
      000AA3 E4               [12] 2279 	clr	a
      000AA4 3C               [12] 2280 	addc	a,r4
      000AA5 08               [12] 2281 	inc	r0
      000AA6 F6               [12] 2282 	mov	@r0,a
      000AA7 C0 07            [24] 2283 	push	ar7
      000AA9 C0 06            [24] 2284 	push	ar6
      000AAB C0 05            [24] 2285 	push	ar5
      000AAD C0 04            [24] 2286 	push	ar4
      000AAF C0 03            [24] 2287 	push	ar3
      000AB1 E4               [12] 2288 	clr	a
      000AB2 C0 E0            [24] 2289 	push	acc
      000AB4 74 24            [12] 2290 	mov	a,#0x24
      000AB6 C0 E0            [24] 2291 	push	acc
      000AB8 A8*00            [24] 2292 	mov	r0,_bp
      000ABA 08               [12] 2293 	inc	r0
      000ABB 86 82            [24] 2294 	mov	dpl,@r0
      000ABD 08               [12] 2295 	inc	r0
      000ABE 86 83            [24] 2296 	mov	dph,@r0
      000AC0 12r00r00         [24] 2297 	lcall	__modsint
      000AC3 A8*00            [24] 2298 	mov	r0,_bp
      000AC5 08               [12] 2299 	inc	r0
      000AC6 08               [12] 2300 	inc	r0
      000AC7 08               [12] 2301 	inc	r0
      000AC8 A6 82            [24] 2302 	mov	@r0,dpl
      000ACA 08               [12] 2303 	inc	r0
      000ACB A6 83            [24] 2304 	mov	@r0,dph
      000ACD 15 81            [12] 2305 	dec	sp
      000ACF 15 81            [12] 2306 	dec	sp
      000AD1 D0 03            [24] 2307 	pop	ar3
      000AD3 D0 04            [24] 2308 	pop	ar4
      000AD5 D0 05            [24] 2309 	pop	ar5
      000AD7 D0 06            [24] 2310 	pop	ar6
      000AD9 D0 07            [24] 2311 	pop	ar7
      000ADB 90rB4r02         [24] 2312 	mov	dptr,#_tp
      000ADE E5*00            [12] 2313 	mov	a,_bp
      000AE0 24 05            [12] 2314 	add	a,#0x05
      000AE2 F8               [12] 2315 	mov	r0,a
      000AE3 E0               [24] 2316 	movx	a,@dptr
      000AE4 F6               [12] 2317 	mov	@r0,a
      000AE5 A3               [24] 2318 	inc	dptr
      000AE6 E0               [24] 2319 	movx	a,@dptr
      000AE7 08               [12] 2320 	inc	r0
      000AE8 F6               [12] 2321 	mov	@r0,a
      000AE9 E5*00            [12] 2322 	mov	a,_bp
      000AEB 24 03            [12] 2323 	add	a,#0x03
      000AED F8               [12] 2324 	mov	r0,a
      000AEE E5*00            [12] 2325 	mov	a,_bp
      000AF0 24 05            [12] 2326 	add	a,#0x05
      000AF2 F9               [12] 2327 	mov	r1,a
      000AF3 86 F0            [24] 2328 	mov	b,@r0
      000AF5 E7               [12] 2329 	mov	a,@r1
      000AF6 B5 F0 0A         [24] 2330 	cjne	a,b,00109$
      000AF9 08               [12] 2331 	inc	r0
      000AFA 86 F0            [24] 2332 	mov	b,@r0
      000AFC 09               [12] 2333 	inc	r1
      000AFD E7               [12] 2334 	mov	a,@r1
      000AFE B5 F0 02         [24] 2335 	cjne	a,b,00109$
      000B01 80 02            [24] 2336 	sjmp	00110$
      000B03                       2337 00109$:
      000B03 80 05            [24] 2338 	sjmp	00102$
      000B05                       2339 00110$:
      000B05 75 82 00         [24] 2340 	mov	dpl,#0x00
      000B08 80 64            [24] 2341 	sjmp	00103$
      000B0A                       2342 00102$:
                                   2343 ;	walk.c:249: queue[hp] = *t;
      000B0A 8F 02            [24] 2344 	mov	ar2,r7
      000B0C 8E 07            [24] 2345 	mov	ar7,r6
      000B0E EB               [12] 2346 	mov	a,r3
      000B0F 2B               [12] 2347 	add	a,r3
      000B10 FB               [12] 2348 	mov	r3,a
      000B11 EC               [12] 2349 	mov	a,r4
      000B12 33               [12] 2350 	rlc	a
      000B13 FC               [12] 2351 	mov	r4,a
      000B14 EB               [12] 2352 	mov	a,r3
      000B15 2B               [12] 2353 	add	a,r3
      000B16 FB               [12] 2354 	mov	r3,a
      000B17 EC               [12] 2355 	mov	a,r4
      000B18 33               [12] 2356 	rlc	a
      000B19 FC               [12] 2357 	mov	r4,a
      000B1A EB               [12] 2358 	mov	a,r3
      000B1B 24r00            [12] 2359 	add	a,#_queue
      000B1D FB               [12] 2360 	mov	r3,a
      000B1E EC               [12] 2361 	mov	a,r4
      000B1F 34s24            [12] 2362 	addc	a,#(_queue >> 8)
      000B21 FC               [12] 2363 	mov	r4,a
      000B22 7E 00            [12] 2364 	mov	r6,#0x00
      000B24 74 04            [12] 2365 	mov	a,#0x04
      000B26 C0 E0            [24] 2366 	push	acc
      000B28 E4               [12] 2367 	clr	a
      000B29 C0 E0            [24] 2368 	push	acc
      000B2B C0 02            [24] 2369 	push	ar2
      000B2D C0 05            [24] 2370 	push	ar5
      000B2F C0 07            [24] 2371 	push	ar7
      000B31 8B 82            [24] 2372 	mov	dpl,r3
      000B33 8C 83            [24] 2373 	mov	dph,r4
      000B35 8E F0            [24] 2374 	mov	b,r6
      000B37 12r00r00         [24] 2375 	lcall	___memcpy
      000B3A E5 81            [12] 2376 	mov	a,sp
      000B3C 24 FB            [12] 2377 	add	a,#0xfb
      000B3E F5 81            [12] 2378 	mov	sp,a
                                   2379 ;	walk.c:250: hp = (hp + 1) % QMAX;
      000B40 90rB4r00         [24] 2380 	mov	dptr,#_hp
      000B43 E0               [24] 2381 	movx	a,@dptr
      000B44 FD               [12] 2382 	mov	r5,a
      000B45 A3               [24] 2383 	inc	dptr
      000B46 E0               [24] 2384 	movx	a,@dptr
      000B47 FE               [12] 2385 	mov	r6,a
      000B48 0D               [12] 2386 	inc	r5
      000B49 BD 00 01         [24] 2387 	cjne	r5,#0x00,00111$
      000B4C 0E               [12] 2388 	inc	r6
      000B4D                       2389 00111$:
      000B4D E4               [12] 2390 	clr	a
      000B4E C0 E0            [24] 2391 	push	acc
      000B50 74 24            [12] 2392 	mov	a,#0x24
      000B52 C0 E0            [24] 2393 	push	acc
      000B54 8D 82            [24] 2394 	mov	dpl,r5
      000B56 8E 83            [24] 2395 	mov	dph,r6
      000B58 12r00r00         [24] 2396 	lcall	__modsint
      000B5B AD 82            [24] 2397 	mov	r5,dpl
      000B5D AE 83            [24] 2398 	mov	r6,dph
      000B5F 15 81            [12] 2399 	dec	sp
      000B61 15 81            [12] 2400 	dec	sp
      000B63 90rB4r00         [24] 2401 	mov	dptr,#_hp
      000B66 ED               [12] 2402 	mov	a,r5
      000B67 F0               [24] 2403 	movx	@dptr,a
      000B68 EE               [12] 2404 	mov	a,r6
      000B69 A3               [24] 2405 	inc	dptr
      000B6A F0               [24] 2406 	movx	@dptr,a
                                   2407 ;	walk.c:251: return 1u;
      000B6B 75 82 01         [24] 2408 	mov	dpl,#0x01
      000B6E                       2409 00103$:
                                   2410 ;	walk.c:252: }
      000B6E 85*00 81         [24] 2411 	mov	sp,_bp
      000B71 D0*00            [24] 2412 	pop	_bp
      000B73 22               [24] 2413 	ret
                                   2414 ;------------------------------------------------------------
                                   2415 ;Allocation info for local variables in function 'qget'
                                   2416 ;------------------------------------------------------------
                                   2417 ;t                         Allocated to registers r5 r6 r7 
                                   2418 ;------------------------------------------------------------
                                   2419 ;	walk.c:254: static uint8_t qget(struct node *t) {
                                   2420 ;	-----------------------------------------
                                   2421 ;	 function qget
                                   2422 ;	-----------------------------------------
      000B74                       2423 _qget:
      000B74 AD 82            [24] 2424 	mov	r5,dpl
      000B76 AE 83            [24] 2425 	mov	r6,dph
      000B78 AF F0            [24] 2426 	mov	r7,b
                                   2427 ;	walk.c:255: if (hp == tp) return 0u;
      000B7A 90rB4r00         [24] 2428 	mov	dptr,#_hp
      000B7D E0               [24] 2429 	movx	a,@dptr
      000B7E FB               [12] 2430 	mov	r3,a
      000B7F A3               [24] 2431 	inc	dptr
      000B80 E0               [24] 2432 	movx	a,@dptr
      000B81 FC               [12] 2433 	mov	r4,a
      000B82 90rB4r02         [24] 2434 	mov	dptr,#_tp
      000B85 E0               [24] 2435 	movx	a,@dptr
      000B86 F9               [12] 2436 	mov	r1,a
      000B87 A3               [24] 2437 	inc	dptr
      000B88 E0               [24] 2438 	movx	a,@dptr
      000B89 FA               [12] 2439 	mov	r2,a
      000B8A EB               [12] 2440 	mov	a,r3
      000B8B B5 01 08         [24] 2441 	cjne	a,ar1,00102$
      000B8E EC               [12] 2442 	mov	a,r4
      000B8F B5 02 04         [24] 2443 	cjne	a,ar2,00102$
      000B92 75 82 00         [24] 2444 	mov	dpl,#0x00
      000B95 22               [24] 2445 	ret
      000B96                       2446 00102$:
                                   2447 ;	walk.c:256: *t = queue[tp];
      000B96 E9               [12] 2448 	mov	a,r1
      000B97 29               [12] 2449 	add	a,r1
      000B98 F9               [12] 2450 	mov	r1,a
      000B99 EA               [12] 2451 	mov	a,r2
      000B9A 33               [12] 2452 	rlc	a
      000B9B FA               [12] 2453 	mov	r2,a
      000B9C E9               [12] 2454 	mov	a,r1
      000B9D 29               [12] 2455 	add	a,r1
      000B9E F9               [12] 2456 	mov	r1,a
      000B9F EA               [12] 2457 	mov	a,r2
      000BA0 33               [12] 2458 	rlc	a
      000BA1 FA               [12] 2459 	mov	r2,a
      000BA2 E9               [12] 2460 	mov	a,r1
      000BA3 24r00            [12] 2461 	add	a,#_queue
      000BA5 F9               [12] 2462 	mov	r1,a
      000BA6 EA               [12] 2463 	mov	a,r2
      000BA7 34s24            [12] 2464 	addc	a,#(_queue >> 8)
      000BA9 FA               [12] 2465 	mov	r2,a
      000BAA 7C 00            [12] 2466 	mov	r4,#0x00
      000BAC 74 04            [12] 2467 	mov	a,#0x04
      000BAE C0 E0            [24] 2468 	push	acc
      000BB0 E4               [12] 2469 	clr	a
      000BB1 C0 E0            [24] 2470 	push	acc
      000BB3 C0 01            [24] 2471 	push	ar1
      000BB5 C0 02            [24] 2472 	push	ar2
      000BB7 C0 04            [24] 2473 	push	ar4
      000BB9 8D 82            [24] 2474 	mov	dpl,r5
      000BBB 8E 83            [24] 2475 	mov	dph,r6
      000BBD 8F F0            [24] 2476 	mov	b,r7
      000BBF 12r00r00         [24] 2477 	lcall	___memcpy
      000BC2 E5 81            [12] 2478 	mov	a,sp
      000BC4 24 FB            [12] 2479 	add	a,#0xfb
      000BC6 F5 81            [12] 2480 	mov	sp,a
                                   2481 ;	walk.c:257: tp = (tp + 1) % QMAX;
      000BC8 90rB4r02         [24] 2482 	mov	dptr,#_tp
      000BCB E0               [24] 2483 	movx	a,@dptr
      000BCC FE               [12] 2484 	mov	r6,a
      000BCD A3               [24] 2485 	inc	dptr
      000BCE E0               [24] 2486 	movx	a,@dptr
      000BCF FF               [12] 2487 	mov	r7,a
      000BD0 0E               [12] 2488 	inc	r6
      000BD1 BE 00 01         [24] 2489 	cjne	r6,#0x00,00111$
      000BD4 0F               [12] 2490 	inc	r7
      000BD5                       2491 00111$:
      000BD5 E4               [12] 2492 	clr	a
      000BD6 C0 E0            [24] 2493 	push	acc
      000BD8 74 24            [12] 2494 	mov	a,#0x24
      000BDA C0 E0            [24] 2495 	push	acc
      000BDC 8E 82            [24] 2496 	mov	dpl,r6
      000BDE 8F 83            [24] 2497 	mov	dph,r7
      000BE0 12r00r00         [24] 2498 	lcall	__modsint
      000BE3 AE 82            [24] 2499 	mov	r6,dpl
      000BE5 AF 83            [24] 2500 	mov	r7,dph
      000BE7 15 81            [12] 2501 	dec	sp
      000BE9 15 81            [12] 2502 	dec	sp
      000BEB 90rB4r02         [24] 2503 	mov	dptr,#_tp
      000BEE EE               [12] 2504 	mov	a,r6
      000BEF F0               [24] 2505 	movx	@dptr,a
      000BF0 EF               [12] 2506 	mov	a,r7
      000BF1 A3               [24] 2507 	inc	dptr
      000BF2 F0               [24] 2508 	movx	@dptr,a
                                   2509 ;	walk.c:258: return 1u;
      000BF3 75 82 01         [24] 2510 	mov	dpl,#0x01
                                   2511 ;	walk.c:259: }
      000BF6 22               [24] 2512 	ret
                                   2513 	.area CSEG    (CODE)
                                   2514 	.area CONST   (CODE)
                                   2515 	.area CONST   (CODE)
      000000                       2516 ___str_0:
      000000 4D 65 6D 6F 72 79 20  2517 	.ascii "Memory error"
             65 72 72 6F 72
      00000C 00                    2518 	.db 0x00
                                   2519 	.area CSEG    (CODE)
                                   2520 	.area CONST   (CODE)
      00000D                       2521 ___str_1:
      00000D 1B                    2522 	.db 0x1b
      00000E 5B 32 3B 31 48 25 20  2523 	.ascii "[2;1H% 8d% 8d% 8d% 8d"
             38 64 25 20 38 64 25
             20 38 64 25 20 38 64
      000023 00                    2524 	.db 0x00
                                   2525 	.area CSEG    (CODE)
                                   2526 	.area CONST   (CODE)
      000024                       2527 ___str_2:
      000024 1B                    2528 	.db 0x1b
      000025 5B 25 64 3B 25 64 48  2529 	.ascii "[%d;%dH."
             2E
      00002D 00                    2530 	.db 0x00
                                   2531 	.area CSEG    (CODE)
                                   2532 	.area CONST   (CODE)
      00002E                       2533 ___str_3:
      00002E 1B                    2534 	.db 0x1b
      00002F 5B 25 64 3B 25 64 48  2535 	.ascii "[%d;%dHo"
             6F
      000037 00                    2536 	.db 0x00
                                   2537 	.area CSEG    (CODE)
                                   2538 	.area CONST   (CODE)
      000038                       2539 ___str_4:
      000038 1B                    2540 	.db 0x1b
      000039 5B 32 4A              2541 	.ascii "[2J"
      00003C 1B                    2542 	.db 0x1b
      00003D 5B 3F 32 35 6C        2543 	.ascii "[?25l"
      000042 00                    2544 	.db 0x00
                                   2545 	.area CSEG    (CODE)
                                   2546 	.area CONST   (CODE)
      000043                       2547 ___str_5:
      000043 1B                    2548 	.db 0x1b
      000044 5B 31 3B 31 48 25 20  2549 	.ascii "[1;1H% 8u% 8d% 8d"
             38 75 25 20 38 64 25
             20 38 64
      000055 00                    2550 	.db 0x00
                                   2551 	.area CSEG    (CODE)
                                   2552 	.area CONST   (CODE)
      000056                       2553 ___str_6:
      000056 25 20 38 64 25 20 38  2554 	.ascii "% 8d% 8d"
             64
      00005E 00                    2555 	.db 0x00
                                   2556 	.area CSEG    (CODE)
                                   2557 	.area CONST   (CODE)
      00005F                       2558 ___str_7:
      00005F 1B                    2559 	.db 0x1b
      000060 5B 32 4A              2560 	.ascii "[2J"
      000063 1B                    2561 	.db 0x1b
      000064 5B 3F 32 35 68        2562 	.ascii "[?25h"
      000069 00                    2563 	.db 0x00
                                   2564 	.area CSEG    (CODE)
                                   2565 	.area XINIT   (CODE)
      000000                       2566 __xinit__neigh:
      000000 FF FF                 2567 	.byte #0xff, #0xff	; -1
      000002 01 00                 2568 	.byte #0x01, #0x00	;  1
      000004 FF FF                 2569 	.byte #0xff, #0xff	; -1
      000006 FF FF                 2570 	.byte #0xff, #0xff	; -1
      000008 01 00                 2571 	.byte #0x01, #0x00	;  1
      00000A FF FF                 2572 	.byte #0xff, #0xff	; -1
      00000C 01 00                 2573 	.byte #0x01, #0x00	;  1
      00000E 01 00                 2574 	.byte #0x01, #0x00	;  1
      000010 FF FF                 2575 	.byte #0xff, #0xff	; -1
      000012 00 00                 2576 	.byte #0x00, #0x00	;  0
      000014 00 00                 2577 	.byte #0x00, #0x00	;  0
      000016 FF FF                 2578 	.byte #0xff, #0xff	; -1
      000018 01 00                 2579 	.byte #0x01, #0x00	;  1
      00001A 00 00                 2580 	.byte #0x00, #0x00	;  0
      00001C 00 00                 2581 	.byte #0x00, #0x00	;  0
      00001E 01 00                 2582 	.byte #0x01, #0x00	;  1
      000020 FF FF                 2583 	.byte #0xff, #0xff	; -1
      000022 01 00                 2584 	.byte #0x01, #0x00	;  1
      000024 FF FF                 2585 	.byte #0xff, #0xff	; -1
      000026 FF FF                 2586 	.byte #0xff, #0xff	; -1
      000028 01 00                 2587 	.byte #0x01, #0x00	;  1
      00002A FF FF                 2588 	.byte #0xff, #0xff	; -1
      00002C 01 00                 2589 	.byte #0x01, #0x00	;  1
      00002E 01 00                 2590 	.byte #0x01, #0x00	;  1
      000030 FF FF                 2591 	.byte #0xff, #0xff	; -1
      000032 00 00                 2592 	.byte #0x00, #0x00	;  0
      000034 00 00                 2593 	.byte #0x00, #0x00	;  0
      000036 FF FF                 2594 	.byte #0xff, #0xff	; -1
      000038 01 00                 2595 	.byte #0x01, #0x00	;  1
      00003A 00 00                 2596 	.byte #0x00, #0x00	;  0
      00003C 00 00                 2597 	.byte #0x00, #0x00	;  0
      00003E 01 00                 2598 	.byte #0x01, #0x00	;  1
                                   2599 	.area CABS    (ABS,CODE)
