                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   ;
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   ;
                   ; Version 2.1ab
                   ;        Extensive mods by Atanas Bachvaroff <bachvaroff@gma
                   ;
                   ; See LICENSE
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xdfff            ; end of the memory to sear
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     p2_init, 0xff           ; boot time default page is
0000:              .equ     sp_init, 0x17           ; location of the stack
0000:              .equ     sp_reset, 0x07          ; stack on reset
0000:              .equ     mctrl_reset, 11111111b  ; memory controller (P1) on
0000:              .equ     mctrl_shadow, 11111110b         ; memory controller
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|
                   ;                         \__ sp_reset
                   ; |10|11|12|13|14|15|16|17|
                   ;                         \__ sp_init
                   ;
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  dnld  .  .  |
                   ; |  .  .  .  dnld  .  .  |
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; bc = 65536 - (OSC / 32) / baud
                   ;---------------------------------------------------------;
                   ; 0xfffa @ 57600bps @ 11.059MHz
                   ;.equ    bc, 0xfffa
                   ; 0xfff7 @ 38400bps @ 11.059MHz
                   ;.equ    bc, 0xfff7
                   ; 0xffee @ 19200bps @ 11.059MHz
                   ;.equ    bc, 0xffee
                   ; 0xffdc @ 9600bps @ 11.059MHz
                   ;.equ    bc, 0xffdc
                   ; 0xfff7 @ 57600bps @ 16.5888MHz
0000:              .equ     bc, 0xfff7
                   ; 0xffee @ 28800bps @ 16.5888MHz
                   ;.equ    bc, 0xffee
                   ; 0xffe5 @ 19200bps @ 16.5888MHz
                   ;.equ    bc, 0xffe5
                   ; 0xffca @ 9600bps @ 16.5888MHz
                   ;.equ    bc, 0xffca
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Key command definitions
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     crc16_key, 'W'          ; calculate crc16
0000:              .equ     baud_key, 'B'           ; reset baudrate
0000:              .equ     eio77_key, '<'          ; enable IO space 0xe000-0x
0000:              .equ     dio77_key, '>'          ; disable IO space 0xe000-0
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Common ASCII codes
0000:              .equ     LF, '\n'
0000:              .equ     CR, '\r'
0000:              .equ     ESC, 27
0000:              .equ     SPACE, ' '
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; spare the flash by filling the space between vectors
                   ; with "mov r7, a" / 0xff in binary
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 0A 32              ljmp    reset
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base + 3
0003: 02 20 03              ljmp    vector + 3
0006: FF                    mov     r7, a
0007: FF                    mov     r7, a
0008: FF                    mov     r7, a
0009: FF                    mov     r7, a
000A: FF                    mov     r7, a
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base + 11
000B: 02 20 0B              ljmp    vector + 11
000E: FF                    mov     r7, a
000F: FF                    mov     r7, a
0010: FF                    mov     r7, a
0011: FF                    mov     r7, a
0012: FF                    mov     r7, a
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base + 19
0013: 02 20 13              ljmp    vector + 19
0016: FF                    mov     r7, a
0017: FF                    mov     r7, a
0018: FF                    mov     r7, a
0019: FF                    mov     r7, a
001A: FF                    mov     r7, a
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base + 27
001B: 02 20 1B              ljmp    vector + 27
001E: FF                    mov     r7, a
001F: FF                    mov     r7, a
0020: FF                    mov     r7, a
0021: FF                    mov     r7, a
0022: FF                    mov     r7, a
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base + 35
0023: 02 20 23              ljmp    vector + 35
0026: FF                    mov     r7, a
0027: FF                    mov     r7, a
0028: FF                    mov     r7, a
0029: FF                    mov     r7, a
002A: FF                    mov     r7, a
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base + 43
002B: 02 20 2B              ljmp    vector + 43
002E: FF                    mov     r7, a
002F: FF                    mov     r7, a
0030: FF                    mov     r7, a
0031: FF                    mov     r7, a
0032: FF                    mov     r7, a
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;           Update paulmon21.equ accordingly               ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
0033:              .org     base + 51
0033: 02 00 75              ljmp    setbaud                 ; JMP_TABLE 0x0033
0036: 02 00 8A              ljmp    cin             ; JMP_TABLE 0x0036
0039: 02 00 92              ljmp    cinpoll                 ; JMP_TABLE 0x0039
003C: 02 00 9C              ljmp    cout            ; JMP_TABLE 0x003c
                            
003F: 02 01 CE              ljmp    phex            ; JMP_TABLE 0x003f
0042: 02 01 D1              ljmp    phex1           ; JMP_TABLE 0x0042
0045: 02 01 E0              ljmp    phex16          ; JMP_TABLE 0x0045
0048: 02 00 D3              ljmp    pcstr           ; JMP_TABLE 0x0048
004B: 02 00 E0              ljmp    pcb7str                 ; JMP_TABLE 0x004b
004E: 02 01 ED              ljmp    pint8u          ; JMP_TABLE 0x004e
0051: 02 01 F3              ljmp    pint8           ; JMP_TABLE 0x0051
0054: 02 02 31              ljmp    pint16u                 ; JMP_TABLE 0x0054
0057: 02 00 B6              ljmp    crlf            ; JMP_TABLE 0x0057
                            
005A: 02 00 F4              ljmp    ghex            ; JMP_TABLE 0x005a
005D: 02 01 38              ljmp    ghex16          ; JMP_TABLE 0x005d
                            
0060: 02 01 B4              ljmp    asc2hex                 ; JMP_TABLE 0x0060
0063: 02 02 A4              ljmp    upper           ; JMP_TABLE 0x0063
0066: 02 02 B1              ljmp    lencstr                 ; JMP_TABLE 0x0066
0069: 02 02 BF              ljmp    lencb7str       ; JMP_TABLE 0x0069
                            
006C: 02 09 25              ljmp    init_crc16      ; JMP_TABLE 0x006c
006F: 02 09 39              ljmp    update_crc16    ; JMP_TABLE 0x006f
0072: 02 09 2E              ljmp    finish_crc16    ; JMP_TABLE 0x0072
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   setbaud:
0075: C2 CA                 clr     tr2
0077: F5 CC                 mov     tl2, a
0079: 85 F0 CD              mov     th2, b
007C: F5 CA                 mov     rcap2l, a
007E: 85 F0 CB              mov     rcap2h, b
0081: 75 C8 30              mov     t2con, #00110000b
0084: 75 98 52              mov     scon, #01010010b
0087: D2 CA                 setb    tr2
0089: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   cin:
008A: 30 98 FD              jnb     ri, cin
008D: E5 99                 mov     a, sbuf
008F: C2 98                 clr     ri
0091: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   cinpoll:
0092: D3                    setb    c
0093: 30 98 05              jnb     ri, cinpoll1
0096: E5 99                 mov     a, sbuf
0098: C2 98                 clr     ri
009A: C3                    clr     c
                   cinpoll1:
009B: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   cout:
009C: 30 99 FD              jnb     ti, cout
009F: C2 99                 clr     ti
00A1: F5 99                 mov     sbuf, a
00A3: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   sspace:
00A4: C0 E0                 push    acc
00A6: 74 20                 mov     a, #SPACE
00A8: 11 9C                 acall   cout
00AA: D0 E0                 pop     acc
00AC: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   dash:
00AD: C0 E0                 push    acc
00AF: 74 2D                 mov     a, #'-'
00B1: 11 9C                 acall   cout
00B3: D0 E0                 pop     acc
00B5: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   crlf:
00B6: C0 E0                 push    acc
00B8: 74 0D                 mov     a, #CR
00BA: 11 9C                 acall   cout
00BC: 74 0A                 mov     a, #LF
00BE: 11 9C                 acall   cout
00C0: D0 E0                 pop     acc
00C2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   cout_sp:
00C3: 11 9C                 acall   cout
00C5: 01 A4                 ajmp    sspace
                   
                   ;---------------------------------------------------------;
                   
                   dash_sp:
00C7: 11 AD                 acall   dash
00C9: 01 A4                 ajmp    sspace
                   
                   ;---------------------------------------------------------;
                   
                   dspace:
00CB: 11 A4                 acall   sspace
00CD: 01 A4                 ajmp    sspace
                   
                   ;---------------------------------------------------------;
                   
                   dcrlf:
00CF: 11 B6                 acall   crlf
00D1: 01 B6                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   pcstr:
00D3: C0 E0                 push    acc
                   pcstr1:
00D5: E0                    movx    a, @dptr
00D6: A3                    inc     dptr
00D7: 60 04                 jz      pcstr2
00D9: 11 9C                 acall   cout
00DB: 80 F8                 sjmp    pcstr1
                   pcstr2:
00DD: D0 E0                 pop     acc
00DF: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   pcb7str:
00E0: C0 E0                 push    acc
                   pcb7str1:
00E2: E0                    movx    a, @dptr
00E3: A3                    inc     dptr
00E4: 60 0B                 jz      pcb7str3
00E6: 20 E7 04              jb      acc.7, pcb7str2
00E9: 11 9C                 acall   cout
00EB: 80 F5                 sjmp    pcb7str1
                   pcb7str2:
00ED: 54 7F                 anl     a, #0x7f
00EF: 11 9C                 acall   cout
                   pcb7str3:
00F1: D0 E0                 pop     acc
00F3: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
00F4: C2 D5                 clr     psw.5
                   ghex8c:
00F6: 11 8A                 acall   cin     ; get first digit
00F8: 51 A4                 acall   upper
00FA: B4 1B 03              cjne    a, #ESC, ghex8f
                   ghex8d:
00FD: D3                    setb    c
00FE: E4                    clr     a
00FF: 22                    ret
                   ghex8f:
0100: B4 0D 05              cjne    a, #CR, ghex8h
0103: D2 D5                 setb    psw.5
0105: C3                    clr     c
0106: E4                    clr     a
0107: 22                    ret
                   ghex8h:
0108: FA                    mov     r2, a
0109: 31 B4                 acall   asc2hex
010B: 40 E9                 jc      ghex8c
010D: CA                    xch     a, r2           ; r2 will hold hex value of
010E: 11 9C                 acall   cout
                   ghex8j:
0110: 11 8A                 acall   cin     ; get second digit
0112: 51 A4                 acall   upper
0114: B4 1B 02              cjne    a, #ESC, ghex8k
0117: 80 E4                 sjmp    ghex8d
                   ghex8k:
0119: B4 0D 03              cjne    a, #CR, ghex8m
011C: EA                    mov     a, r2
011D: C3                    clr     c
011E: 22                    ret
                   ghex8m:
011F: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
0122: 11 9C                 acall   cout
0124: 80 D0                 sjmp    ghex8c
                   ghex8p:
0126: B4 15 02              cjne    a, #21, ghex8q
0129: 80 F7                 sjmp    ghex8n
                   ghex8q:
012B: FB                    mov     r3, a
012C: 31 B4                 acall   asc2hex
012E: 40 E0                 jc      ghex8j
0130: CB                    xch     a, r3
0131: 11 9C                 acall   cout
0133: EA                    mov     a, r2
0134: C4                    swap    a
0135: 4B                    orl     a, r3
0136: C3                    clr     c
0137: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
0138: 7A 00                 mov     r2, #0          ; start out with 0
013A: 7B 00                 mov     r3, #0
013C: 7C 04                 mov     r4, #4          ; number of digits left
013E: C2 D5                 clr     psw.5
                   
                   ghex16c:
0140: 11 8A                 acall   cin
0142: 51 A4                 acall   upper
0144: B4 1B 07              cjne    a, #ESC, ghex16d
0147: D3                    setb    c               ; handle esc key
0148: E4                    clr     a
0149: F5 83                 mov     dph, a
014B: F5 82                 mov     dpl, a
014D: 22                    ret
                   ghex16d:
014E: B4 08 02              cjne    a, #8, ghex16f
0151: 80 03                 sjmp    ghex16k
                   ghex16f:
0153: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
0156: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
0159: 80 E5                 sjmp    ghex16c
                   ghex16e:
015B: 11 9C                 acall   cout
015D: 31 A3                 acall   ghex16y
015F: 0C                    inc     r4
0160: 80 DE                 sjmp    ghex16c
                   ghex16g:
0162: B4 0D 10              cjne    a, #CR, ghex16i                 ; return ke
0165: 8B 83                 mov     dph, r3
0167: 8A 82                 mov     dpl, r2
0169: BC 04 07              cjne    r4, #4, ghex16h
016C: E4                    clr     a
016D: F5 83                 mov     dph, a
016F: F5 82                 mov     dpl, a
0171: D2 D5                 setb    psw.5
                   ghex16h:
0173: C3                    clr     c
0174: 22                    ret
                   ghex16i:
0175: FD                    mov     r5, a                   ; keep copy of orig
0176: 31 B4                 acall   asc2hex
0178: 40 C6                 jc      ghex16c
017A: CD                    xch     a, r5
017B: 12 00 9C              lcall   cout
017E: ED                    mov     a, r5
017F: C0 E0                 push    acc
0181: 31 92                 acall   ghex16x
0183: D0 E0                 pop     acc
0185: 2A                    add     a, r2
0186: FA                    mov     r2, a
0187: E4                    clr     a
0188: 3B                    addc    a, r3
0189: FB                    mov     r3, a
018A: DC B4                 djnz    r4, ghex16c
018C: C3                    clr     c
018D: 8A 82                 mov     dpl, r2
018F: 8B 83                 mov     dph, r3
0191: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
0192: EB                    mov     a, r3
0193: C4                    swap    a
0194: 54 F0                 anl     a, #11110000b
0196: FB                    mov     r3, a
0197: EA                    mov     a, r2
0198: C4                    swap    a
0199: 54 0F                 anl     a, #00001111b
019B: 4B                    orl     a, r3
019C: FB                    mov     r3, a
019D: EA                    mov     a, r2
019E: C4                    swap    a
019F: 54 F0                 anl     a, #11110000b
01A1: FA                    mov     r2, a
01A2: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
01A3: EA                    mov     a, r2
01A4: C4                    swap    a
01A5: 54 0F                 anl     a, #00001111b
01A7: FA                    mov     r2, a
01A8: EB                    mov     a, r3
01A9: C4                    swap    a
01AA: 54 F0                 anl     a, #11110000b
01AC: 4A                    orl     a, r2
01AD: FA                    mov     r2, a
01AE: EB                    mov     a, r3
01AF: C4                    swap    a
01B0: 54 0F                 anl     a, #00001111b
01B2: FB                    mov     r3, a
01B3: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
01B4: 24 D0                 add     a, #208
01B6: 50 14                 jnc     hex_not
01B8: 24 F6                 add     a, #246
01BA: 40 04                 jc      hex_maybe
01BC: 24 0A                 add     a, #10
01BE: C3                    clr     c
01BF: 22                    ret
                   hex_maybe:
01C0: 24 F9                 add     a, #249
01C2: 50 08                 jnc     hex_not
01C4: 24 FA                 add     a, #250
01C6: 40 04                 jc      hex_not
01C8: 24 10                 add     a, #16
01CA: C3                    clr     c
01CB: 22                    ret
                   hex_not:
01CC: D3                    setb    c
01CD: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
01CE: 31 D0                 acall   phex_b
                   phex_b:
01D0: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
01D1: C0 E0                 push    acc
01D3: 54 0F                 anl     a, #15
01D5: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
01D7: D4                    da      a               ; if A to F, C=1 and lower 
01D8: 34 40                 addc    a, #0x40
01DA: D4                    da      a
01DB: 11 9C                 acall   cout
01DD: D0 E0                 pop     acc
01DF: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
01E0: C0 E0                 push    acc
01E2: E5 83                 mov     a, dph
01E4: 31 CE                 acall   phex
01E6: E5 82                 mov     a, dpl
01E8: 31 CE                 acall   phex
01EA: D0 E0                 pop     acc
01EC: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
01ED: C0 F0                 push    b
01EF: C0 E0                 push    acc
01F1: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
01F3: C0 F0                 push    b
01F5: C0 E0                 push    acc
01F7: 30 E7 0C              jnb     acc.7, pint8b
01FA: 74 2D                 mov     a, #'-'
01FC: 12 00 9C              lcall   cout
01FF: D0 E0                 pop     acc
0201: C0 E0                 push    acc
0203: F4                    cpl     a
0204: 24 01                 add     a, #1
                   pint8b:
0206: 75 F0 64              mov     b, #100
0209: 84                    div     ab
020A: D2 D5                 setb    f0
020C: 60 07                 jz      pint8c
020E: C2 D5                 clr     f0
0210: 24 30                 add     a, #'0'
0212: 12 00 9C              lcall   cout
                   pint8c:
0215: E5 F0                 mov     a, b
0217: 75 F0 0A              mov     b, #10
021A: 84                    div     ab
021B: 30 D5 02              jnb     f0, pint8d
021E: 60 05                 jz      pint8e
                   pint8d:
0220: 24 30                 add     a, #'0'
0222: 12 00 9C              lcall   cout
                   pint8e:
0225: E5 F0                 mov     a, b
0227: 24 30                 add     a, #'0'
0229: 12 00 9C              lcall   cout
022C: D0 E0                 pop     acc
022E: D0 F0                 pop     b
0230: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
0231: C0 E0                 push    acc
0233: E8                    mov     a, r0
0234: C0 E0                 push    acc
0236: C2 D5                 clr     psw.5
0238: AA 82                 mov     r2, dpl
023A: AB 83                 mov     r3, dph
                   pint16a:
023C: 7C 10                 mov     r4, #16                 ; 10^4
023E: 7D 27                 mov     r5, #39
0240: 51 8F                 acall   pint16x
0242: 60 07                 jz      pint16b
0244: 24 30                 add     a, #'0'
0246: 12 00 9C              lcall   cout
0249: D2 D5                 setb    psw.5
                   pint16b:
024B: 7C E8                 mov     r4, #232        ; 10^3
024D: 7D 03                 mov     r5, #3
024F: 51 8F                 acall   pint16x
0251: 70 03                 jnz     pint16c
0253: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
0256: 24 30                 add     a, #'0'
0258: 12 00 9C              lcall   cout
025B: D2 D5                 setb    psw.5
                   pint16d:
025D: 7C 64                 mov     r4, #100        ; 10^2
025F: 7D 00                 mov     r5, #0
0261: 51 8F                 acall   pint16x
0263: 70 03                 jnz     pint16e
0265: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
0268: 24 30                 add     a, #'0'
026A: 12 00 9C              lcall   cout
026D: D2 D5                 setb    psw.5
                   pint16f:
026F: EA                    mov     a, r2           ; 10^1
0270: AB F0                 mov     r3, b
0272: 75 F0 0A              mov     b, #10
0275: 84                    div     ab
0276: 70 03                 jnz     pint16g
0278: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
027B: 24 30                 add     a, #'0'
027D: 12 00 9C              lcall   cout
                   pint16h:
0280: E5 F0                 mov     a, b            ; 10^0
0282: 8B F0                 mov     b, r3
0284: 24 30                 add     a, #'0'
0286: 12 00 9C              lcall   cout
0289: D0 E0                 pop     acc
028B: F8                    mov     r0, a
028C: D0 E0                 pop     acc
028E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
028F: 78 00                 mov     r0, #0
                   pint16y:
0291: 08                    inc     r0
0292: C3                    clr     c
0293: EA                    mov     a, r2
0294: 9C                    subb    a, r4
0295: FA                    mov     r2, a
0296: EB                    mov     a, r3
0297: 9D                    subb    a, r5
0298: FB                    mov     r3, a
0299: 50 F6                 jnc     pint16y
029B: 18                    dec     r0
029C: EA                    mov     a, r2
029D: 2C                    add     a, r4
029E: FA                    mov     r2, a
029F: EB                    mov     a, r3
02A0: 3D                    addc    a, r5
02A1: FB                    mov     r3, a
02A2: E8                    mov     a, r0
02A3: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
02A4: B4 61 00              cjne    a, #97, upper2
                   upper2:
02A7: 40 07                 jc      upper4          ; end if acc < 97
02A9: B4 7B 00              cjne    a, #123, upper3
                   upper3:
02AC: 50 02                 jnc     upper4          ; end if acc >= 123
02AE: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
02B0: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lencstr:
02B1: 78 00                 mov     r0, #0          ; returns length of a strin
02B3: C0 E0                 push    acc
                   lencstr1:
02B5: E0                    movx    a, @dptr
02B6: 60 04                 jz      lencstr2
02B8: 08                    inc     r0
02B9: A3                    inc     dptr
02BA: 80 F9                 sjmp    lencstr1
                   lencstr2:
02BC: D0 E0                 pop     acc
02BE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lencb7str:
02BF: 78 00                 mov     r0, #0
02C1: C0 E0                 push    acc
                   lencb7str1:
02C3: E0                    movx    a, @dptr
02C4: 60 07                 jz      lencb7str2
02C6: 08                    inc     r0
02C7: 20 E7 03              jb      acc.7, lencb7str2
02CA: A3                    inc     dptr
02CB: 80 F6                 sjmp    lencb7str1
                   lencb7str2:
02CD: D0 E0                 pop     acc
02CF: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
02D0: 90 0A CD              mov     dptr, #prompt1  ; give 'em the first part o
02D3: 11 D3                 acall   pcstr
02D5: EF                    mov     a, r7
02D6: 31 CE                 acall   phex
02D8: EE                    mov     a, r6
02D9: 31 CE                 acall   phex
02DB: 90 0A D7              mov     dptr, #prompt2
02DE: 11 D3                 acall   pcstr
                            
                   ; now we're finally past the prompt, so let's get some input
02E0: 11 8A                 acall   cin             ; get the input, finally
02E2: B4 3A 04              cjne    a, #':', menu0
02E5: 71 EA                 acall   dnld_now
02E7: 80 E7                 sjmp    menu
                   menu0:
02E9: 51 A4                 acall   upper
                            
                   ; push return address onto stack so we can just jump to the 
02EB: 75 F0 D0              mov     b, #(menu & 0xff)       ; we push the retur
02EE: C0 F0                 push    b               ; to save code later...
02F0: 75 F0 02              mov     b, #(menu >> 8)         ; if bogus input, j
02F3: C0 F0                 push    b               ; another prompt.
                            
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                            
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                            
                   menux:
02F5: F5 F0                 mov     b, a            ; now search for external c
02F7: 90 10 00              mov     dptr, #bmem
                   menux1:
02FA: 12 09 95              lcall   find
02FD: 50 22                 jnc     menuxend        ; searched all the commands
02FF: 75 82 04              mov     dpl, #4
0302: E0                    movx    a, @dptr
0303: B4 FE 14              cjne    a, #254, menux2         ; only FE is an ext
0306: 05 82                 inc     dpl
0308: E0                    movx    a, @dptr
0309: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
030C: 11 A4                 acall   sspace
030E: 75 82 20              mov     dpl, #32
0311: 11 D3                 acall   pcstr           ; print command name
0313: 11 B6                 acall   crlf
0315: 75 82 40              mov     dpl, #64
0318: E4                    clr     a
0319: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
031A: 05 83                 inc     dph
031C: E5 83                 mov     a, dph
031E: B4 E0 D9              cjne    a, #((emem + 1) >> 8) & 0xff, menux1
                   menuxend:
0321: E5 F0                 mov     a, b
                            
                   ; since we didn't find a user installed command, use the bui
                   menui1:
0323: B4 3F 07              cjne    a, #help_key, menui2
0326: 90 0E 28              mov     dptr, #help_cmd2
0329: 11 D3                 acall   pcstr
032B: C1 EC                 ajmp    help
                            
                   menui2:
032D: B4 4D 07              cjne    a, #dir_key, menui3
0330: 90 0E 3C              mov     dptr, #dir_cmd
0333: 11 D3                 acall   pcstr
0335: A1 DA                 ajmp    dir
                            
                   menui3:
0337: B4 52 07              cjne    a, #run_key, menui4
033A: 90 0E 4A              mov     dptr, #run_cmd
033D: 11 D3                 acall   pcstr
033F: C1 54                 ajmp    run
                            
                   menui4:
0341: B4 44 07              cjne    a, #dnld_key, menui5
0344: 90 0E 56              mov     dptr, #dnld_cmd
0347: 11 D3                 acall   pcstr
0349: 61 CD                 ajmp    dnld
                            
                   menui5:
034B: B4 55 07              cjne    a, #upld_key, menui6
034E: 90 0E 5F              mov     dptr, #upld_cmd
0351: 11 D3                 acall   pcstr
0353: E1 92                 ajmp    upld
                            
                   menui6:
0355: B4 4E 09              cjne    a, #nloc_key, menui7
0358: 90 0E 66              mov     dptr, #nloc_cmd
035B: 12 00 D3              lcall   pcstr
035E: 02 08 64              ljmp    nloc
                            
                   menui7:
0361: B4 4A 07              cjne    a, #jump_key, menui8
0364: 90 0E 73              mov     dptr, #jump_cmd
0367: 11 D3                 acall   pcstr
0369: A1 34                 ajmp    jump
                            
                   menui8:
036B: B4 48 07              cjne    a, #dump_key, menui9
036E: 90 0E 8B              mov     dptr, #dump_cmd
0371: 11 D3                 acall   pcstr
0373: A1 65                 ajmp    dump
                            
                   menui9:
0375: B4 45 07              cjne    a, #edit_key, menui10
0378: 90 0E BD              mov     dptr, #edit_cmd
037B: 11 D3                 acall   pcstr
037D: A1 A7                 ajmp    edit
                            
                   menui10:
037F: B4 43 08              cjne    a, #clrm_key, menui11
0382: 90 0E D2              mov     dptr, #clrm_cmd
0385: 11 D3                 acall   pcstr
0387: 02 08 78              ljmp    clrm
                            
                   menui11:
038A: B4 49 08              cjne    a, #intm_key, menui12
038D: 90 0E A4              mov     dptr, #intm_cmd
0390: 11 D3                 acall   pcstr
0392: 02 09 65              ljmp    intm
                            
                   menui12:
0395: B4 3C 08              cjne    a, #eio77_key, menui13
0398: 90 0E F8              mov     dptr, #eio77_cmd
039B: 11 D3                 acall   pcstr
039D: 02 09 8B              ljmp    eio77
                            
                   menui13:
03A0: B4 3E 08              cjne    a, #dio77_key, menui14
03A3: 90 0F 07              mov     dptr, #dio77_cmd
03A6: 11 D3                 acall   pcstr
03A8: 02 09 90              ljmp    dio77
                            
                   menui14:
03AB: B4 57 08              cjne    a, #crc16_key, menui15
03AE: 90 0E E8              mov     dptr, #crc16_cmd
03B1: 11 D3                 acall   pcstr
03B3: 02 08 E3              ljmp    calc_crc16
                            
                   menui15:
03B6: B4 42 08              cjne    a, #baud_key, menuiend
03B9: 90 0F 17              mov     dptr, #baud_cmd
03BC: 11 D3                 acall   pcstr
03BE: 02 08 A1              ljmp    reset_baud
                            
                   menuiend:
03C1: 01 B6                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   r6r7todptr:
03C3: 8E 82                 mov     dpl, r6
03C5: 8F 83                 mov     dph, r7
03C7: 22                    ret
                   
                   dptrtor6r7:
03C8: AE 82                 mov     r6, dpl
03CA: AF 83                 mov     r7, dph
03CC: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
03CD: 90 0C 3F              mov     dptr, #dnlds1   ; "begin sending file <ESC>
03D0: 11 D3                 acall   pcstr
03D2: B1 2B                 acall   dnld_init
                            
                   dnld1:
                   ; look for begining of line marker ':'
03D4: 11 8A                 acall   cin
03D6: B4 1B 02              cjne    a, #ESC, dnld2  ; Test for escape
03D9: 80 6D                 sjmp    dnld_esc
                            
                   dnld2:
03DB: B4 3A 02              cjne    a, #':', dnld2b
03DE: 80 10                 sjmp    dnld2d
                   dnld2b:
                   ; check to see if it's a hex digit, error if it is
03E0: 31 B4                 acall   asc2hex
03E2: 40 F0                 jc      dnld1
03E4: 79 06                 mov     r1, #6
03E6: 91 5A                 acall   dnld_inc
03E8: 80 EA                 sjmp    dnld1
                            
                   dnld_now:
                   ; entry point for main menu detecting ':' character
03EA: 74 3A                 mov     a, #':'
03EC: 11 9C                 acall   cout
03EE: B1 2B                 acall   dnld_init
                            
                   dnld2d:
03F0: 79 00                 mov     r1, #0
03F2: 91 5A                 acall   dnld_inc
                            
                   dnld3:
                   ; begin taking in the line of data
                   ;        mov     a, #'.'
                   ;        acall   cout
03F4: 7C 00                 mov     r4, #0          ; r4 will count up checksum
03F6: 91 79                 acall   dnld_ghex
03F8: F8                    mov     r0, a           ; R0 = # of data bytes
                   ;        mov     a, #'.'
                   ;        acall   cout
03F9: 91 79                 acall   dnld_ghex
03FB: F5 83                 mov     dph, a          ; High byte of load address
03FD: 91 79                 acall   dnld_ghex
03FF: F5 82                 mov     dpl, a          ; Low byte of load address
0401: 91 79                 acall   dnld_ghex       ; Record type
0403: B4 01 02              cjne    a, #1, dnld4    ; End record?
0406: 80 29                 sjmp    dnld_end
                   dnld4:
0408: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
040A: E8                    mov     a, r0
040B: 60 10                 jz      dnld_get_cksum
040D: 91 79                 acall   dnld_ghex       ; Get data byte
040F: FA                    mov     r2, a
0410: 79 01                 mov     r1, #1
0412: 91 5A                 acall   dnld_inc        ; count total data bytes re
0414: EA                    mov     a, r2
0415: F0                    movx    @dptr, a
0416: 79 02                 mov     r1, #2
0418: 91 5A                 acall   dnld_inc
041A: A3                    inc     dptr
041B: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
041D: 91 79                 acall   dnld_ghex       ; get checksum
041F: EC                    mov     a, r4
0420: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
0422: 79 04                 mov     r1, #4
0424: 91 5A                 acall   dnld_inc        ; all we can do it count # 
0426: 80 AC                 sjmp    dnld1
                            
                   dnld_unknown:
                   ; handle unknown line type
0428: E8                    mov     a, r0
0429: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
042B: 91 79                 acall   dnld_ghex       ; consume all of unknown da
042D: D8 FC                 djnz    r0, dnld_ukn2
042F: 80 EC                 sjmp    dnld_get_cksum
                            
                   dnld_end:
                   ; handles the proper end-of-download marker
0431: E8                    mov     a, r0
0432: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
0434: 91 79                 acall   dnld_ghex       ; consume all of useless da
0436: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
0438: 91 79                 acall   dnld_ghex       ; get the last checksum
043A: EC                    mov     a, r4
043B: 70 E5                 jnz     dnld_sumerr
043D: 91 51                 acall   dnld_dly
043F: 90 0C 8D              mov     dptr, #dnlds3   ; "download went ok..."
0442: 11 D3                 acall   pcstr
                   ; consume any cr or lf character that may have been
                   ; on the end of the last line
0444: 11 92                 acall   cinpoll
0446: 80 76                 sjmp    dnld_sum
                            
                   dnld_esc:
                   ; handle esc received in the download stream
0448: 91 51                 acall   dnld_dly
044A: 90 0C 76              mov     dptr, #dnlds2   ; "download aborted."
044D: 11 D3                 acall   pcstr
044F: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                            
                   dnld_dly:
0451: 78 00                 mov     r0, #0
                   dnlddly2:
0453: 79 00                 mov     r1, #0
0455: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0457: D8 FA                 djnz    r0, dnlddly2
0459: 22                    ret
                            
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                            
                   dnld_inc:
045A: E9                    mov     a, r1
045B: 54 07                 anl     a, #00000111b   ; just in case
045D: 23                    rl      a
045E: 24 08                 add     a, #dnld_parm
0460: F9                    mov     r1, a           ; now r1 points to lsb
0461: 07                    inc     @r1
0462: E7                    mov     a, @r1
0463: 70 02                 jnz     dnldin2
0465: 09                    inc     r1
0466: 07                    inc     @r1
                   dnldin2:
0467: 22                    ret
                            
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                            
                   dnld_gp:
0468: D3                    setb    c
0469: 87 82                 mov     dpl, @r1
046B: 09                    inc     r1
046C: 87 83                 mov     dph, @r1
046E: 09                    inc     r1
046F: E5 82                 mov     a, dpl
0471: 70 05                 jnz     dnldgp2
0473: E5 83                 mov     a, dph
0475: 70 01                 jnz     dnldgp2
0477: C3                    clr     c
                   dnldgp2:
0478: 22                    ret
                            
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                            
                   dnld_ghex:
                   dnldgh1:
0479: 11 8A                 acall   cin
047B: 51 A4                 acall   upper
047D: B4 1B 06              cjne    a, #ESC, dnldgh3
                   dnldgh2:
0480: D0 E0                 pop     acc
0482: D0 E0                 pop     acc
0484: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
0486: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
0489: 79 05                 mov     r1, #5          ; handle unexpected beginni
048B: 91 5A                 acall   dnld_inc
048D: D0 E0                 pop     acc
048F: D0 E0                 pop     acc
0491: 61 F4                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
0493: 31 B4                 acall   asc2hex
0495: 50 06                 jnc     dnldgh6
0497: 79 07                 mov     r1, #7
0499: 91 5A                 acall   dnld_inc
049B: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
049D: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
049E: 11 8A                 acall   cin
04A0: 51 A4                 acall   upper
04A2: B4 1B 02              cjne    a, #ESC, dnldgh8
04A5: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
04A7: B4 3A 02              cjne    a, #':', dnldgh9
04AA: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
04AC: 31 B4                 acall   asc2hex
04AE: 50 06                 jnc     dnldghA
04B0: 79 07                 mov     r1, #7
04B2: 91 5A                 acall   dnld_inc
04B4: 80 E8                 sjmp    dnldgh7
                   dnldghA:
04B6: CA                    xch     a, r2
04B7: C4                    swap    a
04B8: 4A                    orl     a, r2
04B9: FA                    mov     r2, a
04BA: 2C                    add     a, r4           ; add into checksum
04BB: FC                    mov     r4, a
04BC: EA                    mov     a, r2           ; return value in acc
04BD: 22                    ret
                            
                   ; print out download summary
                   ; dnlds4 = "Summary:"
                   ; dnlds5 = " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                            
                   dnld_sum:
04BE: EE                    mov     a, r6
04BF: C0 E0                 push    acc
04C1: EF                    mov     a, r7
04C2: C0 E0                 push    acc
04C4: 90 0C A6              mov     dptr, #dnlds4
04C7: 11 D3                 acall   pcstr
04C9: 79 08                 mov     r1, #dnld_parm
04CB: 7E B1                 mov     r6, #dnlds5 & 0xff
04CD: 7F 0C                 mov     r7, #dnlds5 >> 8
04CF: B1 27                 acall   dnld_i0
04D1: 7E C4                 mov     r6, #dnlds6a & 0xff
04D3: 7F 0C                 mov     r7, #dnlds6a >> 8
04D5: B1 27                 acall   dnld_i0
04D7: 7E D7                 mov     r6, #dnlds6b & 0xff
04D9: 7F 0C                 mov     r7, #dnlds6b >> 8
04DB: B1 27                 acall   dnld_i0
                            
                   ; now print out error summary
                   ; dnlds7 = "Errors:"
                   ; dnlds8 = " bytes unable to write"
                   ; dnlds9 = " incorrect checksums"
                   ; dnlds10 = " unexpected begin of line"
                   ; dnlds11 = " unexpected hex digits"
                   ; dnlds12 = " unexpected non-hex digits"
                   ; dnlds13 = "No errors detected"
                            
                   dnld_err:
04DD: 7A 05                 mov     r2, #5
                   dnlder2:
04DF: 91 68                 acall   dnld_gp
04E1: 40 09                 jc      dnlder3                 ; any errors?
04E3: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
04E5: 90 0D 74              mov     dptr, #dnlds13
04E8: 11 D3                 acall   pcstr
04EA: 80 25                 sjmp    dlnd_sum_done
                            
                   dnlder3:
                   ; there were errors, so now we print 'em
04EC: 90 0C E9              mov     dptr, #dnlds7
04EF: 11 D3                 acall   pcstr
                   ; but let's not be nasty... only print if necessary
04F1: 79 0E                 mov     r1, #(dnld_parm + 6)
04F3: 7E F3                 mov     r6, #dnlds8 & 0xff
04F5: 7F 0C                 mov     r7, #dnlds8 >> 8
04F7: B1 19                 acall   dnld_item
04F9: 7E 0D                 mov     r6, #dnlds9 & 0xff
04FB: 7F 0D                 mov     r7, #dnlds9 >> 8
04FD: B1 19                 acall   dnld_item
04FF: 7E 1F                 mov     r6, #dnlds10 & 0xff
0501: 7F 0D                 mov     r7, #dnlds10 >> 8
0503: B1 19                 acall   dnld_item
0505: 7E 3C                 mov     r6, #dnlds11 & 0xff
0507: 7F 0D                 mov     r7, #dnlds11 >> 8
0509: B1 19                 acall   dnld_item
050B: 7E 56                 mov     r6, #dnlds12 & 0xff
050D: 7F 0D                 mov     r7, #dnlds12 >> 8
050F: B1 19                 acall   dnld_item
                   dlnd_sum_done:
0511: D0 E0                 pop     acc
0513: FF                    mov     r7, a
0514: D0 E0                 pop     acc
0516: FE                    mov     r6, a
0517: 01 B6                 ajmp    crlf
                            
                   dnld_item:
0519: 91 68                 acall   dnld_gp                 ; error conditions
051B: 50 09                 jnc     dnld_i3
                   dnld_i2:
051D: 11 A4                 acall   sspace
051F: 12 02 31              lcall   pint16u
0522: 71 C3                 acall   r6r7todptr
0524: 11 D3                 acall   pcstr
                   dnld_i3:
0526: 22                    ret
                            
                   dnld_i0:
0527: 91 68                 acall   dnld_gp                 ; non-error conditi
0529: 80 F2                 sjmp    dnld_i2
                            
                   dnld_init:
                   ; init all dnld parms to zero.
052B: 78 08                 mov     r0, #dnld_parm
                   dnld0:
052D: 76 00                 mov     @r0, #0
052F: 08                    inc     r0
0530: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
0533: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   jump:
0534: 90 0B 64              mov     dptr, #prompt8
0537: 11 D3                 acall   pcstr
0539: 71 C3                 acall   r6r7todptr
053B: 31 E0                 acall   phex16
053D: 90 0A F3              mov     dptr, #prompt4
0540: 11 D3                 acall   pcstr
0542: 31 38                 acall   ghex16
0544: 20 D5 07              jb      psw.5, jump3
0547: 50 03                 jnc     jump2
0549: 02 08 5E              ljmp    abort2
                   jump2:
054C: 71 C8                 acall   dptrtor6r7
                   jump3:
054E: 11 B6                 acall   crlf
0550: 90 0D 8B              mov     dptr, #runs1
0553: 11 D3                 acall   pcstr
0555: 71 C3                 acall   r6r7todptr
                   jump_doit:
0557: E4                    clr     a
0558: F5 D0                 mov     psw, a
055A: 75 81 07              mov     sp, #sp_reset
055D: F5 F0                 mov     b, a
055F: 78 FF                 mov     r0, #0xff
                   clrintram:
0561: F6                    mov     @r0, a
0562: D8 FD                 djnz    r0, clrintram
0564: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:
0565: 7A 10                 mov     r2, #16                 ; number of lines t
0567: 11 CF                 acall   dcrlf
                   dump1:
0569: 71 C3                 acall   r6r7todptr
056B: 31 E0                 acall   phex16          ; tell 'em the memory locat
056D: 74 3A                 mov     a, #':'
056F: 11 C3                 acall   cout_sp
0571: 7B 10                 mov     r3, #16                 ; r3 counts # of by
0573: 71 C3                 acall   r6r7todptr
                   dump2:
0575: E0                    movx    a, @dptr
0576: A3                    inc     dptr
0577: 31 CE                 acall   phex            ; print each byte in hex
0579: 11 A4                 acall   sspace
057B: DB F8                 djnz    r3, dump2
057D: 11 CB                 acall   dspace          ; print a couple extra spac
057F: 7B 10                 mov     r3, #16
0581: 71 C3                 acall   r6r7todptr
                   dump3:
0583: E0                    movx    a, @dptr
0584: A3                    inc     dptr
0585: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
0587: B4 7F 01              cjne    a, #127, dump3b
058A: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
058B: 24 E0                 add     a, #224
058D: 40 01                 jc      dump4
058F: E4                    clr     a               ; avoid control characters
                   dump4:
0590: 24 20                 add     a, #32
0592: 11 9C                 acall   cout
0594: DB ED                 djnz    r3, dump3
0596: 11 B6                 acall   crlf
0598: 71 C8                 acall   dptrtor6r7
059A: 11 92                 acall   cinpoll
059C: 40 05                 jc      dump4b
059E: B4 1B 02              cjne    a, #ESC, dump4b
05A1: 01 B6                 ajmp    crlf
                   dump4b:
05A3: DA C4                 djnz    r2, dump1       ; loop back up to print nex
05A5: 01 B6                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
05A7: 90 0B E6              mov     dptr, #edits1
05AA: 11 D3                 acall   pcstr
05AC: 71 C3                 acall   r6r7todptr
                   edit1:
05AE: 31 E0                 acall   phex16
05B0: 74 3A                 mov     a, #':'
05B2: 11 C3                 acall   cout_sp
05B4: 74 28                 mov     a, #'('
05B6: 11 9C                 acall   cout
05B8: 71 C8                 acall   dptrtor6r7
05BA: E0                    movx    a, @dptr
05BB: 31 CE                 acall   phex
05BD: 90 0B A8              mov     dptr, #prompt10
05C0: 11 D3                 acall   pcstr
05C2: 11 F4                 acall   ghex
05C4: 20 D5 0E              jb      psw.5, edit2
05C7: 40 0C                 jc      edit2
05C9: 71 C3                 acall   r6r7todptr
05CB: F0                    movx    @dptr, a
05CC: 11 B6                 acall   crlf
05CE: 71 C3                 acall   r6r7todptr
05D0: A3                    inc     dptr
05D1: 71 C8                 acall   dptrtor6r7
05D3: A1 AE                 ajmp    edit1
                   edit2:
05D5: 90 0C 0F              mov     dptr, #edits2
05D8: 01 D3                 ajmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   dir:
05DA: 90 0B 82              mov     dptr, #prompt9
05DD: 11 D3                 acall   pcstr
05DF: 78 15                 mov     r0, #21
                   dir0a:
05E1: 11 A4                 acall   sspace
05E3: D8 FC                 djnz    r0, dir0a
05E5: 90 0B 93              mov     dptr, #prompt9b
05E8: 11 D3                 acall   pcstr
05EA: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
05ED: 12 09 95              lcall   find            ; find the next program in 
05F0: 40 02                 jc      dir2
                   dir_end:
05F2: 01 B6                 ajmp    crlf            ; we're done if no more fou
                   dir2:
05F4: 11 CB                 acall   dspace
05F6: 75 82 20              mov     dpl, #32        ; print its name
05F9: 11 D3                 acall   pcstr
05FB: 75 82 20              mov     dpl, #32        ; how long is the name
05FE: 51 B1                 acall   lencstr
0600: 74 21                 mov     a, #33
0602: C3                    clr     c
0603: 98                    subb    a, r0
0604: F8                    mov     r0, a
0605: 74 20                 mov     a, #SPACE       ; print the right # of spac
                   dir3:
0607: 11 9C                 acall   cout
0609: D8 FC                 djnz    r0, dir3
060B: 75 82 00              mov     dpl, #0
060E: 31 E0                 acall   phex16          ; print the memory location
0610: 78 06                 mov     r0, #6
0612: 74 20                 mov     a, #SPACE
                   dir4:
0614: 11 9C                 acall   cout
0616: D8 FC                 djnz    r0, dir4
0618: 75 82 04              mov     dpl, #4                 ; now figure out wh
061B: E0                    movx    a, @dptr
061C: AA 83                 mov     r2, dph                 ; save this, we're 
                   dir5:
061E: B4 FE 05              cjne    a, #254, dir5b
0621: 90 0D FE              mov     dptr, #type1    ; it's an external command
0624: 80 18                 sjmp    dir7
                   dir5b:
0626: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
0629: 90 0E 17              mov     dptr, #type4    ; it's a startup routine
062C: 80 10                 sjmp    dir7
                   dir5c:
062E: B4 23 05              cjne    a, #35, dir5d
0631: 90 0E 0F              mov     dptr, #type2    ; it's an ordinary program
0634: 80 08                 sjmp    dir7
                   dir5d:
0636: B4 F9 02              cjne    a, #249, dir5e
0639: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
063B: 90 0E 24              mov     dptr, #type5    ; who knows what the hell i
                   dir7:
063E: 11 D3                 acall   pcstr           ; print out the type
0640: 8A 83                 mov     dph, r2                 ; go back and find 
0642: 11 B6                 acall   crlf
0644: 74 DF                 mov     a, #(emem >> 8)
0646: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
0649: A1 F2                 ajmp    dir_end
                   dir8:
064B: 05 83                 inc     dph
064D: E5 83                 mov     a, dph
064F: B4 E0 9B              cjne    a, #((emem + 1) >> 8) & 0xff, dir1
0652: A1 F2                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
0654: 11 CF                 acall   dcrlf
0656: 7A FF                 mov     r2, #255        ; first print the menu, cou
0658: 90 10 00              mov     dptr, #bmem
065B: 15 83                 dec     dph
                   run2:
065D: 05 83                 inc     dph
065F: E5 83                 mov     a, dph
0661: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run2b
0664: 80 21                 sjmp    run3
                   run2b:
0666: 12 09 95              lcall   find
0669: 50 1C                 jnc     run3            ; have we found 'em all??
066B: 75 82 04              mov     dpl, #4
066E: E0                    movx    a, @dptr
066F: 44 03                 orl     a, #00000011b
0671: F4                    cpl     a
0672: 60 E9                 jz      run2            ; this one doesn't run... f
0674: 11 CB                 acall   dspace
0676: 0A                    inc     r2
0677: 74 41                 mov     a, #'A'                 ; print the key to 
0679: 2A                    add     a, r2
067A: 11 C3                 acall   cout_sp
067C: 11 C7                 acall   dash_sp
067E: 75 82 20              mov     dpl, #32
0681: 11 D3                 acall   pcstr           ; and the command name
0683: 11 B6                 acall   crlf
0685: C1 5D                 ajmp    run2            ; and continue doing this
                   run3:
0687: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
068A: 90 0B 07              mov     dptr, #prompt5
068D: 01 D3                 ajmp    pcstr
                   run4:
068F: 90 0A DB              mov     dptr, #prompt3  ; ask the big question!
0692: 11 D3                 acall   pcstr
0694: 74 41                 mov     a, #'A'
0696: 11 9C                 acall   cout
0698: 11 AD                 acall   dash
069A: 74 41                 mov     a, #'A'                 ; such user friendl
069C: 2A                    add     a, r2           ; even tell 'em the choices
069D: 11 9C                 acall   cout
069F: 90 0A F3              mov     dptr, #prompt4
06A2: 11 D3                 acall   pcstr
06A4: 11 8A                 acall   cin
06A6: B4 1B 02              cjne    a, #ESC, run4aa         ; they they hit <ES
06A9: 01 B6                 ajmp    crlf
                   run4aa:
06AB: FB                    mov     r3, a
06AC: 74 1F                 mov     a, #31
06AE: C3                    clr     c
06AF: 9A                    subb    a, r2
06B0: EB                    mov     a, r3
06B1: 40 02                 jc      run4a
06B3: 51 A4                 acall   upper
                   run4a:
06B5: 11 9C                 acall   cout
06B7: FB                    mov     r3, a
06B8: 11 B6                 acall   crlf
                   ; check to see if it's under 32, if so convert to uppercase
06BA: EB                    mov     a, r3
06BB: 24 BF                 add     a, #(256 - 'A')
06BD: 50 D0                 jnc     run4            ; if they typed less than '
06BF: FB                    mov     r3, a           ; R3 has the number they ty
06C0: EA                    mov     a, r2           ; A=R2 has the maximum numb
06C1: C3                    clr     c
06C2: 9B                    subb    a, r3
06C3: 40 CA                 jc      run4            ; if they typed over the ma
06C5: 0B                    inc     r3
06C6: 90 10 00              mov     dptr, #bmem
06C9: 15 83                 dec     dph
                   run5:
06CB: 05 83                 inc     dph
06CD: E5 83                 mov     a, dph
06CF: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run5b
06D2: 80 17                 sjmp    run8
                   run5b:
06D4: 12 09 95              lcall   find
06D7: 50 12                 jnc     run8            ; Shouldn't ever do this ju
06D9: 75 82 04              mov     dpl, #4
06DC: E0                    movx    a, @dptr
06DD: 44 03                 orl     a, #00000011b
06DF: F4                    cpl     a
06E0: 60 E9                 jz      run5            ; this one doesn't run... f
06E2: DB E7                 djnz    r3, run5        ; count til we find the one
06E4: 11 B6                 acall   crlf
06E6: 75 82 40              mov     dpl, #64
06E9: A1 57                 ajmp    jump_doit
                   run8:
06EB: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
06EC: 90 0D C8              mov     dptr, #help1txt
06EF: 11 D3                 acall   pcstr
                            
06F1: 7C 3F                 mov     r4, #help_key
06F3: 90 0E 2D              mov     dptr, #help_cmd
06F6: F1 87                 acall   help2
                            
06F8: 7C 4D                 mov     r4, #dir_key
06FA: 90 0E 3C              mov     dptr, #dir_cmd
06FD: F1 87                 acall   help2
                            
06FF: 7C 52                 mov     r4, #run_key
0701: 90 0E 4A              mov     dptr, #run_cmd
0704: F1 87                 acall   help2
                            
0706: 7C 44                 mov     r4, #dnld_key
0708: 90 0E 56              mov     dptr, #dnld_cmd
070B: F1 87                 acall   help2
                            
070D: 7C 55                 mov     r4, #upld_key
070F: 90 0E 5F              mov     dptr, #upld_cmd
0712: F1 87                 acall   help2
                            
0714: 7C 4E                 mov     r4, #nloc_key
0716: 90 0E 66              mov     dptr, #nloc_cmd
0719: F1 87                 acall   help2
                            
071B: 7C 4A                 mov     r4, #jump_key
071D: 90 0E 73              mov     dptr, #jump_cmd
0720: F1 87                 acall   help2
                            
0722: 7C 48                 mov     r4, #dump_key
0724: 90 0E 8B              mov     dptr, #dump_cmd
0727: F1 87                 acall   help2
                            
0729: 7C 49                 mov     r4, #intm_key
072B: 90 0E A4              mov     dptr, #intm_cmd
072E: F1 87                 acall   help2
                            
0730: 7C 45                 mov     r4, #edit_key
0732: 90 0E BD              mov     dptr, #edit_cmd
0735: F1 87                 acall   help2
                            
0737: 7C 43                 mov     r4, #clrm_key
0739: 90 0E D2              mov     dptr, #clrm_cmd
073C: F1 87                 acall   help2
                            
073E: 7C 42                 mov     r4, #baud_key
0740: 90 0F 17              mov     dptr, #baud_cmd
0743: F1 87                 acall   help2
                            
0745: 7C 57                 mov     r4, #crc16_key
0747: 90 0E E8              mov     dptr, #crc16_cmd
074A: F1 87                 acall   help2
                            
074C: 7C 3C                 mov     r4, #eio77_key
074E: 90 0E F8              mov     dptr, #eio77_cmd
0751: F1 87                 acall   help2
                            
0753: 7C 3E                 mov     r4, #dio77_key
0755: 90 0F 07              mov     dptr, #dio77_cmd
0758: F1 87                 acall   help2
                            
075A: 90 0D E1              mov     dptr, #help2txt
075D: 11 D3                 acall   pcstr
075F: 90 10 00              mov     dptr, #bmem
                   help3:
0762: 12 09 95              lcall   find
0765: 50 1E                 jnc     help4
0767: 75 82 04              mov     dpl, #4
076A: E0                    movx    a, @dptr
076B: B4 FE 10              cjne    a, #254, help3a         ; only FE is an ext
076E: 11 CB                 acall   dspace
0770: 05 82                 inc     dpl
0772: E0                    movx    a, @dptr
0773: 11 C3                 acall   cout_sp
0775: 11 C7                 acall   dash_sp
0777: 75 82 20              mov     dpl, #32
077A: 11 D3                 acall   pcstr
077C: 11 B6                 acall   crlf
                   help3a:
077E: 05 83                 inc     dph
0780: E5 83                 mov     a, dph
0782: B4 E0 DD              cjne    a, #((emem + 1) >> 8) & 0xff, help3
                   help4:
0785: 01 B6                 ajmp    crlf
                   help2:
                   ; print 11 standard lines
0787: 11 CB                 acall   dspace          ; given key in R4 and name 
0789: EC                    mov     a, r4
078A: 11 C3                 acall   cout_sp
078C: 11 C7                 acall   dash_sp
078E: 11 D3                 acall   pcstr
0790: 01 B6                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   upld:
0792: 12 08 24              lcall   get_mem
                   ; assume we've got the beginning address in r3/r2
                   ; and the final address in r5/r4 (r4=lsb)...
                   ; print out what we'll be doing
0795: 90 0D A4              mov     dptr, #uplds3
0798: 11 D3                 acall   pcstr
079A: EB                    mov     a, r3
079B: 31 CE                 acall   phex
079D: EA                    mov     a, r2
079E: 31 CE                 acall   phex
07A0: 90 0D C3              mov      dptr, #uplds4
07A3: 11 D3                 acall   pcstr
07A5: ED                    mov     a, r5
07A6: 31 CE                 acall   phex
07A8: EC                    mov     a, r4
07A9: 31 CE                 acall   phex
07AB: 11 B6                 acall   crlf
                   ; need to adjust end location by 1...
07AD: 8D 83                 mov     dph, r5
07AF: 8C 82                 mov     dpl, r4
07B1: A3                    inc     dptr
07B2: AC 82                 mov     r4, dpl
07B4: AD 83                 mov     r5, dph
07B6: 90 0B 53              mov     dptr, #prompt7
07B9: 11 D3                 acall   pcstr
07BB: 11 8A                 acall   cin
07BD: B4 1B 03              cjne    a, #ESC, upld2e
07C0: 02 08 5B              ljmp    abort_it
                   upld2e:
07C3: 11 CF                 acall   dcrlf
07C5: 8A 82                 mov     dpl, r2
07C7: 8B 83                 mov     dph, r3
                   upld3:
07C9: EC                    mov     a, r4           ; how many more bytes to ou
07CA: C3                    clr     c
07CB: 95 82                 subb    a, dpl
07CD: FA                    mov     r2, a
07CE: ED                    mov     a, r5
07CF: 95 83                 subb    a, dph
07D1: 70 09                 jnz     upld4           ; if >256 left, then do nex
07D3: EA                    mov     a, r2
07D4: 60 33                 jz      upld7           ; if we're all done
07D6: 54 F0                 anl     a, #11110000b
07D8: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
07DA: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
07DC: 7A 10                 mov     r2, #16
                   upld5:
07DE: 74 3A                 mov     a, #':'                 ; begin the line
07E0: 11 9C                 acall   cout
07E2: EA                    mov     a, r2
07E3: 31 CE                 acall   phex            ; output # of data bytes
07E5: 31 E0                 acall   phex16          ; output memory location
07E7: E5 83                 mov     a, dph
07E9: 25 82                 add     a, dpl
07EB: 2A                    add     a, r2
07EC: FB                    mov     r3, a           ; r3 will become checksum
07ED: E4                    clr     a
07EE: 31 CE                 acall   phex            ; output 00 code for data
                   upld6:
07F0: E0                    movx    a, @dptr
07F1: 31 CE                 acall   phex            ; output each byte
07F3: 2B                    add     a, r3
07F4: FB                    mov     r3, a
07F5: A3                    inc     dptr
07F6: DA F8                 djnz    r2, upld6       ; do however many bytes we 
07F8: EB                    mov     a, r3
07F9: F4                    cpl     a
07FA: 04                    inc     a
07FB: 31 CE                 acall   phex            ; and finally the checksum
07FD: 11 B6                 acall   crlf
07FF: 12 00 92              lcall   cinpoll
0802: 40 C5                 jc      upld3
0804: B4 1B C2              cjne    a, #ESC, upld3
0807: 80 52                 sjmp    abort_it
                   upld7:
0809: 74 3A                 mov     a, #':'
080B: 12 00 9C              lcall   cout
080E: E4                    clr     a
080F: 12 01 CE              lcall   phex
0812: 12 01 CE              lcall   phex
0815: 12 01 CE              lcall   phex
0818: 04                    inc     a
0819: 12 01 CE              lcall   phex
081C: 74 FF                 mov     a, #255
081E: 12 01 CE              lcall   phex
                   upld8:
0821: 02 00 CF              ljmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
0824: 12 00 CF              lcall   dcrlf
0827: 90 0B B6              mov     dptr, #beg_str
082A: 12 00 D3              lcall   pcstr
082D: 12 01 38              lcall   ghex16
0830: 40 25                 jc      pop_it
0832: 20 D5 22              jb      psw.5, pop_it
0835: C0 83                 push    dph
0837: C0 82                 push    dpl
0839: 12 00 B6              lcall   crlf
083C: 90 0B C7              mov     dptr, #end_str
083F: 12 00 D3              lcall   pcstr
0842: 12 01 38              lcall   ghex16
0845: AD 83                 mov     r5, dph
0847: AC 82                 mov     r4, dpl
0849: D0 E0                 pop     acc
084B: FA                    mov     r2, a
084C: D0 E0                 pop     acc
084E: FB                    mov     r3, a
084F: 40 06                 jc      pop_it
0851: 20 D5 03              jb      psw.5, pop_it
0854: 02 00 B6              ljmp    crlf
                   pop_it:
0857: D0 E0                 pop     acc
0859: D0 E0                 pop     acc
                   abort_it:
085B: 12 00 B6              lcall   crlf
                   abort2:
085E: 90 0A B7              mov     dptr, #abort
0861: 02 00 D3              ljmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
0864: 90 0B 40              mov     dptr, #prompt6
0867: 12 00 D3              lcall   pcstr
086A: 12 01 38              lcall   ghex16
086D: 40 EF                 jc      abort2
086F: 20 D5 EC              jb      psw.5, abort2
0872: 12 03 C8              lcall   dptrtor6r7
0875: 02 00 CF              ljmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
0878: 11 24                 acall   get_mem
087A: 90 0B D7              mov     dptr, #sure
087D: 12 00 D3              lcall   pcstr
0880: 12 00 8A              lcall   cin
0883: 12 00 9C              lcall   cout
0886: 12 02 A4              lcall   upper
0889: B4 59 CF              cjne    a, #'Y', abort_it
088C: 12 00 CF              lcall   dcrlf
                   clrm2:
                   ; now we actually do it
088F: 8B 83                 mov     dph, r3
0891: 8A 82                 mov     dpl, r2
                   clrm3:
0893: E4                    clr     a
0894: F0                    movx    @dptr, a
0895: ED                    mov     a, r5
0896: B5 83 05              cjne    a, dph, clrm4
0899: EC                    mov     a, r4
089A: B5 82 01              cjne    a, dpl, clrm4
089D: 22                    ret
                   clrm4:
089E: A3                    inc     dptr
089F: 80 F2                 sjmp    clrm3
                   
                   ;---------------------------------------------------------;
                   
                   reset_baud:
08A1: 12 00 CF              lcall   dcrlf
08A4: 90 0F 27              mov     dptr, #baudprompt
08A7: 12 00 D3              lcall   pcstr
08AA: 12 01 38              lcall   ghex16
08AD: 40 2B                 jc      bailout
08AF: 20 D5 28              jb      psw.5, bailout
08B2: C0 82                 push    dpl
08B4: C0 83                 push    dph
08B6: 12 00 B6              lcall   crlf
08B9: 90 0B D7              mov     dptr, #sure
08BC: 12 00 D3              lcall   pcstr
08BF: 12 00 8A              lcall   cin
08C2: 12 00 9C              lcall   cout
08C5: 12 02 A4              lcall   upper
08C8: B4 59 0B              cjne    a, #'Y', bailout_pop
08CB: 12 00 CF              lcall   dcrlf
08CE: D0 F0                 pop     b
08D0: D0 E0                 pop     acc
08D2: 12 00 75              lcall   setbaud
08D5: 22                    ret
                   bailout_pop:
08D6: D0 E0                 pop     acc
08D8: D0 E0                 pop     acc
                   bailout:
08DA: 12 00 B6              lcall   crlf
08DD: 90 0A B7              mov     dptr, #abort
08E0: 02 00 D3              ljmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
08E3:              .equ     initial, 0xffff
08E3:              .equ     final, 0x0000
08E3:              .equ     poly, 0x1021
                   
                   calc_crc16:
08E3: 11 24                 acall   get_mem
08E5: 12 00 B6              lcall   crlf
08E8: 12 03 C3              lcall   r6r7todptr
08EB: C0 82                 push    dpl
08ED: C0 83                 push    dph
08EF: 8A 82                 mov     dpl, r2
08F1: 8B 83                 mov     dph, r3
08F3: 7E FF                 mov     r6, #(initial & 0xff)
08F5: 7F FF                 mov     r7, #(initial >> 8)
08F7: 12 09 25              lcall   init_crc16
08FA: 7E 21                 mov     r6, #(poly & 0xff)
08FC: 7F 10                 mov     r7, #(poly >> 8)
                   calc_loop:
08FE: E0                    movx    a, @dptr
08FF: 12 09 39              lcall   update_crc16
0902: ED                    mov     a, r5
0903: B5 83 1C              cjne    a, dph, calc_skip
0906: EC                    mov     a, r4
0907: B5 82 18              cjne    a, dpl, calc_skip
090A: 7E 00                 mov     r6, #(final & 0xff)
090C: 7F 00                 mov     r7, #(final >> 8)
090E: 12 09 2E              lcall   finish_crc16
0911: 8A 82                 mov     dpl, r2
0913: 8B 83                 mov     dph, r3
0915: 12 01 E0              lcall   phex16
0918: D0 83                 pop     dph
091A: D0 82                 pop     dpl
091C: 12 03 C8              lcall   dptrtor6r7
091F: 02 00 CF              ljmp    dcrlf
                   calc_skip:
0922: A3                    inc     dptr
0923: 80 D9                 sjmp    calc_loop
                   
                   init_crc16:
0925: C0 E0                 push    acc
0927: EE                    mov     a, r6
0928: FA                    mov     r2, a
0929: EF                    mov     a, r7
092A: FB                    mov     r3, a
092B: D0 E0                 pop     acc
092D: 22                    ret
                   
                   finish_crc16:
092E: C0 E0                 push    acc
0930: EA                    mov     a, r2
0931: 6E                    xrl     a, r6
0932: FA                    mov     r2, a
0933: EB                    mov     a, r3
0934: 6F                    xrl     a, r7
0935: FB                    mov     r3, a
0936: D0 E0                 pop     acc
0938: 22                    ret
                   
                   update_crc16:
0939: C0 F0                 push    b
093B: F5 F0                 mov     b, a
093D: 74 80                 mov     a, #0x80
                   loop:
093F: F8                    mov     r0, a
0940: E5 F0                 mov     a, b
0942: 58                    anl     a, r0
0943: 60 02                 jz      skip0
0945: 74 01                 mov     a, #1
                   skip0:
0947: F9                    mov     r1, a
0948: EB                    mov     a, r3
0949: 23                    rl      a
094A: 54 01                 anl     a, #1
094C: 69                    xrl     a, r1
094D: F9                    mov     r1, a
094E: EA                    mov     a, r2
094F: 2A                    add     a, r2
0950: FA                    mov     r2, a
0951: EB                    mov     a, r3
0952: 33                    rlc     a
0953: FB                    mov     r3, a
0954: E9                    mov     a, r1
0955: 60 06                 jz      skip1
0957: EA                    mov     a, r2
0958: 6E                    xrl     a, r6
0959: FA                    mov     r2, a
095A: EB                    mov     a, r3
095B: 6F                    xrl     a, r7
095C: FB                    mov     r3, a
                   skip1:
095D: E8                    mov     a, r0
095E: C3                    clr     c
095F: 13                    rrc     a
0960: 70 DD                 jnz     loop
0962: D0 F0                 pop     b
0964: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   intm:
0965: 12 00 B6              lcall   crlf
0968: 78 00                 mov     r0, #0
                   intm2:
096A: 12 00 B6              lcall   crlf
096D: E8                    mov     a, r0
096E: 12 01 CE              lcall   phex
0971: 74 3A                 mov     a, #':'
0973: 12 00 9C              lcall   cout
                   intm3:
0976: 12 00 A4              lcall   sspace
0979: E6                    mov     a, @r0
097A: 12 01 CE              lcall   phex
097D: 08                    inc     r0
097E: B8 00 03              cjne    r0, #0, intm4
0981: 02 00 CF              ljmp    dcrlf
                   intm4:
0984: E8                    mov     a, r0
0985: 54 0F                 anl     a, #00001111b
0987: 70 ED                 jnz     intm3
0989: 80 DF                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
098B: C2 97                 clr     p1.7
098D: 02 00 B6              ljmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   dio77:
0990: D2 97                 setb    p1.7
0992: 02 00 B6              ljmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
0995: 75 82 00              mov     dpl, #0
0998: E0                    movx    a, @dptr
0999: B4 A5 14              cjne    a, #0xa5, find3
099C: A3                    inc     dptr
099D: E0                    movx    a, @dptr
099E: B4 E5 0F              cjne    a, #0xe5, find3
09A1: A3                    inc     dptr
09A2: E0                    movx    a, @dptr
09A3: B4 E0 0A              cjne    a, #0xe0, find3
09A6: A3                    inc     dptr
09A7: E0                    movx    a, @dptr
09A8: B4 A5 05              cjne    a, #0xa5, find3
09AB: 75 82 00              mov     dpl, #0                 ; found one here!
09AE: D3                    setb    c
09AF: 22                    ret
                   find3:
09B0: 74 DF                 mov     a, #(emem >> 8)
09B2: B5 83 02              cjne    a, dph, find4   ; did we just check the end
09B5: C3                    clr     c
09B6: 22                    ret
                   find4:
09B7: 05 83                 inc     dph             ; keep on searching
09B9: 80 DA                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   stcode:
09BB: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
09BE: 12 09 95              lcall   find
09C1: 50 23                 jnc     stcode5
09C3: 75 82 04              mov     dpl, #4
09C6: E0                    movx    a, @dptr
09C7: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
09CA: C0 F0                 push    b
09CC: C0 83                 push    dph
09CE: 74 DB                 mov     a, #(stcode3 & 0xff)
09D0: C0 E0                 push    acc
09D2: 74 09                 mov     a, #(stcode3 >> 8)
09D4: C0 E0                 push    acc
09D6: 75 82 40              mov     dpl, #64
09D9: E4                    clr     a
09DA: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
09DB: D0 83                 pop     dph             ; hopefully it'll return to
09DD: D0 F0                 pop     b
                   stcode4:
09DF: 05 83                 inc     dph
09E1: E5 83                 mov     a, dph
09E3: B4 E0 D8              cjne    a, #((emem + 1) >> 8) & 0xff, stcode2
                   stcode5:
09E6: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   ; copy from c [lssrc:hssrc, lesrc:hesrc) to x [ldst:hdst, ..
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpycx:
09E7: 8A 82                 mov     dpl, r2
09E9: 8B 83                 mov     dph, r3
09EB: E4                    clr     a
09EC: 93                    movc    a, @a+dptr
09ED: A3                    inc     dptr
09EE: AA 82                 mov     r2, dpl
09F0: AB 83                 mov     r3, dph
09F2: 8E 82                 mov     dpl, r6
09F4: 8F 83                 mov     dph, r7
09F6: F0                    movx    @dptr, a
09F7: A3                    inc     dptr
09F8: AE 82                 mov     r6, dpl
09FA: AF 83                 mov     r7, dph
09FC: EA                    mov     a, r2
09FD: 8C F0                 mov     b, r4
09FF: B5 F0 E5              cjne    a, b, cpycx
0A02: EB                    mov     a, r3
0A03: 8D F0                 mov     b, r5
0A05: B5 F0 DF              cjne    a, b, cpycx
0A08: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; copy from x [lssrc:hssrc, lesrc:hesrc) to x [ldst:hdst, ..
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpyxx:
0A09: 8A 82                 mov     dpl, r2
0A0B: 8B 83                 mov     dph, r3
0A0D: E0                    movx    a, @dptr
0A0E: A3                    inc     dptr
0A0F: AA 82                 mov     r2, dpl
0A11: AB 83                 mov     r3, dph
0A13: 8E 82                 mov     dpl, r6
0A15: 8F 83                 mov     dph, r7
0A17: F0                    movx    @dptr, a
0A18: A3                    inc     dptr
0A19: AE 82                 mov     r6, dpl
0A1B: AF 83                 mov     r7, dph
0A1D: EA                    mov     a, r2
0A1E: 8C F0                 mov     b, r4
0A20: B5 F0 E6              cjne    a, b, cpyxx
0A23: EB                    mov     a, r3
0A24: 8D F0                 mov     b, r5
0A26: B5 F0 E0              cjne    a, b, cpyxx
0A29: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                            ;-------- switch_shadow helper subroutine --------
                            switch_shadow:
0A2A: 75 90 FE                      mov     p1, #mctrl_shadow
0A2D: FF                            mov     r7, a
0A2E: FF                            mov     r7, a
0A2F: FF                            mov     r7, a
0A30: FF                            mov     r7, a
0A31: 22                            ret
                            switch_shadow_end:
                            ;-------- switch_shadow helper subroutine --------
                   
                   ; initialize the hardware on reset
                   ; copy flash to memory
                   
                   reset:
0A32: E4                    clr     a
0A33: F5 A8                 mov     ie, a
0A35: F5 B8                 mov     ip, a
0A37: 75 90 FF              mov     p1, #mctrl_reset
0A3A: FF                    mov     r7, a
0A3B: FF                    mov     r7, a
0A3C: FF                    mov     r7, a
0A3D: FF                    mov     r7, a
0A3E: 75 A0 FF              mov     p2, #p2_init
0A41: 75 D0 00              mov     psw, #psw_init
0A44: 75 81 17              mov     sp, #sp_init
0A47: 7A 00                 mov     r2, #0x00       ; lssrc
0A49: 7B 00                 mov     r3, #0x00       ; hssrc
0A4B: 7C 00                 mov     r4, #0x00       ; lesrc
0A4D: 7D 20                 mov     r5, #0x20       ; hesrc
0A4F: 7E 00                 mov     r6, #0x00       ; ldst
0A51: 7F 00                 mov     r7, #0x00       ; hdst
0A53: 12 09 E7              lcall   cpycx
0A56: 7A 2A                 mov     r2, #(switch_shadow & 0xff)     ; lssrc
0A58: 7B 0A                 mov     r3, #(switch_shadow >> 8)       ; hssrc
0A5A: 7C 32                 mov     r4, #(switch_shadow_end & 0xff)         ; l
0A5C: 7D 0A                 mov     r5, #(switch_shadow_end >> 8)   ; hesrc
0A5E: 7E 00                 mov     r6, #(pgm & 0xff)       ; ldst
0A60: 7F 20                 mov     r7, #(pgm >> 8)                 ; hdst
0A62: 12 09 E7              lcall   cpycx
0A65: 12 20 00              lcall   pgm             ; switch_shadow
                   ; initialize the serial port
0A68: 74 F7                 mov     a, #(bc & 0xff)         ; lsb
0A6A: 75 F0 FF              mov     b, #(bc >> 8)   ; msb
0A6D: 12 00 75              lcall   setbaud
                   ; run any user initialization programs in external memory
0A70: 75 F0 F9              mov     b, #249
0A73: 12 09 BB              lcall   stcode
                   ; run the start-up programs in external memory
0A76: 75 F0 FD              mov     b, #253
0A79: 12 09 BB              lcall   stcode
0A7C: 12 00 B6              lcall   crlf
0A7F: 12 00 B6              lcall   crlf
0A82: 12 00 B6              lcall   crlf
0A85: 12 00 B6              lcall   crlf
0A88: 90 0A 98              mov     dptr, #logon
0A8B: 12 00 D3              lcall   pcstr
0A8E: 12 05 DA              lcall   dir
0A91: 7E 00                 mov     r6, #(pgm & 0xff)
0A93: 7F 20                 mov     r7, #(pgm >> 8)
0A95: 02 02 D0              ljmp    menu
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Strings                                          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   logon:
0A98: 50 41 55 4C 
      4D 4F 4E 32 
      20 76 32 2E 
      31 61 62 20 
      32 30 32 34 
      31 30 32 34 
      30 30 0D 0A 
      0D 0A 00              .db     "PAULMON2 v2.1ab 2024102400\r\n\r\n", 0
                   abort:
0AB7: 20 20 43 6F 
      6D 6D 61 6E 
      64 20 61 62 
      6F 72 74 65 
      64 0D 0A 0D 
      0A 00                 .db     "  Command aborted\r\n\r\n", 0
                   prompt1:
0ACD: 4C 6F 63 61 
      74 69 6F 6E 
      3A 00                 .db     "Location:", 0
                   prompt2:
0AD7: 20 3E 20 00 
                            .db     " > ", 0
                   prompt3:
0ADB: 53 65 6C 65 
      63 74 20 70 
      72 6F 67 72 
      61 6D 20 74 
      6F 20 72 75 
      6E 20 28 00 
                            .db     "Select program to run (", 0
                   prompt4:
0AF3: 29 20 6F 72 
      20 45 53 43 
      20 74 6F 20 
      61 62 6F 72 
      74 3A 20 00 
                            .db     ") or ESC to abort: ", 0
                   prompt5:
0B07: 4E 6F 20 70 
      72 6F 67 72 
      61 6D 20 68 
      65 61 64 65 
      72 73 20 66 
      6F 75 6E 64 
      20 69 6E 20 
      6D 65 6D 6F 
      72 79 2C 20 
      75 73 65 20 
      4A 55 4D 50 
      20 69 6E 73 
      74 65 61 64 
      0D 0A 0D 0A 
      00                    .db     "No program headers found in memory, use JU
                   prompt6:
0B40: 0D 0A 0D 0A 
      4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      3A 20 00              .db     "\r\n\r\nNew location: ", 0
                   prompt7:
0B53: 50 72 65 73 
      73 20 61 6E 
      79 20 6B 65 
      79 2E 2E 2E 
      00                    .db     "Press any key...", 0
                   prompt8:
0B64: 0D 0A 0D 0A 
      4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 20 
      28 00                 .db     "\r\n\r\nJump to memory location (", 0
                   prompt9:
0B82: 0D 0A 0D 0A 
      50 72 6F 67 
      72 61 6D 20 
      4E 61 6D 65 
      00                    .db     "\r\n\r\nProgram Name", 0
                   prompt9b:
0B93: 4C 6F 63 61 
      74 69 6F 6E 
      20 20 20 20 
      20 20 54 79 
      70 65 0D 0A 
      00                    .db     "Location      Type\r\n", 0
                   prompt10:
0BA8: 29 20 4E 65 
      77 20 76 61 
      6C 75 65 3A 
      20 00                 .db     ") New value: ", 0
                   beg_str:
0BB6: 46 69 72 73 
      74 20 6C 6F 
      63 61 74 69 
      6F 6E 3A 20 
      00                    .db     "First location: ", 0
                   end_str:
0BC7: 4C 61 73 74 
      20 6C 6F 63 
      61 74 69 6F 
      6E 3A 20 00 
                            .db     "Last location: ", 0
                   sure:
0BD7: 41 72 65 20 
      79 6F 75 20 
      73 75 72 65 
      3F 20 00              .db     "Are you sure? ", 0
                   edits1:
0BE6: 0D 0A 0D 0A 
      45 64 69 74 
      69 6E 67 20 
      65 78 74 65 
      72 6E 61 6C 
      20 52 41 4D 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      00                    .db     "\r\n\r\nEditing external RAM, ESC to abort
                   edits2:
0C0F: 20 20 45 64 
      69 74 69 6E 
      67 20 63 6F 
      6D 70 6C 65 
      74 65 2C 20 
      74 68 69 73 
      20 6C 6F 63 
      61 74 69 6F 
      6E 20 75 6E 
      63 68 61 6E 
      67 65 64 0D 
      0A 0D 0A 00 
                            .db     "  Editing complete, this location unchange
                   dnlds1:
0C3F: 0D 0A 0D 0A 
      42 65 67 69 
      6E 20 74 72 
      61 6E 73 66 
      65 72 20 6F 
      66 20 49 6E 
      74 65 6C 20 
      68 65 78 20 
      66 69 6C 65 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      0D 0A 00              .db     "\r\n\r\nBegin transfer of Intel hex file, 
                   dnlds2:
0C76: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 61 
      62 6F 72 74 
      65 64 0D 0A 
      0D 0A 00              .db     "\r\nDownload aborted\r\n\r\n", 0
                   dnlds3:
0C8D: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 63 
      6F 6D 70 6C 
      65 74 65 64 
      0D 0A 0D 0A 
      00                    .db     "\r\nDownload completed\r\n\r\n", 0
                   dnlds4:
0CA6: 53 75 6D 6D 
      61 72 79 3A 
      0D 0A 00              .db     "Summary:\r\n", 0
                   dnlds5:
0CB1: 20 20 6C 69 
      6E 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  lines received\r\n", 0
                   dnlds6a:
0CC4: 20 20 62 79 
      74 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  bytes received\r\n", 0
                   dnlds6b:
0CD7: 20 20 62 79 
      74 65 73 20 
      77 72 69 74 
      74 65 6E 0D 
      0A 00                 .db     "  bytes written\r\n", 0
                   dnlds7:
0CE9: 45 72 72 6F 
      72 73 3A 0D 
      0A 00                 .db     "Errors:\r\n", 0
                   dnlds8:
0CF3: 20 20 62 79 
      74 65 73 20 
      75 6E 61 62 
      6C 65 20 74 
      6F 20 77 72 
      69 74 65 0D 
      0A 00                 .db     "  bytes unable to write\r\n", 0
                   dnlds9:
0D0D: 20 20 62 61 
      64 20 63 68 
      65 63 6B 73 
      75 6D 73 0D 
      0A 00                 .db     "  bad checksums\r\n", 0
                   dnlds10:
0D1F: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 62 65 67 
      69 6E 20 6F 
      66 20 6C 69 
      6E 65 0D 0A 
      00                    .db     "  unexpected begin of line\r\n", 0
                   dnlds11:
0D3C: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected hex digits\r\n", 0
                   dnlds12:
0D56: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 6E 6F 6E 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected non hex digits\r\n", 0
                   dnlds13:
0D74: 4E 6F 20 65 
      72 72 6F 72 
      73 20 64 65 
      74 65 63 74 
      65 64 0D 0A 
      0D 0A 00              .db     "No errors detected\r\n\r\n", 0
                   runs1:
0D8B: 0D 0A 52 75 
      6E 6E 69 6E 
      67 20 70 72 
      6F 67 72 61 
      6D 2E 2E 2E 
      0D 0A 0D 0A 
      00                    .db     "\r\nRunning program...\r\n\r\n", 0
                   uplds3:
0DA4: 0D 0A 53 65 
      6E 64 69 6E 
      67 20 49 6E 
      74 65 6C 20 
      68 65 78 20 
      66 69 6C 65 
      20 66 72 6F 
      6D 20 00              .db     "\r\nSending Intel hex file from ", 0
                   uplds4:
0DC3: 20 74 6F 20 
      00                    .db     " to ", 0
                   help1txt:
0DC8: 0D 0A 0D 0A 
      53 74 61 6E 
      64 61 72 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\n\r\nStandard commands:\r\n", 0
                   help2txt:
0DE1: 0D 0A 55 73 
      65 72 20 69 
      6E 73 74 61 
      6C 6C 65 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\nUser installed commands:\r\n", 0
                   type1:
0DFE: 45 78 74 65 
      72 6E 61 6C 
      20 63 6F 6D 
      6D 61 6E 64 
      00                    .db     "External command", 0
                   type2:
0E0F: 50 72 6F 67 
      72 61 6D 00 
                            .db     "Program", 0
                   type4:
0E17: 53 74 61 72 
      74 75 70 20 
      63 6F 64 65 
      00                    .db     "Startup code", 0
                   type5:
0E24: 3F 3F 3F 00 
                            .db     "???", 0
                   help_cmd2:
0E28: 48 65 6C 70 
      00                    .db     "Help", 0
                   help_cmd:
0E2D: 54 68 69 73 
      20 68 65 6C 
      70 20 6C 69 
      73 74 00              .db     "This help list", 0
                   dir_cmd:
0E3C: 4C 69 73 74 
      20 70 72 6F 
      67 72 61 6D 
      73 00                 .db     "List programs", 0
                   run_cmd:
0E4A: 52 75 6E 20 
      70 72 6F 67 
      72 61 6D 00 
                            .db     "Run program", 0
                   dnld_cmd:
0E56: 44 6F 77 6E 
      6C 6F 61 64 
      00                    .db     "Download", 0
                   upld_cmd:
0E5F: 55 70 6C 6F 
      61 64 00              .db     "Upload", 0
                   nloc_cmd:
0E66: 4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      00                    .db     "New location", 0
                   jump_cmd:
0E73: 4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 00 
                            .db     "Jump to memory location", 0
                   dump_cmd:
0E8B: 48 65 78 20 
      64 75 6D 70 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump external memory", 0
                   intm_cmd:
0EA4: 48 65 78 20 
      64 75 6D 70 
      20 69 6E 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump internal memory", 0
                   edit_cmd:
0EBD: 45 64 69 74 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Edit external memory", 0
                   clrm_cmd:
0ED2: 43 6C 65 61 
      72 20 65 78 
      74 65 72 6E 
      61 6C 20 6D 
      65 6D 6F 72 
      79 00                 .db     "Clear external memory", 0
                   crc16_cmd:
0EE8: 43 61 6C 63 
      75 6C 61 74 
      65 20 43 52 
      43 31 36 00 
                            .db     "Calculate CRC16", 0
                   eio77_cmd:
0EF8: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   dio77_cmd:
0F07: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                   baud_cmd:
0F17: 52 65 73 65 
      74 20 62 61 
      75 64 20 72 
      61 74 65 00 
                            .db     "Reset baud rate", 0
                   baudprompt:
0F27: 45 6E 74 65 
      72 20 6E 65 
      77 20 62 61 
      75 64 20 63 
      6F 6E 73 74 
      3A 20 00              .db     "Enter new baud const: ", 0
0F3E: 45 6E 74 65 
      72 20 6E 65 
      77 20 62 61 
      75 64 20 63 
      6F 6E 73 74 
      3A 20 00              .db     "Enter new baud const: ", 0
