                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   ;
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   ;
                   ; Version 2.1ab
                   ;        Extensive mods by Atanas Bachvaroff <bachvaroff@gma
                   ;
                   ; See LICENSE
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xdfff            ; end of the memory to sear
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     p2_init, 0xff           ; boot time default page is
0000:              .equ     sp_init, 0x17           ; location of the stack
0000:              .equ     sp_reset, 0x07          ; stack on reset
0000:              .equ     mctrl_reset, 11111111b  ; memory controller (P1) on
0000:              .equ     mctrl_shadow, 11111110b         ; memory controller
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|
                   ;                         \__ sp_reset
                   ; |10|11|12|13|14|15|16|17|
                   ;                         \__ sp_init
                   ;
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  dnld  .  .  |
                   ; |  .  .  .  dnld  .  .  |
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; bc = 65536 - (OSC / 32) / baud
                   ;---------------------------------------------------------;
                   ; 0xfffa @ 57600bps @ 11.059MHz
                   ;.equ    bc, 0xfffa
                   ; 0xfff7 @ 38400bps @ 11.059MHz
                   ;.equ    bc, 0xfff7
                   ; 0xffee @ 19200bps @ 11.059MHz
                   ;.equ    bc, 0xffee
                   ; 0xffdc @ 9600bps @ 11.059MHz
                   ;.equ    bc, 0xffdc
                   ; 0xfff7 @ 57600bps @ 16.5888MHz
0000:              .equ     bc, 0xfff7
                   ; 0xffee @ 28800bps @ 16.5888MHz
                   ;.equ    bc, 0xffee
                   ; 0xffe5 @ 19200bps @ 16.5888MHz
                   ;.equ    bc, 0xffe5
                   ; 0xffca @ 9600bps @ 16.5888MHz
                   ;.equ    bc, 0xffca
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Key command definitions
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     crc16_key, 'W'          ; calculate crc16
0000:              .equ     baud_key, 'B'           ; reset baudrate
0000:              .equ     eio77_key, '<'          ; enable IO space 0xe000-0x
0000:              .equ     dio77_key, '>'          ; disable IO space 0xe000-0
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Common ASCII codes
0000:              .equ     LF, '\n'
0000:              .equ     CR, '\r'
0000:              .equ     ESC, 27
0000:              .equ     SPACE, ' '
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; spare the flash by filling the space between vectors
                   ; with "mov r7, a" / 0xff in binary
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 09 EC              ljmp    reset
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base + 3
0003: 02 20 03              ljmp    vector + 3
0006: FF                    mov     r7, a
0007: FF                    mov     r7, a
0008: FF                    mov     r7, a
0009: FF                    mov     r7, a
000A: FF                    mov     r7, a
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base + 11
000B: 02 20 0B              ljmp    vector + 11
000E: FF                    mov     r7, a
000F: FF                    mov     r7, a
0010: FF                    mov     r7, a
0011: FF                    mov     r7, a
0012: FF                    mov     r7, a
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base + 19
0013: 02 20 13              ljmp    vector + 19
0016: FF                    mov     r7, a
0017: FF                    mov     r7, a
0018: FF                    mov     r7, a
0019: FF                    mov     r7, a
001A: FF                    mov     r7, a
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base + 27
001B: 02 20 1B              ljmp    vector + 27
001E: FF                    mov     r7, a
001F: FF                    mov     r7, a
0020: FF                    mov     r7, a
0021: FF                    mov     r7, a
0022: FF                    mov     r7, a
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base + 35
0023: 02 20 23              ljmp    vector + 35
0026: FF                    mov     r7, a
0027: FF                    mov     r7, a
0028: FF                    mov     r7, a
0029: FF                    mov     r7, a
002A: FF                    mov     r7, a
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base + 43
002B: 02 20 2B              ljmp    vector + 43
002E: FF                    mov     r7, a
002F: FF                    mov     r7, a
0030: FF                    mov     r7, a
0031: FF                    mov     r7, a
0032: FF                    mov     r7, a
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;           Update paulmon21.equ accordingly               ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
0033:              .org     base + 51
0033: 02 0A 7E              ljmp    setbaud                 ; JMP_TABLE 0x0033
0036: 02 00 75              ljmp    cin             ; JMP_TABLE 0x0036
0039: 02 00 7D              ljmp    cinpoll                 ; JMP_TABLE 0x0039
003C: 02 00 87              ljmp    cout            ; JMP_TABLE 0x003c
                            
003F: 02 01 B9              ljmp    phex            ; JMP_TABLE 0x003f
0042: 02 01 BC              ljmp    phex1           ; JMP_TABLE 0x0042
0045: 02 01 CB              ljmp    phex16          ; JMP_TABLE 0x0045
0048: 02 00 BE              ljmp    pcstr           ; JMP_TABLE 0x0048
004B: 02 00 CB              ljmp    pcb7str                 ; JMP_TABLE 0x004b
004E: 02 01 D8              ljmp    pint8u          ; JMP_TABLE 0x004e
0051: 02 01 DE              ljmp    pint8           ; JMP_TABLE 0x0051
0054: 02 02 1C              ljmp    pint16u                 ; JMP_TABLE 0x0054
0057: 02 00 A1              ljmp    crlf            ; JMP_TABLE 0x0057
                            
005A: 02 00 DF              ljmp    ghex            ; JMP_TABLE 0x005a
005D: 02 01 23              ljmp    ghex16          ; JMP_TABLE 0x005d
                            
0060: 02 01 9F              ljmp    asc2hex                 ; JMP_TABLE 0x0060
0063: 02 02 8F              ljmp    upper           ; JMP_TABLE 0x0063
0066: 02 02 9C              ljmp    lencstr                 ; JMP_TABLE 0x0066
0069: 02 02 AA              ljmp    lencb7str       ; JMP_TABLE 0x0069
                            
006C: 02 09 0B              ljmp    init_crc16      ; JMP_TABLE 0x006c
006F: 02 09 1F              ljmp    update_crc16    ; JMP_TABLE 0x006f
0072: 02 09 14              ljmp    finish_crc16    ; JMP_TABLE 0x0072
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   cin:
0075: 30 98 FD              jnb     ri, cin
0078: E5 99                 mov     a, sbuf
007A: C2 98                 clr     ri
007C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   cinpoll:
007D: D3                    setb    c
007E: 30 98 05              jnb     ri, cinpoll1
0081: E5 99                 mov     a, sbuf
0083: C2 98                 clr     ri
0085: C3                    clr     c
                   cinpoll1:
0086: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   cout:
0087: 30 99 FD              jnb     ti, cout
008A: C2 99                 clr     ti
008C: F5 99                 mov     sbuf, a
008E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   sspace:
008F: C0 E0                 push    acc
0091: 74 20                 mov     a, #SPACE
0093: 11 87                 acall   cout
0095: D0 E0                 pop     acc
0097: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   dash:
0098: C0 E0                 push    acc
009A: 74 2D                 mov     a, #'-'
009C: 11 87                 acall   cout
009E: D0 E0                 pop     acc
00A0: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   crlf:
00A1: C0 E0                 push    acc
00A3: 74 0D                 mov     a, #CR
00A5: 11 87                 acall   cout
00A7: 74 0A                 mov     a, #LF
00A9: 11 87                 acall   cout
00AB: D0 E0                 pop     acc
00AD: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   cout_sp:
00AE: 11 87                 acall   cout
00B0: 01 8F                 ajmp    sspace
                   
                   ;---------------------------------------------------------;
                   
                   dash_sp:
00B2: 11 98                 acall   dash
00B4: 01 8F                 ajmp    sspace
                   
                   ;---------------------------------------------------------;
                   
                   dspace:
00B6: 11 8F                 acall   sspace
00B8: 01 8F                 ajmp    sspace
                   
                   ;---------------------------------------------------------;
                   
                   dcrlf:
00BA: 11 A1                 acall   crlf
00BC: 01 A1                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   pcstr:
00BE: C0 E0                 push    acc
                   pcstr1:
00C0: E0                    movx    a, @dptr
00C1: A3                    inc     dptr
00C2: 60 04                 jz      pcstr2
00C4: 11 87                 acall   cout
00C6: 80 F8                 sjmp    pcstr1
                   pcstr2:
00C8: D0 E0                 pop     acc
00CA: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   pcb7str:
00CB: C0 E0                 push    acc
                   pcb7str1:
00CD: E0                    movx    a, @dptr
00CE: A3                    inc     dptr
00CF: 60 0B                 jz      pcb7str3
00D1: 20 E7 04              jb      acc.7, pcb7str2
00D4: 11 87                 acall   cout
00D6: 80 F5                 sjmp    pcb7str1
                   pcb7str2:
00D8: 54 7F                 anl     a, #0x7f
00DA: 11 87                 acall   cout
                   pcb7str3:
00DC: D0 E0                 pop     acc
00DE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
00DF: C2 D5                 clr     psw.5
                   ghex8c:
00E1: 11 75                 acall   cin     ; get first digit
00E3: 51 8F                 acall   upper
00E5: B4 1B 03              cjne    a, #ESC, ghex8f
                   ghex8d:
00E8: D3                    setb    c
00E9: E4                    clr     a
00EA: 22                    ret
                   ghex8f:
00EB: B4 0D 05              cjne    a, #CR, ghex8h
00EE: D2 D5                 setb    psw.5
00F0: C3                    clr     c
00F1: E4                    clr     a
00F2: 22                    ret
                   ghex8h:
00F3: FA                    mov     r2, a
00F4: 31 9F                 acall   asc2hex
00F6: 40 E9                 jc      ghex8c
00F8: CA                    xch     a, r2           ; r2 will hold hex value of
00F9: 11 87                 acall   cout
                   ghex8j:
00FB: 11 75                 acall   cin     ; get second digit
00FD: 51 8F                 acall   upper
00FF: B4 1B 02              cjne    a, #ESC, ghex8k
0102: 80 E4                 sjmp    ghex8d
                   ghex8k:
0104: B4 0D 03              cjne    a, #CR, ghex8m
0107: EA                    mov     a, r2
0108: C3                    clr     c
0109: 22                    ret
                   ghex8m:
010A: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
010D: 11 87                 acall   cout
010F: 80 D0                 sjmp    ghex8c
                   ghex8p:
0111: B4 15 02              cjne    a, #21, ghex8q
0114: 80 F7                 sjmp    ghex8n
                   ghex8q:
0116: FB                    mov     r3, a
0117: 31 9F                 acall   asc2hex
0119: 40 E0                 jc      ghex8j
011B: CB                    xch     a, r3
011C: 11 87                 acall   cout
011E: EA                    mov     a, r2
011F: C4                    swap    a
0120: 4B                    orl     a, r3
0121: C3                    clr     c
0122: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
0123: 7A 00                 mov     r2, #0          ; start out with 0
0125: 7B 00                 mov     r3, #0
0127: 7C 04                 mov     r4, #4          ; number of digits left
0129: C2 D5                 clr     psw.5
                   
                   ghex16c:
012B: 11 75                 acall   cin
012D: 51 8F                 acall   upper
012F: B4 1B 07              cjne    a, #ESC, ghex16d
0132: D3                    setb    c               ; handle esc key
0133: E4                    clr     a
0134: F5 83                 mov     dph, a
0136: F5 82                 mov     dpl, a
0138: 22                    ret
                   ghex16d:
0139: B4 08 02              cjne    a, #8, ghex16f
013C: 80 03                 sjmp    ghex16k
                   ghex16f:
013E: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
0141: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
0144: 80 E5                 sjmp    ghex16c
                   ghex16e:
0146: 11 87                 acall   cout
0148: 31 8E                 acall   ghex16y
014A: 0C                    inc     r4
014B: 80 DE                 sjmp    ghex16c
                   ghex16g:
014D: B4 0D 10              cjne    a, #CR, ghex16i                 ; return ke
0150: 8B 83                 mov     dph, r3
0152: 8A 82                 mov     dpl, r2
0154: BC 04 07              cjne    r4, #4, ghex16h
0157: E4                    clr     a
0158: F5 83                 mov     dph, a
015A: F5 82                 mov     dpl, a
015C: D2 D5                 setb    psw.5
                   ghex16h:
015E: C3                    clr     c
015F: 22                    ret
                   ghex16i:
0160: FD                    mov     r5, a                   ; keep copy of orig
0161: 31 9F                 acall   asc2hex
0163: 40 C6                 jc      ghex16c
0165: CD                    xch     a, r5
0166: 12 00 87              lcall   cout
0169: ED                    mov     a, r5
016A: C0 E0                 push    acc
016C: 31 7D                 acall   ghex16x
016E: D0 E0                 pop     acc
0170: 2A                    add     a, r2
0171: FA                    mov     r2, a
0172: E4                    clr     a
0173: 3B                    addc    a, r3
0174: FB                    mov     r3, a
0175: DC B4                 djnz    r4, ghex16c
0177: C3                    clr     c
0178: 8A 82                 mov     dpl, r2
017A: 8B 83                 mov     dph, r3
017C: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
017D: EB                    mov     a, r3
017E: C4                    swap    a
017F: 54 F0                 anl     a, #11110000b
0181: FB                    mov     r3, a
0182: EA                    mov     a, r2
0183: C4                    swap    a
0184: 54 0F                 anl     a, #00001111b
0186: 4B                    orl     a, r3
0187: FB                    mov     r3, a
0188: EA                    mov     a, r2
0189: C4                    swap    a
018A: 54 F0                 anl     a, #11110000b
018C: FA                    mov     r2, a
018D: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
018E: EA                    mov     a, r2
018F: C4                    swap    a
0190: 54 0F                 anl     a, #00001111b
0192: FA                    mov     r2, a
0193: EB                    mov     a, r3
0194: C4                    swap    a
0195: 54 F0                 anl     a, #11110000b
0197: 4A                    orl     a, r2
0198: FA                    mov     r2, a
0199: EB                    mov     a, r3
019A: C4                    swap    a
019B: 54 0F                 anl     a, #00001111b
019D: FB                    mov     r3, a
019E: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
019F: 24 D0                 add     a, #208
01A1: 50 14                 jnc     hex_not
01A3: 24 F6                 add     a, #246
01A5: 40 04                 jc      hex_maybe
01A7: 24 0A                 add     a, #10
01A9: C3                    clr     c
01AA: 22                    ret
                   hex_maybe:
01AB: 24 F9                 add     a, #249
01AD: 50 08                 jnc     hex_not
01AF: 24 FA                 add     a, #250
01B1: 40 04                 jc      hex_not
01B3: 24 10                 add     a, #16
01B5: C3                    clr     c
01B6: 22                    ret
                   hex_not:
01B7: D3                    setb    c
01B8: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
01B9: 31 BB                 acall   phex_b
                   phex_b:
01BB: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
01BC: C0 E0                 push    acc
01BE: 54 0F                 anl     a, #15
01C0: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
01C2: D4                    da      a               ; if A to F, C=1 and lower 
01C3: 34 40                 addc    a, #0x40
01C5: D4                    da      a
01C6: 11 87                 acall   cout
01C8: D0 E0                 pop     acc
01CA: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
01CB: C0 E0                 push    acc
01CD: E5 83                 mov     a, dph
01CF: 31 B9                 acall   phex
01D1: E5 82                 mov     a, dpl
01D3: 31 B9                 acall   phex
01D5: D0 E0                 pop     acc
01D7: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
01D8: C0 F0                 push    b
01DA: C0 E0                 push    acc
01DC: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
01DE: C0 F0                 push    b
01E0: C0 E0                 push    acc
01E2: 30 E7 0C              jnb     acc.7, pint8b
01E5: 74 2D                 mov     a, #'-'
01E7: 12 00 87              lcall   cout
01EA: D0 E0                 pop     acc
01EC: C0 E0                 push    acc
01EE: F4                    cpl     a
01EF: 24 01                 add     a, #1
                   pint8b:
01F1: 75 F0 64              mov     b, #100
01F4: 84                    div     ab
01F5: D2 D5                 setb    f0
01F7: 60 07                 jz      pint8c
01F9: C2 D5                 clr     f0
01FB: 24 30                 add     a, #'0'
01FD: 12 00 87              lcall   cout
                   pint8c:
0200: E5 F0                 mov     a, b
0202: 75 F0 0A              mov     b, #10
0205: 84                    div     ab
0206: 30 D5 02              jnb     f0, pint8d
0209: 60 05                 jz      pint8e
                   pint8d:
020B: 24 30                 add     a, #'0'
020D: 12 00 87              lcall   cout
                   pint8e:
0210: E5 F0                 mov     a, b
0212: 24 30                 add     a, #'0'
0214: 12 00 87              lcall   cout
0217: D0 E0                 pop     acc
0219: D0 F0                 pop     b
021B: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
021C: C0 E0                 push    acc
021E: E8                    mov     a, r0
021F: C0 E0                 push    acc
0221: C2 D5                 clr     psw.5
0223: AA 82                 mov     r2, dpl
0225: AB 83                 mov     r3, dph
                   pint16a:
0227: 7C 10                 mov     r4, #16                 ; 10^4
0229: 7D 27                 mov     r5, #39
022B: 51 7A                 acall   pint16x
022D: 60 07                 jz      pint16b
022F: 24 30                 add     a, #'0'
0231: 12 00 87              lcall   cout
0234: D2 D5                 setb    psw.5
                   pint16b:
0236: 7C E8                 mov     r4, #232        ; 10^3
0238: 7D 03                 mov     r5, #3
023A: 51 7A                 acall   pint16x
023C: 70 03                 jnz     pint16c
023E: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
0241: 24 30                 add     a, #'0'
0243: 12 00 87              lcall   cout
0246: D2 D5                 setb    psw.5
                   pint16d:
0248: 7C 64                 mov     r4, #100        ; 10^2
024A: 7D 00                 mov     r5, #0
024C: 51 7A                 acall   pint16x
024E: 70 03                 jnz     pint16e
0250: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
0253: 24 30                 add     a, #'0'
0255: 12 00 87              lcall   cout
0258: D2 D5                 setb    psw.5
                   pint16f:
025A: EA                    mov     a, r2           ; 10^1
025B: AB F0                 mov     r3, b
025D: 75 F0 0A              mov     b, #10
0260: 84                    div     ab
0261: 70 03                 jnz     pint16g
0263: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
0266: 24 30                 add     a, #'0'
0268: 12 00 87              lcall   cout
                   pint16h:
026B: E5 F0                 mov     a, b            ; 10^0
026D: 8B F0                 mov     b, r3
026F: 24 30                 add     a, #'0'
0271: 12 00 87              lcall   cout
0274: D0 E0                 pop     acc
0276: F8                    mov     r0, a
0277: D0 E0                 pop     acc
0279: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
027A: 78 00                 mov     r0, #0
                   pint16y:
027C: 08                    inc     r0
027D: C3                    clr     c
027E: EA                    mov     a, r2
027F: 9C                    subb    a, r4
0280: FA                    mov     r2, a
0281: EB                    mov     a, r3
0282: 9D                    subb    a, r5
0283: FB                    mov     r3, a
0284: 50 F6                 jnc     pint16y
0286: 18                    dec     r0
0287: EA                    mov     a, r2
0288: 2C                    add     a, r4
0289: FA                    mov     r2, a
028A: EB                    mov     a, r3
028B: 3D                    addc    a, r5
028C: FB                    mov     r3, a
028D: E8                    mov     a, r0
028E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
028F: B4 61 00              cjne    a, #97, upper2
                   upper2:
0292: 40 07                 jc      upper4          ; end if acc < 97
0294: B4 7B 00              cjne    a, #123, upper3
                   upper3:
0297: 50 02                 jnc     upper4          ; end if acc >= 123
0299: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
029B: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lencstr:
029C: 78 00                 mov     r0, #0          ; returns length of a strin
029E: C0 E0                 push    acc
                   lencstr1:
02A0: E0                    movx    a, @dptr
02A1: 60 04                 jz      lencstr2
02A3: 08                    inc     r0
02A4: A3                    inc     dptr
02A5: 80 F9                 sjmp    lencstr1
                   lencstr2:
02A7: D0 E0                 pop     acc
02A9: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lencb7str:
02AA: 78 00                 mov     r0, #0
02AC: C0 E0                 push    acc
                   lencb7str1:
02AE: E0                    movx    a, @dptr
02AF: 60 07                 jz      lencb7str2
02B1: 08                    inc     r0
02B2: 20 E7 03              jb      acc.7, lencb7str2
02B5: A3                    inc     dptr
02B6: 80 F6                 sjmp    lencb7str1
                   lencb7str2:
02B8: D0 E0                 pop     acc
02BA: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
02BB: 90 0A C8              mov     dptr, #prompt1  ; give 'em the first part o
02BE: 11 BE                 acall   pcstr
02C0: EF                    mov     a, r7
02C1: 31 B9                 acall   phex
02C3: EE                    mov     a, r6
02C4: 31 B9                 acall   phex
02C6: 90 0A D2              mov     dptr, #prompt2
02C9: 11 BE                 acall   pcstr
                            
                   ; now we're finally past the prompt, so let's get some input
02CB: 11 75                 acall   cin             ; get the input, finally
02CD: B4 3A 04              cjne    a, #':', menu0
02D0: 71 D5                 acall   dnld_now
02D2: 80 E7                 sjmp    menu
                   menu0:
02D4: 51 8F                 acall   upper
                            
                   ; push return address onto stack so we can just jump to the 
02D6: 75 F0 BB              mov     b, #(menu & 0xff)       ; we push the retur
02D9: C0 F0                 push    b               ; to save code later...
02DB: 75 F0 02              mov     b, #(menu >> 8)         ; if bogus input, j
02DE: C0 F0                 push    b               ; another prompt.
                            
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                            
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                            
                   menux:
02E0: F5 F0                 mov     b, a            ; now search for external c
02E2: 90 10 00              mov     dptr, #bmem
                   menux1:
02E5: 12 09 7B              lcall   find
02E8: 50 22                 jnc     menuxend        ; searched all the commands
02EA: 75 82 04              mov     dpl, #4
02ED: E0                    movx    a, @dptr
02EE: B4 FE 14              cjne    a, #254, menux2         ; only FE is an ext
02F1: 05 82                 inc     dpl
02F3: E0                    movx    a, @dptr
02F4: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
02F7: 11 8F                 acall   sspace
02F9: 75 82 20              mov     dpl, #32
02FC: 11 BE                 acall   pcstr           ; print command name
02FE: 11 A1                 acall   crlf
0300: 75 82 40              mov     dpl, #64
0303: E4                    clr     a
0304: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
0305: 05 83                 inc     dph
0307: E5 83                 mov     a, dph
0309: B4 E0 D9              cjne    a, #((emem + 1) >> 8) & 0xff, menux1
                   menuxend:
030C: E5 F0                 mov     a, b
                            
                   ; since we didn't find a user installed command, use the bui
                   menui1:
030E: B4 3F 07              cjne    a, #help_key, menui2
0311: 90 0E 23              mov     dptr, #help_cmd2
0314: 11 BE                 acall   pcstr
0316: C1 D7                 ajmp    help
                            
                   menui2:
0318: B4 4D 07              cjne    a, #dir_key, menui3
031B: 90 0E 37              mov     dptr, #dir_cmd
031E: 11 BE                 acall   pcstr
0320: A1 C5                 ajmp    dir
                            
                   menui3:
0322: B4 52 07              cjne    a, #run_key, menui4
0325: 90 0E 45              mov     dptr, #run_cmd
0328: 11 BE                 acall   pcstr
032A: C1 3F                 ajmp    run
                            
                   menui4:
032C: B4 44 07              cjne    a, #dnld_key, menui5
032F: 90 0E 51              mov     dptr, #dnld_cmd
0332: 11 BE                 acall   pcstr
0334: 61 B8                 ajmp    dnld
                            
                   menui5:
0336: B4 55 07              cjne    a, #upld_key, menui6
0339: 90 0E 5A              mov     dptr, #upld_cmd
033C: 11 BE                 acall   pcstr
033E: E1 7D                 ajmp    upld
                            
                   menui6:
0340: B4 4E 09              cjne    a, #nloc_key, menui7
0343: 90 0E 61              mov     dptr, #nloc_cmd
0346: 12 00 BE              lcall   pcstr
0349: 02 08 4A              ljmp    nloc
                            
                   menui7:
034C: B4 4A 07              cjne    a, #jump_key, menui8
034F: 90 0E 6E              mov     dptr, #jump_cmd
0352: 11 BE                 acall   pcstr
0354: A1 1F                 ajmp    jump
                            
                   menui8:
0356: B4 48 07              cjne    a, #dump_key, menui9
0359: 90 0E 86              mov     dptr, #dump_cmd
035C: 11 BE                 acall   pcstr
035E: A1 50                 ajmp    dump
                            
                   menui9:
0360: B4 45 07              cjne    a, #edit_key, menui10
0363: 90 0E B8              mov     dptr, #edit_cmd
0366: 11 BE                 acall   pcstr
0368: A1 92                 ajmp    edit
                            
                   menui10:
036A: B4 43 08              cjne    a, #clrm_key, menui11
036D: 90 0E CD              mov     dptr, #clrm_cmd
0370: 11 BE                 acall   pcstr
0372: 02 08 5E              ljmp    clrm
                            
                   menui11:
0375: B4 49 08              cjne    a, #intm_key, menui12
0378: 90 0E 9F              mov     dptr, #intm_cmd
037B: 11 BE                 acall   pcstr
037D: 02 09 4B              ljmp    intm
                            
                   menui12:
0380: B4 3C 08              cjne    a, #eio77_key, menui13
0383: 90 0E F3              mov     dptr, #eio77_cmd
0386: 11 BE                 acall   pcstr
0388: 02 09 71              ljmp    eio77
                            
                   menui13:
038B: B4 3E 08              cjne    a, #dio77_key, menui14
038E: 90 0F 02              mov     dptr, #dio77_cmd
0391: 11 BE                 acall   pcstr
0393: 02 09 76              ljmp    dio77
                            
                   menui14:
0396: B4 57 08              cjne    a, #crc16_key, menui15
0399: 90 0E E3              mov     dptr, #crc16_cmd
039C: 11 BE                 acall   pcstr
039E: 02 08 C9              ljmp    calc_crc16
                            
                   menui15:
03A1: B4 42 08              cjne    a, #baud_key, menuiend
03A4: 90 0F 12              mov     dptr, #baud_cmd
03A7: 11 BE                 acall   pcstr
03A9: 02 08 87              ljmp    reset_baud
                            
                   menuiend:
03AC: 01 A1                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   r6r7todptr:
03AE: 8E 82                 mov     dpl, r6
03B0: 8F 83                 mov     dph, r7
03B2: 22                    ret
                   
                   dptrtor6r7:
03B3: AE 82                 mov     r6, dpl
03B5: AF 83                 mov     r7, dph
03B7: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
03B8: 90 0C 3A              mov     dptr, #dnlds1   ; "begin sending file <ESC>
03BB: 11 BE                 acall   pcstr
03BD: B1 16                 acall   dnld_init
                            
                   dnld1:
                   ; look for begining of line marker ':'
03BF: 11 75                 acall   cin
03C1: B4 1B 02              cjne    a, #ESC, dnld2  ; Test for escape
03C4: 80 6D                 sjmp    dnld_esc
                            
                   dnld2:
03C6: B4 3A 02              cjne    a, #':', dnld2b
03C9: 80 10                 sjmp    dnld2d
                   dnld2b:
                   ; check to see if it's a hex digit, error if it is
03CB: 31 9F                 acall   asc2hex
03CD: 40 F0                 jc      dnld1
03CF: 79 06                 mov     r1, #6
03D1: 91 45                 acall   dnld_inc
03D3: 80 EA                 sjmp    dnld1
                            
                   dnld_now:
                   ; entry point for main menu detecting ':' character
03D5: 74 3A                 mov     a, #':'
03D7: 11 87                 acall   cout
03D9: B1 16                 acall   dnld_init
                            
                   dnld2d:
03DB: 79 00                 mov     r1, #0
03DD: 91 45                 acall   dnld_inc
                            
                   dnld3:
                   ; begin taking in the line of data
                   ;        mov     a, #'.'
                   ;        acall   cout
03DF: 7C 00                 mov     r4, #0          ; r4 will count up checksum
03E1: 91 64                 acall   dnld_ghex
03E3: F8                    mov     r0, a           ; R0 = # of data bytes
                   ;        mov     a, #'.'
                   ;        acall   cout
03E4: 91 64                 acall   dnld_ghex
03E6: F5 83                 mov     dph, a          ; High byte of load address
03E8: 91 64                 acall   dnld_ghex
03EA: F5 82                 mov     dpl, a          ; Low byte of load address
03EC: 91 64                 acall   dnld_ghex       ; Record type
03EE: B4 01 02              cjne    a, #1, dnld4    ; End record?
03F1: 80 29                 sjmp    dnld_end
                   dnld4:
03F3: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
03F5: E8                    mov     a, r0
03F6: 60 10                 jz      dnld_get_cksum
03F8: 91 64                 acall   dnld_ghex       ; Get data byte
03FA: FA                    mov     r2, a
03FB: 79 01                 mov     r1, #1
03FD: 91 45                 acall   dnld_inc        ; count total data bytes re
03FF: EA                    mov     a, r2
0400: F0                    movx    @dptr, a
0401: 79 02                 mov     r1, #2
0403: 91 45                 acall   dnld_inc
0405: A3                    inc     dptr
0406: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
0408: 91 64                 acall   dnld_ghex       ; get checksum
040A: EC                    mov     a, r4
040B: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
040D: 79 04                 mov     r1, #4
040F: 91 45                 acall   dnld_inc        ; all we can do it count # 
0411: 80 AC                 sjmp    dnld1
                            
                   dnld_unknown:
                   ; handle unknown line type
0413: E8                    mov     a, r0
0414: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
0416: 91 64                 acall   dnld_ghex       ; consume all of unknown da
0418: D8 FC                 djnz    r0, dnld_ukn2
041A: 80 EC                 sjmp    dnld_get_cksum
                            
                   dnld_end:
                   ; handles the proper end-of-download marker
041C: E8                    mov     a, r0
041D: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
041F: 91 64                 acall   dnld_ghex       ; consume all of useless da
0421: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
0423: 91 64                 acall   dnld_ghex       ; get the last checksum
0425: EC                    mov     a, r4
0426: 70 E5                 jnz     dnld_sumerr
0428: 91 3C                 acall   dnld_dly
042A: 90 0C 88              mov     dptr, #dnlds3   ; "download went ok..."
042D: 11 BE                 acall   pcstr
                   ; consume any cr or lf character that may have been
                   ; on the end of the last line
042F: 11 7D                 acall   cinpoll
0431: 80 76                 sjmp    dnld_sum
                            
                   dnld_esc:
                   ; handle esc received in the download stream
0433: 91 3C                 acall   dnld_dly
0435: 90 0C 71              mov     dptr, #dnlds2   ; "download aborted."
0438: 11 BE                 acall   pcstr
043A: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                            
                   dnld_dly:
043C: 78 00                 mov     r0, #0
                   dnlddly2:
043E: 79 00                 mov     r1, #0
0440: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0442: D8 FA                 djnz    r0, dnlddly2
0444: 22                    ret
                            
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                            
                   dnld_inc:
0445: E9                    mov     a, r1
0446: 54 07                 anl     a, #00000111b   ; just in case
0448: 23                    rl      a
0449: 24 08                 add     a, #dnld_parm
044B: F9                    mov     r1, a           ; now r1 points to lsb
044C: 07                    inc     @r1
044D: E7                    mov     a, @r1
044E: 70 02                 jnz     dnldin2
0450: 09                    inc     r1
0451: 07                    inc     @r1
                   dnldin2:
0452: 22                    ret
                            
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                            
                   dnld_gp:
0453: D3                    setb    c
0454: 87 82                 mov     dpl, @r1
0456: 09                    inc     r1
0457: 87 83                 mov     dph, @r1
0459: 09                    inc     r1
045A: E5 82                 mov     a, dpl
045C: 70 05                 jnz     dnldgp2
045E: E5 83                 mov     a, dph
0460: 70 01                 jnz     dnldgp2
0462: C3                    clr     c
                   dnldgp2:
0463: 22                    ret
                            
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                            
                   dnld_ghex:
                   dnldgh1:
0464: 11 75                 acall   cin
0466: 51 8F                 acall   upper
0468: B4 1B 06              cjne    a, #ESC, dnldgh3
                   dnldgh2:
046B: D0 E0                 pop     acc
046D: D0 E0                 pop     acc
046F: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
0471: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
0474: 79 05                 mov     r1, #5          ; handle unexpected beginni
0476: 91 45                 acall   dnld_inc
0478: D0 E0                 pop     acc
047A: D0 E0                 pop     acc
047C: 61 DF                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
047E: 31 9F                 acall   asc2hex
0480: 50 06                 jnc     dnldgh6
0482: 79 07                 mov     r1, #7
0484: 91 45                 acall   dnld_inc
0486: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
0488: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
0489: 11 75                 acall   cin
048B: 51 8F                 acall   upper
048D: B4 1B 02              cjne    a, #ESC, dnldgh8
0490: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
0492: B4 3A 02              cjne    a, #':', dnldgh9
0495: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
0497: 31 9F                 acall   asc2hex
0499: 50 06                 jnc     dnldghA
049B: 79 07                 mov     r1, #7
049D: 91 45                 acall   dnld_inc
049F: 80 E8                 sjmp    dnldgh7
                   dnldghA:
04A1: CA                    xch     a, r2
04A2: C4                    swap    a
04A3: 4A                    orl     a, r2
04A4: FA                    mov     r2, a
04A5: 2C                    add     a, r4           ; add into checksum
04A6: FC                    mov     r4, a
04A7: EA                    mov     a, r2           ; return value in acc
04A8: 22                    ret
                            
                   ; print out download summary
                   ; dnlds4 = "Summary:"
                   ; dnlds5 = " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                            
                   dnld_sum:
04A9: EE                    mov     a, r6
04AA: C0 E0                 push    acc
04AC: EF                    mov     a, r7
04AD: C0 E0                 push    acc
04AF: 90 0C A1              mov     dptr, #dnlds4
04B2: 11 BE                 acall   pcstr
04B4: 79 08                 mov     r1, #dnld_parm
04B6: 7E AC                 mov     r6, #dnlds5 & 0xff
04B8: 7F 0C                 mov     r7, #dnlds5 >> 8
04BA: B1 12                 acall   dnld_i0
04BC: 7E BF                 mov     r6, #dnlds6a & 0xff
04BE: 7F 0C                 mov     r7, #dnlds6a >> 8
04C0: B1 12                 acall   dnld_i0
04C2: 7E D2                 mov     r6, #dnlds6b & 0xff
04C4: 7F 0C                 mov     r7, #dnlds6b >> 8
04C6: B1 12                 acall   dnld_i0
                            
                   ; now print out error summary
                   ; dnlds7 = "Errors:"
                   ; dnlds8 = " bytes unable to write"
                   ; dnlds9 = " incorrect checksums"
                   ; dnlds10 = " unexpected begin of line"
                   ; dnlds11 = " unexpected hex digits"
                   ; dnlds12 = " unexpected non-hex digits"
                   ; dnlds13 = "No errors detected"
                            
                   dnld_err:
04C8: 7A 05                 mov     r2, #5
                   dnlder2:
04CA: 91 53                 acall   dnld_gp
04CC: 40 09                 jc      dnlder3                 ; any errors?
04CE: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
04D0: 90 0D 6F              mov     dptr, #dnlds13
04D3: 11 BE                 acall   pcstr
04D5: 80 25                 sjmp    dlnd_sum_done
                            
                   dnlder3:
                   ; there were errors, so now we print 'em
04D7: 90 0C E4              mov     dptr, #dnlds7
04DA: 11 BE                 acall   pcstr
                   ; but let's not be nasty... only print if necessary
04DC: 79 0E                 mov     r1, #(dnld_parm + 6)
04DE: 7E EE                 mov     r6, #dnlds8 & 0xff
04E0: 7F 0C                 mov     r7, #dnlds8 >> 8
04E2: B1 04                 acall   dnld_item
04E4: 7E 08                 mov     r6, #dnlds9 & 0xff
04E6: 7F 0D                 mov     r7, #dnlds9 >> 8
04E8: B1 04                 acall   dnld_item
04EA: 7E 1A                 mov     r6, #dnlds10 & 0xff
04EC: 7F 0D                 mov     r7, #dnlds10 >> 8
04EE: B1 04                 acall   dnld_item
04F0: 7E 37                 mov     r6, #dnlds11 & 0xff
04F2: 7F 0D                 mov     r7, #dnlds11 >> 8
04F4: B1 04                 acall   dnld_item
04F6: 7E 51                 mov     r6, #dnlds12 & 0xff
04F8: 7F 0D                 mov     r7, #dnlds12 >> 8
04FA: B1 04                 acall   dnld_item
                   dlnd_sum_done:
04FC: D0 E0                 pop     acc
04FE: FF                    mov     r7, a
04FF: D0 E0                 pop     acc
0501: FE                    mov     r6, a
0502: 01 A1                 ajmp    crlf
                            
                   dnld_item:
0504: 91 53                 acall   dnld_gp                 ; error conditions
0506: 50 09                 jnc     dnld_i3
                   dnld_i2:
0508: 11 8F                 acall   sspace
050A: 12 02 1C              lcall   pint16u
050D: 71 AE                 acall   r6r7todptr
050F: 11 BE                 acall   pcstr
                   dnld_i3:
0511: 22                    ret
                            
                   dnld_i0:
0512: 91 53                 acall   dnld_gp                 ; non-error conditi
0514: 80 F2                 sjmp    dnld_i2
                            
                   dnld_init:
                   ; init all dnld parms to zero.
0516: 78 08                 mov     r0, #dnld_parm
                   dnld0:
0518: 76 00                 mov     @r0, #0
051A: 08                    inc     r0
051B: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
051E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   jump:
051F: 90 0B 5F              mov     dptr, #prompt8
0522: 11 BE                 acall   pcstr
0524: 71 AE                 acall   r6r7todptr
0526: 31 CB                 acall   phex16
0528: 90 0A EE              mov     dptr, #prompt4
052B: 11 BE                 acall   pcstr
052D: 31 23                 acall   ghex16
052F: 20 D5 07              jb      psw.5, jump3
0532: 50 03                 jnc     jump2
0534: 02 08 44              ljmp    abort2
                   jump2:
0537: 71 B3                 acall   dptrtor6r7
                   jump3:
0539: 11 A1                 acall   crlf
053B: 90 0D 86              mov     dptr, #runs1
053E: 11 BE                 acall   pcstr
0540: 71 AE                 acall   r6r7todptr
                   jump_doit:
0542: E4                    clr     a
0543: F5 D0                 mov     psw, a
0545: 75 81 07              mov     sp, #sp_reset
0548: F5 F0                 mov     b, a
054A: 78 FF                 mov     r0, #0xff
                   clrintram:
054C: F6                    mov     @r0, a
054D: D8 FD                 djnz    r0, clrintram
054F: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:
0550: 7A 10                 mov     r2, #16                 ; number of lines t
0552: 11 BA                 acall   dcrlf
                   dump1:
0554: 71 AE                 acall   r6r7todptr
0556: 31 CB                 acall   phex16          ; tell 'em the memory locat
0558: 74 3A                 mov     a, #':'
055A: 11 AE                 acall   cout_sp
055C: 7B 10                 mov     r3, #16                 ; r3 counts # of by
055E: 71 AE                 acall   r6r7todptr
                   dump2:
0560: E0                    movx    a, @dptr
0561: A3                    inc     dptr
0562: 31 B9                 acall   phex            ; print each byte in hex
0564: 11 8F                 acall   sspace
0566: DB F8                 djnz    r3, dump2
0568: 11 B6                 acall   dspace          ; print a couple extra spac
056A: 7B 10                 mov     r3, #16
056C: 71 AE                 acall   r6r7todptr
                   dump3:
056E: E0                    movx    a, @dptr
056F: A3                    inc     dptr
0570: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
0572: B4 7F 01              cjne    a, #127, dump3b
0575: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
0576: 24 E0                 add     a, #224
0578: 40 01                 jc      dump4
057A: E4                    clr     a               ; avoid control characters
                   dump4:
057B: 24 20                 add     a, #32
057D: 11 87                 acall   cout
057F: DB ED                 djnz    r3, dump3
0581: 11 A1                 acall   crlf
0583: 71 B3                 acall   dptrtor6r7
0585: 11 7D                 acall   cinpoll
0587: 40 05                 jc      dump4b
0589: B4 1B 02              cjne    a, #ESC, dump4b
058C: 01 A1                 ajmp    crlf
                   dump4b:
058E: DA C4                 djnz    r2, dump1       ; loop back up to print nex
0590: 01 A1                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
0592: 90 0B E1              mov     dptr, #edits1
0595: 11 BE                 acall   pcstr
0597: 71 AE                 acall   r6r7todptr
                   edit1:
0599: 31 CB                 acall   phex16
059B: 74 3A                 mov     a, #':'
059D: 11 AE                 acall   cout_sp
059F: 74 28                 mov     a, #'('
05A1: 11 87                 acall   cout
05A3: 71 B3                 acall   dptrtor6r7
05A5: E0                    movx    a, @dptr
05A6: 31 B9                 acall   phex
05A8: 90 0B A3              mov     dptr, #prompt10
05AB: 11 BE                 acall   pcstr
05AD: 11 DF                 acall   ghex
05AF: 20 D5 0E              jb      psw.5, edit2
05B2: 40 0C                 jc      edit2
05B4: 71 AE                 acall   r6r7todptr
05B6: F0                    movx    @dptr, a
05B7: 11 A1                 acall   crlf
05B9: 71 AE                 acall   r6r7todptr
05BB: A3                    inc     dptr
05BC: 71 B3                 acall   dptrtor6r7
05BE: A1 99                 ajmp    edit1
                   edit2:
05C0: 90 0C 0A              mov     dptr, #edits2
05C3: 01 BE                 ajmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   dir:
05C5: 90 0B 7D              mov     dptr, #prompt9
05C8: 11 BE                 acall   pcstr
05CA: 78 15                 mov     r0, #21
                   dir0a:
05CC: 11 8F                 acall   sspace
05CE: D8 FC                 djnz    r0, dir0a
05D0: 90 0B 8E              mov     dptr, #prompt9b
05D3: 11 BE                 acall   pcstr
05D5: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
05D8: 12 09 7B              lcall   find            ; find the next program in 
05DB: 40 02                 jc      dir2
                   dir_end:
05DD: 01 A1                 ajmp    crlf            ; we're done if no more fou
                   dir2:
05DF: 11 B6                 acall   dspace
05E1: 75 82 20              mov     dpl, #32        ; print its name
05E4: 11 BE                 acall   pcstr
05E6: 75 82 20              mov     dpl, #32        ; how long is the name
05E9: 51 9C                 acall   lencstr
05EB: 74 21                 mov     a, #33
05ED: C3                    clr     c
05EE: 98                    subb    a, r0
05EF: F8                    mov     r0, a
05F0: 74 20                 mov     a, #SPACE       ; print the right # of spac
                   dir3:
05F2: 11 87                 acall   cout
05F4: D8 FC                 djnz    r0, dir3
05F6: 75 82 00              mov     dpl, #0
05F9: 31 CB                 acall   phex16          ; print the memory location
05FB: 78 06                 mov     r0, #6
05FD: 74 20                 mov     a, #SPACE
                   dir4:
05FF: 11 87                 acall   cout
0601: D8 FC                 djnz    r0, dir4
0603: 75 82 04              mov     dpl, #4                 ; now figure out wh
0606: E0                    movx    a, @dptr
0607: AA 83                 mov     r2, dph                 ; save this, we're 
                   dir5:
0609: B4 FE 05              cjne    a, #254, dir5b
060C: 90 0D F9              mov     dptr, #type1    ; it's an external command
060F: 80 18                 sjmp    dir7
                   dir5b:
0611: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
0614: 90 0E 12              mov     dptr, #type4    ; it's a startup routine
0617: 80 10                 sjmp    dir7
                   dir5c:
0619: B4 23 05              cjne    a, #35, dir5d
061C: 90 0E 0A              mov     dptr, #type2    ; it's an ordinary program
061F: 80 08                 sjmp    dir7
                   dir5d:
0621: B4 F9 02              cjne    a, #249, dir5e
0624: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
0626: 90 0E 1F              mov     dptr, #type5    ; who knows what the hell i
                   dir7:
0629: 11 BE                 acall   pcstr           ; print out the type
062B: 8A 83                 mov     dph, r2                 ; go back and find 
062D: 11 A1                 acall   crlf
062F: 74 DF                 mov     a, #(emem >> 8)
0631: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
0634: A1 DD                 ajmp    dir_end
                   dir8:
0636: 05 83                 inc     dph
0638: E5 83                 mov     a, dph
063A: B4 E0 9B              cjne    a, #((emem + 1) >> 8) & 0xff, dir1
063D: A1 DD                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
063F: 11 BA                 acall   dcrlf
0641: 7A FF                 mov     r2, #255        ; first print the menu, cou
0643: 90 10 00              mov     dptr, #bmem
0646: 15 83                 dec     dph
                   run2:
0648: 05 83                 inc     dph
064A: E5 83                 mov     a, dph
064C: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run2b
064F: 80 21                 sjmp    run3
                   run2b:
0651: 12 09 7B              lcall   find
0654: 50 1C                 jnc     run3            ; have we found 'em all??
0656: 75 82 04              mov     dpl, #4
0659: E0                    movx    a, @dptr
065A: 44 03                 orl     a, #00000011b
065C: F4                    cpl     a
065D: 60 E9                 jz      run2            ; this one doesn't run... f
065F: 11 B6                 acall   dspace
0661: 0A                    inc     r2
0662: 74 41                 mov     a, #'A'                 ; print the key to 
0664: 2A                    add     a, r2
0665: 11 AE                 acall   cout_sp
0667: 11 B2                 acall   dash_sp
0669: 75 82 20              mov     dpl, #32
066C: 11 BE                 acall   pcstr           ; and the command name
066E: 11 A1                 acall   crlf
0670: C1 48                 ajmp    run2            ; and continue doing this
                   run3:
0672: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
0675: 90 0B 02              mov     dptr, #prompt5
0678: 01 BE                 ajmp    pcstr
                   run4:
067A: 90 0A D6              mov     dptr, #prompt3  ; ask the big question!
067D: 11 BE                 acall   pcstr
067F: 74 41                 mov     a, #'A'
0681: 11 87                 acall   cout
0683: 11 98                 acall   dash
0685: 74 41                 mov     a, #'A'                 ; such user friendl
0687: 2A                    add     a, r2           ; even tell 'em the choices
0688: 11 87                 acall   cout
068A: 90 0A EE              mov     dptr, #prompt4
068D: 11 BE                 acall   pcstr
068F: 11 75                 acall   cin
0691: B4 1B 02              cjne    a, #ESC, run4aa         ; they they hit <ES
0694: 01 A1                 ajmp    crlf
                   run4aa:
0696: FB                    mov     r3, a
0697: 74 1F                 mov     a, #31
0699: C3                    clr     c
069A: 9A                    subb    a, r2
069B: EB                    mov     a, r3
069C: 40 02                 jc      run4a
069E: 51 8F                 acall   upper
                   run4a:
06A0: 11 87                 acall   cout
06A2: FB                    mov     r3, a
06A3: 11 A1                 acall   crlf
                   ; check to see if it's under 32, if so convert to uppercase
06A5: EB                    mov     a, r3
06A6: 24 BF                 add     a, #(256 - 'A')
06A8: 50 D0                 jnc     run4            ; if they typed less than '
06AA: FB                    mov     r3, a           ; R3 has the number they ty
06AB: EA                    mov     a, r2           ; A=R2 has the maximum numb
06AC: C3                    clr     c
06AD: 9B                    subb    a, r3
06AE: 40 CA                 jc      run4            ; if they typed over the ma
06B0: 0B                    inc     r3
06B1: 90 10 00              mov     dptr, #bmem
06B4: 15 83                 dec     dph
                   run5:
06B6: 05 83                 inc     dph
06B8: E5 83                 mov     a, dph
06BA: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run5b
06BD: 80 17                 sjmp    run8
                   run5b:
06BF: 12 09 7B              lcall   find
06C2: 50 12                 jnc     run8            ; Shouldn't ever do this ju
06C4: 75 82 04              mov     dpl, #4
06C7: E0                    movx    a, @dptr
06C8: 44 03                 orl     a, #00000011b
06CA: F4                    cpl     a
06CB: 60 E9                 jz      run5            ; this one doesn't run... f
06CD: DB E7                 djnz    r3, run5        ; count til we find the one
06CF: 11 A1                 acall   crlf
06D1: 75 82 40              mov     dpl, #64
06D4: A1 42                 ajmp    jump_doit
                   run8:
06D6: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
06D7: 90 0D C3              mov     dptr, #help1txt
06DA: 11 BE                 acall   pcstr
                            
06DC: 7C 3F                 mov     r4, #help_key
06DE: 90 0E 28              mov     dptr, #help_cmd
06E1: F1 72                 acall   help2
                            
06E3: 7C 4D                 mov     r4, #dir_key
06E5: 90 0E 37              mov     dptr, #dir_cmd
06E8: F1 72                 acall   help2
                            
06EA: 7C 52                 mov     r4, #run_key
06EC: 90 0E 45              mov     dptr, #run_cmd
06EF: F1 72                 acall   help2
                            
06F1: 7C 44                 mov     r4, #dnld_key
06F3: 90 0E 51              mov     dptr, #dnld_cmd
06F6: F1 72                 acall   help2
                            
06F8: 7C 55                 mov     r4, #upld_key
06FA: 90 0E 5A              mov     dptr, #upld_cmd
06FD: F1 72                 acall   help2
                            
06FF: 7C 4E                 mov     r4, #nloc_key
0701: 90 0E 61              mov     dptr, #nloc_cmd
0704: F1 72                 acall   help2
                            
0706: 7C 4A                 mov     r4, #jump_key
0708: 90 0E 6E              mov     dptr, #jump_cmd
070B: F1 72                 acall   help2
                            
070D: 7C 48                 mov     r4, #dump_key
070F: 90 0E 86              mov     dptr, #dump_cmd
0712: F1 72                 acall   help2
                            
0714: 7C 49                 mov     r4, #intm_key
0716: 90 0E 9F              mov     dptr, #intm_cmd
0719: F1 72                 acall   help2
                            
071B: 7C 45                 mov     r4, #edit_key
071D: 90 0E B8              mov     dptr, #edit_cmd
0720: F1 72                 acall   help2
                            
0722: 7C 43                 mov     r4, #clrm_key
0724: 90 0E CD              mov     dptr, #clrm_cmd
0727: F1 72                 acall   help2
                            
0729: 7C 42                 mov     r4, #baud_key
072B: 90 0F 12              mov     dptr, #baud_cmd
072E: F1 72                 acall   help2
                            
0730: 7C 57                 mov     r4, #crc16_key
0732: 90 0E E3              mov     dptr, #crc16_cmd
0735: F1 72                 acall   help2
                            
0737: 7C 3C                 mov     r4, #eio77_key
0739: 90 0E F3              mov     dptr, #eio77_cmd
073C: F1 72                 acall   help2
                            
073E: 7C 3E                 mov     r4, #dio77_key
0740: 90 0F 02              mov     dptr, #dio77_cmd
0743: F1 72                 acall   help2
                            
0745: 90 0D DC              mov     dptr, #help2txt
0748: 11 BE                 acall   pcstr
074A: 90 10 00              mov     dptr, #bmem
                   help3:
074D: 12 09 7B              lcall   find
0750: 50 1E                 jnc     help4
0752: 75 82 04              mov     dpl, #4
0755: E0                    movx    a, @dptr
0756: B4 FE 10              cjne    a, #254, help3a         ; only FE is an ext
0759: 11 B6                 acall   dspace
075B: 05 82                 inc     dpl
075D: E0                    movx    a, @dptr
075E: 11 AE                 acall   cout_sp
0760: 11 B2                 acall   dash_sp
0762: 75 82 20              mov     dpl, #32
0765: 11 BE                 acall   pcstr
0767: 11 A1                 acall   crlf
                   help3a:
0769: 05 83                 inc     dph
076B: E5 83                 mov     a, dph
076D: B4 E0 DD              cjne    a, #((emem + 1) >> 8) & 0xff, help3
                   help4:
0770: 01 A1                 ajmp    crlf
                   help2:
                   ; print 11 standard lines
0772: 11 B6                 acall   dspace          ; given key in R4 and name 
0774: EC                    mov     a, r4
0775: 11 AE                 acall   cout_sp
0777: 11 B2                 acall   dash_sp
0779: 11 BE                 acall   pcstr
077B: 01 A1                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   upld:
077D: 12 08 0A              lcall   get_mem
                   ; assume we've got the beginning address in r3/r2
                   ; and the final address in r5/r4 (r4=lsb)...
                   ; print out what we'll be doing
0780: 90 0D 9F              mov     dptr, #uplds3
0783: 11 BE                 acall   pcstr
0785: EB                    mov     a, r3
0786: 31 B9                 acall   phex
0788: EA                    mov     a, r2
0789: 31 B9                 acall   phex
078B: 90 0D BE              mov      dptr, #uplds4
078E: 11 BE                 acall   pcstr
0790: ED                    mov     a, r5
0791: 31 B9                 acall   phex
0793: EC                    mov     a, r4
0794: 31 B9                 acall   phex
0796: 11 A1                 acall   crlf
                   ; need to adjust end location by 1...
0798: 8D 83                 mov     dph, r5
079A: 8C 82                 mov     dpl, r4
079C: A3                    inc     dptr
079D: AC 82                 mov     r4, dpl
079F: AD 83                 mov     r5, dph
07A1: 90 0B 4E              mov     dptr, #prompt7
07A4: 11 BE                 acall   pcstr
07A6: 11 75                 acall   cin
07A8: B4 1B 03              cjne    a, #ESC, upld2e
07AB: 02 08 41              ljmp    abort_it
                   upld2e:
07AE: 11 BA                 acall   dcrlf
07B0: 8A 82                 mov     dpl, r2
07B2: 8B 83                 mov     dph, r3
                   upld3:
07B4: EC                    mov     a, r4           ; how many more bytes to ou
07B5: C3                    clr     c
07B6: 95 82                 subb    a, dpl
07B8: FA                    mov     r2, a
07B9: ED                    mov     a, r5
07BA: 95 83                 subb    a, dph
07BC: 70 09                 jnz     upld4           ; if >256 left, then do nex
07BE: EA                    mov     a, r2
07BF: 60 32                 jz      upld7           ; if we're all done
07C1: 54 F0                 anl     a, #11110000b
07C3: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
07C5: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
07C7: 7A 10                 mov     r2, #16
                   upld5:
07C9: 74 3A                 mov     a, #':'                 ; begin the line
07CB: 11 87                 acall   cout
07CD: EA                    mov     a, r2
07CE: 31 B9                 acall   phex            ; output # of data bytes
07D0: 31 CB                 acall   phex16          ; output memory location
07D2: E5 83                 mov     a, dph
07D4: 25 82                 add     a, dpl
07D6: 2A                    add     a, r2
07D7: FB                    mov     r3, a           ; r3 will become checksum
07D8: E4                    clr     a
07D9: 31 B9                 acall   phex            ; output 00 code for data
                   upld6:
07DB: E0                    movx    a, @dptr
07DC: 31 B9                 acall   phex            ; output each byte
07DE: 2B                    add     a, r3
07DF: FB                    mov     r3, a
07E0: A3                    inc     dptr
07E1: DA F8                 djnz    r2, upld6       ; do however many bytes we 
07E3: EB                    mov     a, r3
07E4: F4                    cpl     a
07E5: 04                    inc     a
07E6: 31 B9                 acall   phex            ; and finally the checksum
07E8: 11 A1                 acall   crlf
07EA: 11 7D                 acall   cinpoll
07EC: 40 C6                 jc      upld3
07EE: B4 1B C3              cjne    a, #ESC, upld3
07F1: 80 4E                 sjmp    abort_it
                   upld7:
07F3: 74 3A                 mov     a, #':'
07F5: 11 87                 acall   cout
07F7: E4                    clr     a
07F8: 31 B9                 acall   phex
07FA: 31 B9                 acall   phex
07FC: 31 B9                 acall   phex
07FE: 04                    inc     a
07FF: 12 01 B9              lcall   phex
0802: 74 FF                 mov     a, #255
0804: 12 01 B9              lcall   phex
                   upld8:
0807: 02 00 BA              ljmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
080A: 12 00 BA              lcall   dcrlf
080D: 90 0B B1              mov     dptr, #beg_str
0810: 12 00 BE              lcall   pcstr
0813: 12 01 23              lcall   ghex16
0816: 40 25                 jc      pop_it
0818: 20 D5 22              jb      psw.5, pop_it
081B: C0 83                 push    dph
081D: C0 82                 push    dpl
081F: 12 00 A1              lcall   crlf
0822: 90 0B C2              mov     dptr, #end_str
0825: 12 00 BE              lcall   pcstr
0828: 12 01 23              lcall   ghex16
082B: AD 83                 mov     r5, dph
082D: AC 82                 mov     r4, dpl
082F: D0 E0                 pop     acc
0831: FA                    mov     r2, a
0832: D0 E0                 pop     acc
0834: FB                    mov     r3, a
0835: 40 06                 jc      pop_it
0837: 20 D5 03              jb      psw.5, pop_it
083A: 02 00 A1              ljmp    crlf
                   pop_it:
083D: D0 E0                 pop     acc
083F: D0 E0                 pop     acc
                   abort_it:
0841: 12 00 A1              lcall   crlf
                   abort2:
0844: 90 0A B2              mov     dptr, #abort
0847: 02 00 BE              ljmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
084A: 90 0B 3B              mov     dptr, #prompt6
084D: 12 00 BE              lcall   pcstr
0850: 12 01 23              lcall   ghex16
0853: 40 EF                 jc      abort2
0855: 20 D5 EC              jb      psw.5, abort2
0858: 12 03 B3              lcall   dptrtor6r7
085B: 02 00 BA              ljmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
085E: 11 0A                 acall   get_mem
0860: 90 0B D2              mov     dptr, #sure
0863: 12 00 BE              lcall   pcstr
0866: 12 00 75              lcall   cin
0869: 12 00 87              lcall   cout
086C: 12 02 8F              lcall   upper
086F: B4 59 CF              cjne    a, #'Y', abort_it
0872: 12 00 BA              lcall   dcrlf
                   clrm2:
                   ; now we actually do it
0875: 8B 83                 mov     dph, r3
0877: 8A 82                 mov     dpl, r2
                   clrm3:
0879: E4                    clr     a
087A: F0                    movx    @dptr, a
087B: ED                    mov     a, r5
087C: B5 83 05              cjne    a, dph, clrm4
087F: EC                    mov     a, r4
0880: B5 82 01              cjne    a, dpl, clrm4
0883: 22                    ret
                   clrm4:
0884: A3                    inc     dptr
0885: 80 F2                 sjmp    clrm3
                   
                   ;---------------------------------------------------------;
                   
                   reset_baud:
0887: 12 00 BA              lcall   dcrlf
088A: 90 0F 22              mov     dptr, #baudprompt
088D: 12 00 BE              lcall   pcstr
0890: 12 01 23              lcall   ghex16
0893: 40 2B                 jc      bailout
0895: 20 D5 28              jb      psw.5, bailout
0898: C0 82                 push    dpl
089A: C0 83                 push    dph
089C: 12 00 A1              lcall   crlf
089F: 90 0B D2              mov     dptr, #sure
08A2: 12 00 BE              lcall   pcstr
08A5: 12 00 75              lcall   cin
08A8: 12 00 87              lcall   cout
08AB: 12 02 8F              lcall   upper
08AE: B4 59 0B              cjne    a, #'Y', bailout_pop
08B1: 12 00 BA              lcall   dcrlf
08B4: D0 F0                 pop     b
08B6: D0 E0                 pop     acc
08B8: 12 0A 7E              lcall   setbaud
08BB: 22                    ret
                   bailout_pop:
08BC: D0 E0                 pop     acc
08BE: D0 E0                 pop     acc
                   bailout:
08C0: 12 00 A1              lcall   crlf
08C3: 90 0A B2              mov     dptr, #abort
08C6: 02 00 BE              ljmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
08C9:              .equ     initial, 0xffff
08C9:              .equ     final, 0x0000
08C9:              .equ     poly, 0x1021
                   
                   calc_crc16:
08C9: 11 0A                 acall   get_mem
08CB: 12 00 A1              lcall   crlf
08CE: 12 03 AE              lcall   r6r7todptr
08D1: C0 82                 push    dpl
08D3: C0 83                 push    dph
08D5: 8A 82                 mov     dpl, r2
08D7: 8B 83                 mov     dph, r3
08D9: 7E FF                 mov     r6, #(initial & 0xff)
08DB: 7F FF                 mov     r7, #(initial >> 8)
08DD: 12 09 0B              lcall   init_crc16
08E0: 7E 21                 mov     r6, #(poly & 0xff)
08E2: 7F 10                 mov     r7, #(poly >> 8)
                   calc_loop:
08E4: E0                    movx    a, @dptr
08E5: 12 09 1F              lcall   update_crc16
08E8: ED                    mov     a, r5
08E9: B5 83 1C              cjne    a, dph, calc_skip
08EC: EC                    mov     a, r4
08ED: B5 82 18              cjne    a, dpl, calc_skip
08F0: 7E 00                 mov     r6, #(final & 0xff)
08F2: 7F 00                 mov     r7, #(final >> 8)
08F4: 12 09 14              lcall   finish_crc16
08F7: 8A 82                 mov     dpl, r2
08F9: 8B 83                 mov     dph, r3
08FB: 12 01 CB              lcall   phex16
08FE: D0 83                 pop     dph
0900: D0 82                 pop     dpl
0902: 12 03 B3              lcall   dptrtor6r7
0905: 02 00 BA              ljmp    dcrlf
                   calc_skip:
0908: A3                    inc     dptr
0909: 80 D9                 sjmp    calc_loop
                   
                   init_crc16:
090B: C0 E0                 push    acc
090D: EE                    mov     a, r6
090E: FA                    mov     r2, a
090F: EF                    mov     a, r7
0910: FB                    mov     r3, a
0911: D0 E0                 pop     acc
0913: 22                    ret
                   
                   finish_crc16:
0914: C0 E0                 push    acc
0916: EA                    mov     a, r2
0917: 6E                    xrl     a, r6
0918: FA                    mov     r2, a
0919: EB                    mov     a, r3
091A: 6F                    xrl     a, r7
091B: FB                    mov     r3, a
091C: D0 E0                 pop     acc
091E: 22                    ret
                   
                   update_crc16:
091F: C0 F0                 push    b
0921: F5 F0                 mov     b, a
0923: 74 80                 mov     a, #0x80
                   loop:
0925: F8                    mov     r0, a
0926: E5 F0                 mov     a, b
0928: 58                    anl     a, r0
0929: 60 02                 jz      skip0
092B: 74 01                 mov     a, #1
                   skip0:
092D: F9                    mov     r1, a
092E: EB                    mov     a, r3
092F: 23                    rl      a
0930: 54 01                 anl     a, #1
0932: 69                    xrl     a, r1
0933: F9                    mov     r1, a
0934: EA                    mov     a, r2
0935: 2A                    add     a, r2
0936: FA                    mov     r2, a
0937: EB                    mov     a, r3
0938: 33                    rlc     a
0939: FB                    mov     r3, a
093A: E9                    mov     a, r1
093B: 60 06                 jz      skip1
093D: EA                    mov     a, r2
093E: 6E                    xrl     a, r6
093F: FA                    mov     r2, a
0940: EB                    mov     a, r3
0941: 6F                    xrl     a, r7
0942: FB                    mov     r3, a
                   skip1:
0943: E8                    mov     a, r0
0944: C3                    clr     c
0945: 13                    rrc     a
0946: 70 DD                 jnz     loop
0948: D0 F0                 pop     b
094A: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   intm:
094B: 12 00 A1              lcall   crlf
094E: 78 00                 mov     r0, #0
                   intm2:
0950: 12 00 A1              lcall   crlf
0953: E8                    mov     a, r0
0954: 12 01 B9              lcall   phex
0957: 74 3A                 mov     a, #':'
0959: 12 00 87              lcall   cout
                   intm3:
095C: 12 00 8F              lcall   sspace
095F: E6                    mov     a, @r0
0960: 12 01 B9              lcall   phex
0963: 08                    inc     r0
0964: B8 00 03              cjne    r0, #0, intm4
0967: 02 00 BA              ljmp    dcrlf
                   intm4:
096A: E8                    mov     a, r0
096B: 54 0F                 anl     a, #00001111b
096D: 70 ED                 jnz     intm3
096F: 80 DF                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
0971: C2 97                 clr     p1.7
0973: 02 00 A1              ljmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   dio77:
0976: D2 97                 setb    p1.7
0978: 02 00 A1              ljmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
097B: 75 82 00              mov     dpl, #0
097E: E0                    movx    a, @dptr
097F: B4 A5 14              cjne    a, #0xa5, find3
0982: A3                    inc     dptr
0983: E0                    movx    a, @dptr
0984: B4 E5 0F              cjne    a, #0xe5, find3
0987: A3                    inc     dptr
0988: E0                    movx    a, @dptr
0989: B4 E0 0A              cjne    a, #0xe0, find3
098C: A3                    inc     dptr
098D: E0                    movx    a, @dptr
098E: B4 A5 05              cjne    a, #0xa5, find3
0991: 75 82 00              mov     dpl, #0                 ; found one here!
0994: D3                    setb    c
0995: 22                    ret
                   find3:
0996: 74 DF                 mov     a, #(emem >> 8)
0998: B5 83 02              cjne    a, dph, find4   ; did we just check the end
099B: C3                    clr     c
099C: 22                    ret
                   find4:
099D: 05 83                 inc     dph             ; keep on searching
099F: 80 DA                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   ; copy from c [lssrc:hssrc, lesrc:hesrc) to x [ldst:hdst, ..
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpycx:
09A1: 8A 82                 mov     dpl, r2
09A3: 8B 83                 mov     dph, r3
09A5: E4                    clr     a
09A6: 93                    movc    a, @a+dptr
09A7: A3                    inc     dptr
09A8: AA 82                 mov     r2, dpl
09AA: AB 83                 mov     r3, dph
09AC: 8E 82                 mov     dpl, r6
09AE: 8F 83                 mov     dph, r7
09B0: F0                    movx    @dptr, a
09B1: A3                    inc     dptr
09B2: AE 82                 mov     r6, dpl
09B4: AF 83                 mov     r7, dph
09B6: EA                    mov     a, r2
09B7: 8C F0                 mov     b, r4
09B9: B5 F0 E5              cjne    a, b, cpycx
09BC: EB                    mov     a, r3
09BD: 8D F0                 mov     b, r5
09BF: B5 F0 DF              cjne    a, b, cpycx
09C2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; copy from x [lssrc:hssrc, lesrc:hesrc) to x [ldst:hdst, ..
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpyxx:
09C3: 8A 82                 mov     dpl, r2
09C5: 8B 83                 mov     dph, r3
09C7: E0                    movx    a, @dptr
09C8: A3                    inc     dptr
09C9: AA 82                 mov     r2, dpl
09CB: AB 83                 mov     r3, dph
09CD: 8E 82                 mov     dpl, r6
09CF: 8F 83                 mov     dph, r7
09D1: F0                    movx    @dptr, a
09D2: A3                    inc     dptr
09D3: AE 82                 mov     r6, dpl
09D5: AF 83                 mov     r7, dph
09D7: EA                    mov     a, r2
09D8: 8C F0                 mov     b, r4
09DA: B5 F0 E6              cjne    a, b, cpyxx
09DD: EB                    mov     a, r3
09DE: 8D F0                 mov     b, r5
09E0: B5 F0 E0              cjne    a, b, cpyxx
09E3: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                            ;-------- switch_shadow helper subroutine --------
                            switch_shadow:
09E4: 75 90 FE                      mov     p1, #mctrl_shadow
09E7: FF                            mov     r7, a
09E8: FF                            mov     r7, a
09E9: FF                            mov     r7, a
09EA: FF                            mov     r7, a
09EB: 22                            ret
                            switch_shadow_end:
                            ;-------- switch_shadow helper subroutine --------
                   
                   ; initialize the hardware on reset
                   ; copy flash to memory
                   
                   reset:
09EC: E4                    clr     a
09ED: F5 A8                 mov     ie, a
09EF: F5 B8                 mov     ip, a
09F1: 75 90 FF              mov     p1, #mctrl_reset
09F4: FF                    mov     r7, a
09F5: FF                    mov     r7, a
09F6: FF                    mov     r7, a
09F7: FF                    mov     r7, a
09F8: 75 A0 FF              mov     p2, #p2_init
09FB: 75 D0 00              mov     psw, #psw_init
09FE: 75 81 17              mov     sp, #sp_init
0A01: 7A 00                 mov     r2, #0x00       ; lssrc
0A03: 7B 00                 mov     r3, #0x00       ; hssrc
0A05: 7C 00                 mov     r4, #0x00       ; lesrc
0A07: 7D 20                 mov     r5, #0x20       ; hesrc
0A09: 7E 00                 mov     r6, #0x00       ; ldst
0A0B: 7F 00                 mov     r7, #0x00       ; hdst
0A0D: 12 09 A1              lcall   cpycx
0A10: 7A E4                 mov     r2, #(switch_shadow & 0xff)     ; lssrc
0A12: 7B 09                 mov     r3, #(switch_shadow >> 8)       ; hssrc
0A14: 7C EC                 mov     r4, #(switch_shadow_end & 0xff)         ; l
0A16: 7D 09                 mov     r5, #(switch_shadow_end >> 8)   ; hesrc
0A18: 7E 00                 mov     r6, #(pgm & 0xff)       ; ldst
0A1A: 7F 20                 mov     r7, #(pgm >> 8)                 ; hdst
0A1C: 12 09 A1              lcall   cpycx
0A1F: 12 20 00              lcall   pgm             ; switch_shadow
                   ; initialize the serial port
0A22: 74 F7                 mov     a, #(bc & 0xff)         ; lsb
0A24: 75 F0 FF              mov     b, #(bc >> 8)   ; msb
0A27: 12 0A 7E              lcall   setbaud
                   ; run any user initialization programs in external memory
0A2A: 75 F0 F9              mov     b, #249
0A2D: 12 0A 52              lcall   stcode
                   ; run the start-up programs in external memory
0A30: 75 F0 FD              mov     b, #253
0A33: 12 0A 52              lcall   stcode
0A36: 12 00 A1              lcall   crlf
0A39: 12 00 A1              lcall   crlf
0A3C: 12 00 A1              lcall   crlf
0A3F: 12 00 A1              lcall   crlf
0A42: 90 0A 93              mov     dptr, #logon
0A45: 12 00 BE              lcall   pcstr
0A48: 12 05 C5              lcall   dir
0A4B: 7E 00                 mov     r6, #(pgm & 0xff)
0A4D: 7F 20                 mov     r7, #(pgm >> 8)
0A4F: 02 02 BB              ljmp    menu
                   
                   stcode:
0A52: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
0A55: 12 09 7B              lcall   find
0A58: 50 23                 jnc     stcode5
0A5A: 75 82 04              mov     dpl, #4
0A5D: E0                    movx    a, @dptr
0A5E: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
0A61: C0 F0                 push    b
0A63: C0 83                 push    dph
0A65: 74 72                 mov     a, #(stcode3 & 0xff)
0A67: C0 E0                 push    acc
0A69: 74 0A                 mov     a, #(stcode3 >> 8)
0A6B: C0 E0                 push    acc
0A6D: 75 82 40              mov     dpl, #64
0A70: E4                    clr     a
0A71: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
0A72: D0 83                 pop     dph             ; hopefully it'll return to
0A74: D0 F0                 pop     b
                   stcode4:
0A76: 05 83                 inc     dph
0A78: E5 83                 mov     a, dph
0A7A: B4 E0 D8              cjne    a, #((emem + 1) >> 8) & 0xff, stcode2
                   stcode5:
0A7D: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   setbaud:
0A7E: C2 CA                 clr     tr2
0A80: F5 CC                 mov     tl2, a
0A82: 85 F0 CD              mov     th2, b
0A85: F5 CA                 mov     rcap2l, a
0A87: 85 F0 CB              mov     rcap2h, b
0A8A: 75 C8 30              mov     t2con, #00110000b
0A8D: 75 98 52              mov     scon, #01010010b
0A90: D2 CA                 setb    tr2
0A92: 22                    ret
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Strings                                          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   logon:
0A93: 50 41 55 4C 
      4D 4F 4E 32 
      20 76 32 2E 
      31 61 62 20 
      32 30 32 34 
      31 30 32 34 
      30 30 0D 0A 
      0D 0A 00              .db     "PAULMON2 v2.1ab 2024102400\r\n\r\n", 0
                   abort:
0AB2: 20 20 43 6F 
      6D 6D 61 6E 
      64 20 61 62 
      6F 72 74 65 
      64 0D 0A 0D 
      0A 00                 .db     "  Command aborted\r\n\r\n", 0
                   prompt1:
0AC8: 4C 6F 63 61 
      74 69 6F 6E 
      3A 00                 .db     "Location:", 0
                   prompt2:
0AD2: 20 3E 20 00 
                            .db     " > ", 0
                   prompt3:
0AD6: 53 65 6C 65 
      63 74 20 70 
      72 6F 67 72 
      61 6D 20 74 
      6F 20 72 75 
      6E 20 28 00 
                            .db     "Select program to run (", 0
                   prompt4:
0AEE: 29 20 6F 72 
      20 45 53 43 
      20 74 6F 20 
      61 62 6F 72 
      74 3A 20 00 
                            .db     ") or ESC to abort: ", 0
                   prompt5:
0B02: 4E 6F 20 70 
      72 6F 67 72 
      61 6D 20 68 
      65 61 64 65 
      72 73 20 66 
      6F 75 6E 64 
      20 69 6E 20 
      6D 65 6D 6F 
      72 79 2C 20 
      75 73 65 20 
      4A 55 4D 50 
      20 69 6E 73 
      74 65 61 64 
      0D 0A 0D 0A 
      00                    .db     "No program headers found in memory, use JU
                   prompt6:
0B3B: 0D 0A 0D 0A 
      4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      3A 20 00              .db     "\r\n\r\nNew location: ", 0
                   prompt7:
0B4E: 50 72 65 73 
      73 20 61 6E 
      79 20 6B 65 
      79 2E 2E 2E 
      00                    .db     "Press any key...", 0
                   prompt8:
0B5F: 0D 0A 0D 0A 
      4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 20 
      28 00                 .db     "\r\n\r\nJump to memory location (", 0
                   prompt9:
0B7D: 0D 0A 0D 0A 
      50 72 6F 67 
      72 61 6D 20 
      4E 61 6D 65 
      00                    .db     "\r\n\r\nProgram Name", 0
                   prompt9b:
0B8E: 4C 6F 63 61 
      74 69 6F 6E 
      20 20 20 20 
      20 20 54 79 
      70 65 0D 0A 
      00                    .db     "Location      Type\r\n", 0
                   prompt10:
0BA3: 29 20 4E 65 
      77 20 76 61 
      6C 75 65 3A 
      20 00                 .db     ") New value: ", 0
                   beg_str:
0BB1: 46 69 72 73 
      74 20 6C 6F 
      63 61 74 69 
      6F 6E 3A 20 
      00                    .db     "First location: ", 0
                   end_str:
0BC2: 4C 61 73 74 
      20 6C 6F 63 
      61 74 69 6F 
      6E 3A 20 00 
                            .db     "Last location: ", 0
                   sure:
0BD2: 41 72 65 20 
      79 6F 75 20 
      73 75 72 65 
      3F 20 00              .db     "Are you sure? ", 0
                   edits1:
0BE1: 0D 0A 0D 0A 
      45 64 69 74 
      69 6E 67 20 
      65 78 74 65 
      72 6E 61 6C 
      20 52 41 4D 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      00                    .db     "\r\n\r\nEditing external RAM, ESC to abort
                   edits2:
0C0A: 20 20 45 64 
      69 74 69 6E 
      67 20 63 6F 
      6D 70 6C 65 
      74 65 2C 20 
      74 68 69 73 
      20 6C 6F 63 
      61 74 69 6F 
      6E 20 75 6E 
      63 68 61 6E 
      67 65 64 0D 
      0A 0D 0A 00 
                            .db     "  Editing complete, this location unchange
                   dnlds1:
0C3A: 0D 0A 0D 0A 
      42 65 67 69 
      6E 20 74 72 
      61 6E 73 66 
      65 72 20 6F 
      66 20 49 6E 
      74 65 6C 20 
      68 65 78 20 
      66 69 6C 65 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      0D 0A 00              .db     "\r\n\r\nBegin transfer of Intel hex file, 
                   dnlds2:
0C71: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 61 
      62 6F 72 74 
      65 64 0D 0A 
      0D 0A 00              .db     "\r\nDownload aborted\r\n\r\n", 0
                   dnlds3:
0C88: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 63 
      6F 6D 70 6C 
      65 74 65 64 
      0D 0A 0D 0A 
      00                    .db     "\r\nDownload completed\r\n\r\n", 0
                   dnlds4:
0CA1: 53 75 6D 6D 
      61 72 79 3A 
      0D 0A 00              .db     "Summary:\r\n", 0
                   dnlds5:
0CAC: 20 20 6C 69 
      6E 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  lines received\r\n", 0
                   dnlds6a:
0CBF: 20 20 62 79 
      74 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  bytes received\r\n", 0
                   dnlds6b:
0CD2: 20 20 62 79 
      74 65 73 20 
      77 72 69 74 
      74 65 6E 0D 
      0A 00                 .db     "  bytes written\r\n", 0
                   dnlds7:
0CE4: 45 72 72 6F 
      72 73 3A 0D 
      0A 00                 .db     "Errors:\r\n", 0
                   dnlds8:
0CEE: 20 20 62 79 
      74 65 73 20 
      75 6E 61 62 
      6C 65 20 74 
      6F 20 77 72 
      69 74 65 0D 
      0A 00                 .db     "  bytes unable to write\r\n", 0
                   dnlds9:
0D08: 20 20 62 61 
      64 20 63 68 
      65 63 6B 73 
      75 6D 73 0D 
      0A 00                 .db     "  bad checksums\r\n", 0
                   dnlds10:
0D1A: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 62 65 67 
      69 6E 20 6F 
      66 20 6C 69 
      6E 65 0D 0A 
      00                    .db     "  unexpected begin of line\r\n", 0
                   dnlds11:
0D37: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected hex digits\r\n", 0
                   dnlds12:
0D51: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 6E 6F 6E 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected non hex digits\r\n", 0
                   dnlds13:
0D6F: 4E 6F 20 65 
      72 72 6F 72 
      73 20 64 65 
      74 65 63 74 
      65 64 0D 0A 
      0D 0A 00              .db     "No errors detected\r\n\r\n", 0
                   runs1:
0D86: 0D 0A 52 75 
      6E 6E 69 6E 
      67 20 70 72 
      6F 67 72 61 
      6D 2E 2E 2E 
      0D 0A 0D 0A 
      00                    .db     "\r\nRunning program...\r\n\r\n", 0
                   uplds3:
0D9F: 0D 0A 53 65 
      6E 64 69 6E 
      67 20 49 6E 
      74 65 6C 20 
      68 65 78 20 
      66 69 6C 65 
      20 66 72 6F 
      6D 20 00              .db     "\r\nSending Intel hex file from ", 0
                   uplds4:
0DBE: 20 74 6F 20 
      00                    .db     " to ", 0
                   help1txt:
0DC3: 0D 0A 0D 0A 
      53 74 61 6E 
      64 61 72 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\n\r\nStandard commands:\r\n", 0
                   help2txt:
0DDC: 0D 0A 55 73 
      65 72 20 69 
      6E 73 74 61 
      6C 6C 65 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\nUser installed commands:\r\n", 0
                   type1:
0DF9: 45 78 74 65 
      72 6E 61 6C 
      20 63 6F 6D 
      6D 61 6E 64 
      00                    .db     "External command", 0
                   type2:
0E0A: 50 72 6F 67 
      72 61 6D 00 
                            .db     "Program", 0
                   type4:
0E12: 53 74 61 72 
      74 75 70 20 
      63 6F 64 65 
      00                    .db     "Startup code", 0
                   type5:
0E1F: 3F 3F 3F 00 
                            .db     "???", 0
                   help_cmd2:
0E23: 48 65 6C 70 
      00                    .db     "Help", 0
                   help_cmd:
0E28: 54 68 69 73 
      20 68 65 6C 
      70 20 6C 69 
      73 74 00              .db     "This help list", 0
                   dir_cmd:
0E37: 4C 69 73 74 
      20 70 72 6F 
      67 72 61 6D 
      73 00                 .db     "List programs", 0
                   run_cmd:
0E45: 52 75 6E 20 
      70 72 6F 67 
      72 61 6D 00 
                            .db     "Run program", 0
                   dnld_cmd:
0E51: 44 6F 77 6E 
      6C 6F 61 64 
      00                    .db     "Download", 0
                   upld_cmd:
0E5A: 55 70 6C 6F 
      61 64 00              .db     "Upload", 0
                   nloc_cmd:
0E61: 4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      00                    .db     "New location", 0
                   jump_cmd:
0E6E: 4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 00 
                            .db     "Jump to memory location", 0
                   dump_cmd:
0E86: 48 65 78 20 
      64 75 6D 70 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump external memory", 0
                   intm_cmd:
0E9F: 48 65 78 20 
      64 75 6D 70 
      20 69 6E 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump internal memory", 0
                   edit_cmd:
0EB8: 45 64 69 74 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Edit external memory", 0
                   clrm_cmd:
0ECD: 43 6C 65 61 
      72 20 65 78 
      74 65 72 6E 
      61 6C 20 6D 
      65 6D 6F 72 
      79 00                 .db     "Clear external memory", 0
                   crc16_cmd:
0EE3: 43 61 6C 63 
      75 6C 61 74 
      65 20 43 52 
      43 31 36 00 
                            .db     "Calculate CRC16", 0
                   eio77_cmd:
0EF3: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   dio77_cmd:
0F02: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                   baud_cmd:
0F12: 52 65 73 65 
      74 20 62 61 
      75 64 20 72 
      61 74 65 00 
                            .db     "Reset baud rate", 0
                   baudprompt:
0F22: 45 6E 74 65 
      72 20 6E 65 
      77 20 62 61 
      75 64 20 63 
      6F 6E 73 74 
      3A 20 00              .db     "Enter new baud const: ", 0
0F39: 45 6E 74 65 
      72 20 6E 65 
      77 20 62 61 
      75 64 20 63 
      6F 6E 73 74 
      3A 20 00              .db     "Enter new baud const: ", 0
