                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sio
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CY
                                     12 	.globl _AC
                                     13 	.globl _F0
                                     14 	.globl _RS1
                                     15 	.globl _RS0
                                     16 	.globl _OV
                                     17 	.globl _FL
                                     18 	.globl _P
                                     19 	.globl _TF2
                                     20 	.globl _EXF2
                                     21 	.globl _RCLK
                                     22 	.globl _TCLK
                                     23 	.globl _EXEN2
                                     24 	.globl _TR2
                                     25 	.globl _C_T2
                                     26 	.globl _CP_RL2
                                     27 	.globl _T2CON_7
                                     28 	.globl _T2CON_6
                                     29 	.globl _T2CON_5
                                     30 	.globl _T2CON_4
                                     31 	.globl _T2CON_3
                                     32 	.globl _T2CON_2
                                     33 	.globl _T2CON_1
                                     34 	.globl _T2CON_0
                                     35 	.globl _PT2
                                     36 	.globl _PS
                                     37 	.globl _PT1
                                     38 	.globl _PX1
                                     39 	.globl _PT0
                                     40 	.globl _PX0
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD
                                     48 	.globl _RXD
                                     49 	.globl _P3_7
                                     50 	.globl _P3_6
                                     51 	.globl _P3_5
                                     52 	.globl _P3_4
                                     53 	.globl _P3_3
                                     54 	.globl _P3_2
                                     55 	.globl _P3_1
                                     56 	.globl _P3_0
                                     57 	.globl _EA
                                     58 	.globl _ET2
                                     59 	.globl _ES
                                     60 	.globl _ET1
                                     61 	.globl _EX1
                                     62 	.globl _ET0
                                     63 	.globl _EX0
                                     64 	.globl _P2_7
                                     65 	.globl _P2_6
                                     66 	.globl _P2_5
                                     67 	.globl _P2_4
                                     68 	.globl _P2_3
                                     69 	.globl _P2_2
                                     70 	.globl _P2_1
                                     71 	.globl _P2_0
                                     72 	.globl _SM0
                                     73 	.globl _SM1
                                     74 	.globl _SM2
                                     75 	.globl _REN
                                     76 	.globl _TB8
                                     77 	.globl _RB8
                                     78 	.globl _TI
                                     79 	.globl _RI
                                     80 	.globl _T2EX
                                     81 	.globl _T2
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _B
                                    107 	.globl _A
                                    108 	.globl _ACC
                                    109 	.globl _PSW
                                    110 	.globl _TH2
                                    111 	.globl _TL2
                                    112 	.globl _RCAP2H
                                    113 	.globl _RCAP2L
                                    114 	.globl _T2MOD
                                    115 	.globl _T2CON
                                    116 	.globl _IP
                                    117 	.globl _P3
                                    118 	.globl _IE
                                    119 	.globl _P2
                                    120 	.globl _SBUF
                                    121 	.globl _SCON
                                    122 	.globl _P1
                                    123 	.globl _TH1
                                    124 	.globl _TH0
                                    125 	.globl _TL1
                                    126 	.globl _TL0
                                    127 	.globl _TMOD
                                    128 	.globl _TCON
                                    129 	.globl _PCON
                                    130 	.globl _DPH
                                    131 	.globl _DPL
                                    132 	.globl _SP
                                    133 	.globl _P0
                                    134 	.globl _putchar
                                    135 	.globl _getchar
                                    136 	.globl _getchar_poll
                                    137 	.globl _printstr
                                    138 	.globl _print8bin
                                    139 	.globl _print16bin
                                    140 	.globl _print32bin
                                    141 	.globl _print8x
                                    142 	.globl _print16x
                                    143 	.globl _print32x
                                    144 ;--------------------------------------------------------
                                    145 ; special function registers
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0	=	0x0080
                           000081   150 _SP	=	0x0081
                           000082   151 _DPL	=	0x0082
                           000083   152 _DPH	=	0x0083
                           000087   153 _PCON	=	0x0087
                           000088   154 _TCON	=	0x0088
                           000089   155 _TMOD	=	0x0089
                           00008A   156 _TL0	=	0x008a
                           00008B   157 _TL1	=	0x008b
                           00008C   158 _TH0	=	0x008c
                           00008D   159 _TH1	=	0x008d
                           000090   160 _P1	=	0x0090
                           000098   161 _SCON	=	0x0098
                           000099   162 _SBUF	=	0x0099
                           0000A0   163 _P2	=	0x00a0
                           0000A8   164 _IE	=	0x00a8
                           0000B0   165 _P3	=	0x00b0
                           0000B8   166 _IP	=	0x00b8
                           0000C8   167 _T2CON	=	0x00c8
                           0000C9   168 _T2MOD	=	0x00c9
                           0000CA   169 _RCAP2L	=	0x00ca
                           0000CB   170 _RCAP2H	=	0x00cb
                           0000CC   171 _TL2	=	0x00cc
                           0000CD   172 _TH2	=	0x00cd
                           0000D0   173 _PSW	=	0x00d0
                           0000E0   174 _ACC	=	0x00e0
                           0000E0   175 _A	=	0x00e0
                           0000F0   176 _B	=	0x00f0
                                    177 ;--------------------------------------------------------
                                    178 ; special function bits
                                    179 ;--------------------------------------------------------
                                    180 	.area RSEG    (ABS,DATA)
      000000                        181 	.org 0x0000
                           000080   182 _P0_0	=	0x0080
                           000081   183 _P0_1	=	0x0081
                           000082   184 _P0_2	=	0x0082
                           000083   185 _P0_3	=	0x0083
                           000084   186 _P0_4	=	0x0084
                           000085   187 _P0_5	=	0x0085
                           000086   188 _P0_6	=	0x0086
                           000087   189 _P0_7	=	0x0087
                           000088   190 _IT0	=	0x0088
                           000089   191 _IE0	=	0x0089
                           00008A   192 _IT1	=	0x008a
                           00008B   193 _IE1	=	0x008b
                           00008C   194 _TR0	=	0x008c
                           00008D   195 _TF0	=	0x008d
                           00008E   196 _TR1	=	0x008e
                           00008F   197 _TF1	=	0x008f
                           000090   198 _P1_0	=	0x0090
                           000091   199 _P1_1	=	0x0091
                           000092   200 _P1_2	=	0x0092
                           000093   201 _P1_3	=	0x0093
                           000094   202 _P1_4	=	0x0094
                           000095   203 _P1_5	=	0x0095
                           000096   204 _P1_6	=	0x0096
                           000097   205 _P1_7	=	0x0097
                           000090   206 _T2	=	0x0090
                           000091   207 _T2EX	=	0x0091
                           000098   208 _RI	=	0x0098
                           000099   209 _TI	=	0x0099
                           00009A   210 _RB8	=	0x009a
                           00009B   211 _TB8	=	0x009b
                           00009C   212 _REN	=	0x009c
                           00009D   213 _SM2	=	0x009d
                           00009E   214 _SM1	=	0x009e
                           00009F   215 _SM0	=	0x009f
                           0000A0   216 _P2_0	=	0x00a0
                           0000A1   217 _P2_1	=	0x00a1
                           0000A2   218 _P2_2	=	0x00a2
                           0000A3   219 _P2_3	=	0x00a3
                           0000A4   220 _P2_4	=	0x00a4
                           0000A5   221 _P2_5	=	0x00a5
                           0000A6   222 _P2_6	=	0x00a6
                           0000A7   223 _P2_7	=	0x00a7
                           0000A8   224 _EX0	=	0x00a8
                           0000A9   225 _ET0	=	0x00a9
                           0000AA   226 _EX1	=	0x00aa
                           0000AB   227 _ET1	=	0x00ab
                           0000AC   228 _ES	=	0x00ac
                           0000AD   229 _ET2	=	0x00ad
                           0000AF   230 _EA	=	0x00af
                           0000B0   231 _P3_0	=	0x00b0
                           0000B1   232 _P3_1	=	0x00b1
                           0000B2   233 _P3_2	=	0x00b2
                           0000B3   234 _P3_3	=	0x00b3
                           0000B4   235 _P3_4	=	0x00b4
                           0000B5   236 _P3_5	=	0x00b5
                           0000B6   237 _P3_6	=	0x00b6
                           0000B7   238 _P3_7	=	0x00b7
                           0000B0   239 _RXD	=	0x00b0
                           0000B1   240 _TXD	=	0x00b1
                           0000B2   241 _INT0	=	0x00b2
                           0000B3   242 _INT1	=	0x00b3
                           0000B4   243 _T0	=	0x00b4
                           0000B5   244 _T1	=	0x00b5
                           0000B6   245 _WR	=	0x00b6
                           0000B7   246 _RD	=	0x00b7
                           0000B8   247 _PX0	=	0x00b8
                           0000B9   248 _PT0	=	0x00b9
                           0000BA   249 _PX1	=	0x00ba
                           0000BB   250 _PT1	=	0x00bb
                           0000BC   251 _PS	=	0x00bc
                           0000BD   252 _PT2	=	0x00bd
                           0000C8   253 _T2CON_0	=	0x00c8
                           0000C9   254 _T2CON_1	=	0x00c9
                           0000CA   255 _T2CON_2	=	0x00ca
                           0000CB   256 _T2CON_3	=	0x00cb
                           0000CC   257 _T2CON_4	=	0x00cc
                           0000CD   258 _T2CON_5	=	0x00cd
                           0000CE   259 _T2CON_6	=	0x00ce
                           0000CF   260 _T2CON_7	=	0x00cf
                           0000C8   261 _CP_RL2	=	0x00c8
                           0000C9   262 _C_T2	=	0x00c9
                           0000CA   263 _TR2	=	0x00ca
                           0000CB   264 _EXEN2	=	0x00cb
                           0000CC   265 _TCLK	=	0x00cc
                           0000CD   266 _RCLK	=	0x00cd
                           0000CE   267 _EXF2	=	0x00ce
                           0000CF   268 _TF2	=	0x00cf
                           0000D0   269 _P	=	0x00d0
                           0000D1   270 _FL	=	0x00d1
                           0000D2   271 _OV	=	0x00d2
                           0000D3   272 _RS0	=	0x00d3
                           0000D4   273 _RS1	=	0x00d4
                           0000D5   274 _F0	=	0x00d5
                           0000D6   275 _AC	=	0x00d6
                           0000D7   276 _CY	=	0x00d7
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable register banks
                                    279 ;--------------------------------------------------------
                                    280 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; indirectly addressable internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area ISEG    (DATA)
                                    293 ;--------------------------------------------------------
                                    294 ; absolute internal ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area IABS    (ABS,DATA)
                                    297 	.area IABS    (ABS,DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; bit data
                                    300 ;--------------------------------------------------------
                                    301 	.area BSEG    (BIT)
                                    302 ;--------------------------------------------------------
                                    303 ; paged external ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area PSEG    (PAG,XDATA)
                                    306 ;--------------------------------------------------------
                                    307 ; external ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area XSEG    (XDATA)
                                    310 ;--------------------------------------------------------
                                    311 ; absolute external ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area XABS    (ABS,XDATA)
                                    314 ;--------------------------------------------------------
                                    315 ; external initialized ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area XISEG   (XDATA)
                                    318 	.area HOME    (CODE)
                                    319 	.area GSINIT0 (CODE)
                                    320 	.area GSINIT1 (CODE)
                                    321 	.area GSINIT2 (CODE)
                                    322 	.area GSINIT3 (CODE)
                                    323 	.area GSINIT4 (CODE)
                                    324 	.area GSINIT5 (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.area GSFINAL (CODE)
                                    327 	.area CSEG    (CODE)
                                    328 ;--------------------------------------------------------
                                    329 ; global & static initialisations
                                    330 ;--------------------------------------------------------
                                    331 	.area HOME    (CODE)
                                    332 	.area GSINIT  (CODE)
                                    333 	.area GSFINAL (CODE)
                                    334 	.area GSINIT  (CODE)
                                    335 ;--------------------------------------------------------
                                    336 ; Home
                                    337 ;--------------------------------------------------------
                                    338 	.area HOME    (CODE)
                                    339 	.area HOME    (CODE)
                                    340 ;--------------------------------------------------------
                                    341 ; code
                                    342 ;--------------------------------------------------------
                                    343 	.area CSEG    (CODE)
                                    344 ;------------------------------------------------------------
                                    345 ;Allocation info for local variables in function 'putchar'
                                    346 ;------------------------------------------------------------
                                    347 ;c                         Allocated to registers 
                                    348 ;------------------------------------------------------------
                                    349 ;	sio.c:10: int putchar(int c) __naked {
                                    350 ;	-----------------------------------------
                                    351 ;	 function putchar
                                    352 ;	-----------------------------------------
      000000                        353 _putchar:
                                    354 ;	naked function: no prologue.
                                    355 ;	sio.c:18: __endasm;
      000000 C0 E0            [24]  356 	push	acc
      000002 E5 82            [12]  357 	mov	a, dpl
      000004 12 00 3C         [24]  358 	lcall	0x003c
      000007 D0 E0            [24]  359 	pop	acc
      000009 22               [24]  360 	ret
                                    361 ;	sio.c:19: }
                                    362 ;	naked function: no epilogue.
                                    363 ;------------------------------------------------------------
                                    364 ;Allocation info for local variables in function 'getchar'
                                    365 ;------------------------------------------------------------
                                    366 ;	sio.c:21: int getchar(void) __naked {
                                    367 ;	-----------------------------------------
                                    368 ;	 function getchar
                                    369 ;	-----------------------------------------
      00000A                        370 _getchar:
                                    371 ;	naked function: no prologue.
                                    372 ;	sio.c:29: __endasm;
      00000A C0 E0            [24]  373 	push	acc
      00000C 12 00 36         [24]  374 	lcall	0x0036
      00000F F5 82            [12]  375 	mov	dpl, a
      000011 75 83 00         [24]  376 	mov	dph, #0
      000014 D0 E0            [24]  377 	pop	acc
      000016 22               [24]  378 	ret
                                    379 ;	sio.c:30: }
                                    380 ;	naked function: no epilogue.
                                    381 ;------------------------------------------------------------
                                    382 ;Allocation info for local variables in function 'getchar_poll'
                                    383 ;------------------------------------------------------------
                                    384 ;	sio.c:32: int getchar_poll(void) __naked {
                                    385 ;	-----------------------------------------
                                    386 ;	 function getchar_poll
                                    387 ;	-----------------------------------------
      000017                        388 _getchar_poll:
                                    389 ;	naked function: no prologue.
                                    390 ;	sio.c:47: __endasm;
      000017 C0 E0            [24]  391 	push	acc
      000019 C0 F0            [24]  392 	push	b
      00001B 74 FF            [12]  393 	mov	a, #0xff
      00001D F5 F0            [12]  394 	mov	b, a
      00001F 12 00 39         [24]  395 	lcall	0x0039
      000022 40 03            [24]  396 	jc	nochar
      000024 75 F0 00         [24]  397 	mov	b, #0x00
      000027                        398 	nochar:
      000027 F5 82            [12]  399 	mov	dpl, a
      000029 85 F0 83         [24]  400 	mov	dph, b
      00002C D0 F0            [24]  401 	pop	b
      00002E D0 E0            [24]  402 	pop	acc
      000030 22               [24]  403 	ret
                                    404 ;	sio.c:48: }
                                    405 ;	naked function: no epilogue.
                                    406 ;------------------------------------------------------------
                                    407 ;Allocation info for local variables in function 'printstr'
                                    408 ;------------------------------------------------------------
                                    409 ;s                         Allocated to registers 
                                    410 ;------------------------------------------------------------
                                    411 ;	sio.c:50: void printstr(const char *s) {
                                    412 ;	-----------------------------------------
                                    413 ;	 function printstr
                                    414 ;	-----------------------------------------
      000031                        415 _printstr:
                           000007   416 	ar7 = 0x07
                           000006   417 	ar6 = 0x06
                           000005   418 	ar5 = 0x05
                           000004   419 	ar4 = 0x04
                           000003   420 	ar3 = 0x03
                           000002   421 	ar2 = 0x02
                           000001   422 	ar1 = 0x01
                           000000   423 	ar0 = 0x00
      000031 AD 82            [24]  424 	mov	r5,dpl
      000033 AE 83            [24]  425 	mov	r6,dph
      000035 AF F0            [24]  426 	mov	r7,b
                                    427 ;	sio.c:53: return;
      000037                        428 00103$:
                                    429 ;	sio.c:51: for (; *s; s++) putchar((int)*s);
      000037 8D 82            [24]  430 	mov	dpl,r5
      000039 8E 83            [24]  431 	mov	dph,r6
      00003B 8F F0            [24]  432 	mov	b,r7
      00003D 12r00r00         [24]  433 	lcall	__gptrget
      000040 FC               [12]  434 	mov	r4,a
      000041 60 10            [24]  435 	jz	00101$
      000043 7B 00            [12]  436 	mov	r3,#0x00
      000045 8C 82            [24]  437 	mov	dpl,r4
      000047 8B 83            [24]  438 	mov	dph,r3
      000049 12r00r00         [24]  439 	lcall	_putchar
      00004C 0D               [12]  440 	inc	r5
      00004D BD 00 E7         [24]  441 	cjne	r5,#0x00,00103$
      000050 0E               [12]  442 	inc	r6
      000051 80 E4            [24]  443 	sjmp	00103$
      000053                        444 00101$:
                                    445 ;	sio.c:53: return;
                                    446 ;	sio.c:54: }
      000053 22               [24]  447 	ret
                                    448 ;------------------------------------------------------------
                                    449 ;Allocation info for local variables in function 'print8bin'
                                    450 ;------------------------------------------------------------
                                    451 ;d                         Allocated to registers r7 
                                    452 ;mask                      Allocated to registers r6 
                                    453 ;------------------------------------------------------------
                                    454 ;	sio.c:56: void print8bin(unsigned char d) {
                                    455 ;	-----------------------------------------
                                    456 ;	 function print8bin
                                    457 ;	-----------------------------------------
      000054                        458 _print8bin:
      000054 AF 82            [24]  459 	mov	r7,dpl
                                    460 ;	sio.c:59: for (mask = 0x80u; mask; mask >>= 1)
      000056 7E 80            [12]  461 	mov	r6,#0x80
      000058                        462 00102$:
                                    463 ;	sio.c:60: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000058 EE               [12]  464 	mov	a,r6
      000059 5F               [12]  465 	anl	a,r7
      00005A 60 06            [24]  466 	jz	00106$
      00005C 7C 31            [12]  467 	mov	r4,#0x31
      00005E 7D 00            [12]  468 	mov	r5,#0x00
      000060 80 04            [24]  469 	sjmp	00107$
      000062                        470 00106$:
      000062 7C 30            [12]  471 	mov	r4,#0x30
      000064 7D 00            [12]  472 	mov	r5,#0x00
      000066                        473 00107$:
      000066 8C 82            [24]  474 	mov	dpl,r4
      000068 8D 83            [24]  475 	mov	dph,r5
      00006A 12r00r00         [24]  476 	lcall	_putchar
                                    477 ;	sio.c:59: for (mask = 0x80u; mask; mask >>= 1)
      00006D EE               [12]  478 	mov	a,r6
      00006E C3               [12]  479 	clr	c
      00006F 13               [12]  480 	rrc	a
      000070 FE               [12]  481 	mov	r6,a
      000071 70 E5            [24]  482 	jnz	00102$
                                    483 ;	sio.c:62: return;
                                    484 ;	sio.c:63: }
      000073 22               [24]  485 	ret
                                    486 ;------------------------------------------------------------
                                    487 ;Allocation info for local variables in function 'print16bin'
                                    488 ;------------------------------------------------------------
                                    489 ;d                         Allocated to registers r6 r7 
                                    490 ;mask                      Allocated to registers r4 r5 
                                    491 ;------------------------------------------------------------
                                    492 ;	sio.c:65: void print16bin(unsigned int d) {
                                    493 ;	-----------------------------------------
                                    494 ;	 function print16bin
                                    495 ;	-----------------------------------------
      000074                        496 _print16bin:
      000074 AE 82            [24]  497 	mov	r6,dpl
      000076 AF 83            [24]  498 	mov	r7,dph
                                    499 ;	sio.c:68: for (mask = 0x8000u; mask; mask >>= 1)
      000078 7C 00            [12]  500 	mov	r4,#0x00
      00007A 7D 80            [12]  501 	mov	r5,#0x80
      00007C                        502 00102$:
                                    503 ;	sio.c:69: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00007C EC               [12]  504 	mov	a,r4
      00007D 5E               [12]  505 	anl	a,r6
      00007E FA               [12]  506 	mov	r2,a
      00007F ED               [12]  507 	mov	a,r5
      000080 5F               [12]  508 	anl	a,r7
      000081 4A               [12]  509 	orl	a,r2
      000082 60 06            [24]  510 	jz	00106$
      000084 7A 31            [12]  511 	mov	r2,#0x31
      000086 7B 00            [12]  512 	mov	r3,#0x00
      000088 80 04            [24]  513 	sjmp	00107$
      00008A                        514 00106$:
      00008A 7A 30            [12]  515 	mov	r2,#0x30
      00008C 7B 00            [12]  516 	mov	r3,#0x00
      00008E                        517 00107$:
      00008E 8A 82            [24]  518 	mov	dpl,r2
      000090 8B 83            [24]  519 	mov	dph,r3
      000092 12r00r00         [24]  520 	lcall	_putchar
                                    521 ;	sio.c:68: for (mask = 0x8000u; mask; mask >>= 1)
      000095 ED               [12]  522 	mov	a,r5
      000096 C3               [12]  523 	clr	c
      000097 13               [12]  524 	rrc	a
      000098 CC               [12]  525 	xch	a,r4
      000099 13               [12]  526 	rrc	a
      00009A CC               [12]  527 	xch	a,r4
      00009B FD               [12]  528 	mov	r5,a
      00009C 4C               [12]  529 	orl	a,r4
      00009D 70 DD            [24]  530 	jnz	00102$
                                    531 ;	sio.c:71: return;
                                    532 ;	sio.c:72: }
      00009F 22               [24]  533 	ret
                                    534 ;------------------------------------------------------------
                                    535 ;Allocation info for local variables in function 'print32bin'
                                    536 ;------------------------------------------------------------
                                    537 ;d                         Allocated to stack - _bp +1
                                    538 ;mask                      Allocated to stack - _bp +5
                                    539 ;------------------------------------------------------------
                                    540 ;	sio.c:74: void print32bin(unsigned long d) {
                                    541 ;	-----------------------------------------
                                    542 ;	 function print32bin
                                    543 ;	-----------------------------------------
      0000A0                        544 _print32bin:
      0000A0 C0*00            [24]  545 	push	_bp
      0000A2 85 81*00         [24]  546 	mov	_bp,sp
      0000A5 C0 82            [24]  547 	push	dpl
      0000A7 C0 83            [24]  548 	push	dph
      0000A9 C0 F0            [24]  549 	push	b
      0000AB C0 E0            [24]  550 	push	acc
      0000AD E5 81            [12]  551 	mov	a,sp
      0000AF 24 04            [12]  552 	add	a,#0x04
      0000B1 F5 81            [12]  553 	mov	sp,a
                                    554 ;	sio.c:77: for (mask = 0x80000000lu; mask; mask >>= 1)
      0000B3 E5*00            [12]  555 	mov	a,_bp
      0000B5 24 05            [12]  556 	add	a,#0x05
      0000B7 F8               [12]  557 	mov	r0,a
      0000B8 E4               [12]  558 	clr	a
      0000B9 F6               [12]  559 	mov	@r0,a
      0000BA 08               [12]  560 	inc	r0
      0000BB F6               [12]  561 	mov	@r0,a
      0000BC 08               [12]  562 	inc	r0
      0000BD F6               [12]  563 	mov	@r0,a
      0000BE 08               [12]  564 	inc	r0
      0000BF 76 80            [12]  565 	mov	@r0,#0x80
      0000C1                        566 00102$:
                                    567 ;	sio.c:78: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0000C1 A8*00            [24]  568 	mov	r0,_bp
      0000C3 08               [12]  569 	inc	r0
      0000C4 E5*00            [12]  570 	mov	a,_bp
      0000C6 24 05            [12]  571 	add	a,#0x05
      0000C8 F9               [12]  572 	mov	r1,a
      0000C9 E7               [12]  573 	mov	a,@r1
      0000CA 56               [12]  574 	anl	a,@r0
      0000CB FC               [12]  575 	mov	r4,a
      0000CC 09               [12]  576 	inc	r1
      0000CD E7               [12]  577 	mov	a,@r1
      0000CE 08               [12]  578 	inc	r0
      0000CF 56               [12]  579 	anl	a,@r0
      0000D0 FD               [12]  580 	mov	r5,a
      0000D1 09               [12]  581 	inc	r1
      0000D2 E7               [12]  582 	mov	a,@r1
      0000D3 08               [12]  583 	inc	r0
      0000D4 56               [12]  584 	anl	a,@r0
      0000D5 FE               [12]  585 	mov	r6,a
      0000D6 09               [12]  586 	inc	r1
      0000D7 E7               [12]  587 	mov	a,@r1
      0000D8 08               [12]  588 	inc	r0
      0000D9 56               [12]  589 	anl	a,@r0
      0000DA FF               [12]  590 	mov	r7,a
      0000DB EC               [12]  591 	mov	a,r4
      0000DC 4D               [12]  592 	orl	a,r5
      0000DD 4E               [12]  593 	orl	a,r6
      0000DE 4F               [12]  594 	orl	a,r7
      0000DF 60 06            [24]  595 	jz	00106$
      0000E1 7E 31            [12]  596 	mov	r6,#0x31
      0000E3 7F 00            [12]  597 	mov	r7,#0x00
      0000E5 80 04            [24]  598 	sjmp	00107$
      0000E7                        599 00106$:
      0000E7 7E 30            [12]  600 	mov	r6,#0x30
      0000E9 7F 00            [12]  601 	mov	r7,#0x00
      0000EB                        602 00107$:
      0000EB 8E 82            [24]  603 	mov	dpl,r6
      0000ED 8F 83            [24]  604 	mov	dph,r7
      0000EF 12r00r00         [24]  605 	lcall	_putchar
                                    606 ;	sio.c:77: for (mask = 0x80000000lu; mask; mask >>= 1)
      0000F2 E5*00            [12]  607 	mov	a,_bp
      0000F4 24 05            [12]  608 	add	a,#0x05
      0000F6 F8               [12]  609 	mov	r0,a
      0000F7 08               [12]  610 	inc	r0
      0000F8 08               [12]  611 	inc	r0
      0000F9 08               [12]  612 	inc	r0
      0000FA E6               [12]  613 	mov	a,@r0
      0000FB C3               [12]  614 	clr	c
      0000FC 13               [12]  615 	rrc	a
      0000FD F6               [12]  616 	mov	@r0,a
      0000FE 18               [12]  617 	dec	r0
      0000FF E6               [12]  618 	mov	a,@r0
      000100 13               [12]  619 	rrc	a
      000101 F6               [12]  620 	mov	@r0,a
      000102 18               [12]  621 	dec	r0
      000103 E6               [12]  622 	mov	a,@r0
      000104 13               [12]  623 	rrc	a
      000105 F6               [12]  624 	mov	@r0,a
      000106 18               [12]  625 	dec	r0
      000107 E6               [12]  626 	mov	a,@r0
      000108 13               [12]  627 	rrc	a
      000109 F6               [12]  628 	mov	@r0,a
      00010A E5*00            [12]  629 	mov	a,_bp
      00010C 24 05            [12]  630 	add	a,#0x05
      00010E F8               [12]  631 	mov	r0,a
      00010F E6               [12]  632 	mov	a,@r0
      000110 08               [12]  633 	inc	r0
      000111 46               [12]  634 	orl	a,@r0
      000112 08               [12]  635 	inc	r0
      000113 46               [12]  636 	orl	a,@r0
      000114 08               [12]  637 	inc	r0
      000115 46               [12]  638 	orl	a,@r0
      000116 70 A9            [24]  639 	jnz	00102$
                                    640 ;	sio.c:80: return;
                                    641 ;	sio.c:81: }
      000118 85*00 81         [24]  642 	mov	sp,_bp
      00011B D0*00            [24]  643 	pop	_bp
      00011D 22               [24]  644 	ret
                                    645 ;------------------------------------------------------------
                                    646 ;Allocation info for local variables in function 'print8x'
                                    647 ;------------------------------------------------------------
                                    648 ;d                         Allocated to registers r7 
                                    649 ;------------------------------------------------------------
                                    650 ;	sio.c:83: void print8x(unsigned char d) {
                                    651 ;	-----------------------------------------
                                    652 ;	 function print8x
                                    653 ;	-----------------------------------------
      00011E                        654 _print8x:
                                    655 ;	sio.c:84: putchar(digits[(d >> 4) & 0xf]);
      00011E E5 82            [12]  656 	mov	a,dpl
      000120 FF               [12]  657 	mov	r7,a
      000121 C4               [12]  658 	swap	a
      000122 54 0F            [12]  659 	anl	a,#0x0f
      000124 FE               [12]  660 	mov	r6,a
      000125 53 06 0F         [24]  661 	anl	ar6,#0x0f
      000128 7D 00            [12]  662 	mov	r5,#0x00
      00012A EE               [12]  663 	mov	a,r6
      00012B 24r00            [12]  664 	add	a,#_digits
      00012D F5 82            [12]  665 	mov	dpl,a
      00012F ED               [12]  666 	mov	a,r5
      000130 34s00            [12]  667 	addc	a,#(_digits >> 8)
      000132 F5 83            [12]  668 	mov	dph,a
      000134 E4               [12]  669 	clr	a
      000135 93               [24]  670 	movc	a,@a+dptr
      000136 FE               [12]  671 	mov	r6,a
      000137 7D 00            [12]  672 	mov	r5,#0x00
      000139 8E 82            [24]  673 	mov	dpl,r6
      00013B 8D 83            [24]  674 	mov	dph,r5
      00013D 12r00r00         [24]  675 	lcall	_putchar
                                    676 ;	sio.c:85: putchar(digits[d & 0xf]);
      000140 53 07 0F         [24]  677 	anl	ar7,#0x0f
      000143 7E 00            [12]  678 	mov	r6,#0x00
      000145 EF               [12]  679 	mov	a,r7
      000146 24r00            [12]  680 	add	a,#_digits
      000148 F5 82            [12]  681 	mov	dpl,a
      00014A EE               [12]  682 	mov	a,r6
      00014B 34s00            [12]  683 	addc	a,#(_digits >> 8)
      00014D F5 83            [12]  684 	mov	dph,a
      00014F E4               [12]  685 	clr	a
      000150 93               [24]  686 	movc	a,@a+dptr
      000151 FF               [12]  687 	mov	r7,a
      000152 7E 00            [12]  688 	mov	r6,#0x00
      000154 8F 82            [24]  689 	mov	dpl,r7
      000156 8E 83            [24]  690 	mov	dph,r6
                                    691 ;	sio.c:87: return;
                                    692 ;	sio.c:88: }
      000158 02r00r00         [24]  693 	ljmp	_putchar
                                    694 ;------------------------------------------------------------
                                    695 ;Allocation info for local variables in function 'print16x'
                                    696 ;------------------------------------------------------------
                                    697 ;d                         Allocated to registers r6 r7 
                                    698 ;------------------------------------------------------------
                                    699 ;	sio.c:90: void print16x(unsigned int d) {
                                    700 ;	-----------------------------------------
                                    701 ;	 function print16x
                                    702 ;	-----------------------------------------
      00015B                        703 _print16x:
      00015B AE 82            [24]  704 	mov	r6,dpl
                                    705 ;	sio.c:91: putchar(digits[(d >> 12) & 0xf]);
      00015D E5 83            [12]  706 	mov	a,dph
      00015F FF               [12]  707 	mov	r7,a
      000160 C4               [12]  708 	swap	a
      000161 54 0F            [12]  709 	anl	a,#0x0f
      000163 FC               [12]  710 	mov	r4,a
      000164 53 04 0F         [24]  711 	anl	ar4,#0x0f
      000167 7D 00            [12]  712 	mov	r5,#0x00
      000169 EC               [12]  713 	mov	a,r4
      00016A 24r00            [12]  714 	add	a,#_digits
      00016C F5 82            [12]  715 	mov	dpl,a
      00016E ED               [12]  716 	mov	a,r5
      00016F 34s00            [12]  717 	addc	a,#(_digits >> 8)
      000171 F5 83            [12]  718 	mov	dph,a
      000173 E4               [12]  719 	clr	a
      000174 93               [24]  720 	movc	a,@a+dptr
      000175 FD               [12]  721 	mov	r5,a
      000176 7C 00            [12]  722 	mov	r4,#0x00
      000178 8D 82            [24]  723 	mov	dpl,r5
      00017A 8C 83            [24]  724 	mov	dph,r4
      00017C 12r00r00         [24]  725 	lcall	_putchar
                                    726 ;	sio.c:92: putchar(digits[(d >> 8) & 0xf]);
      00017F 8F 05            [24]  727 	mov	ar5,r7
      000181 53 05 0F         [24]  728 	anl	ar5,#0x0f
      000184 7C 00            [12]  729 	mov	r4,#0x00
      000186 ED               [12]  730 	mov	a,r5
      000187 24r00            [12]  731 	add	a,#_digits
      000189 F5 82            [12]  732 	mov	dpl,a
      00018B EC               [12]  733 	mov	a,r4
      00018C 34s00            [12]  734 	addc	a,#(_digits >> 8)
      00018E F5 83            [12]  735 	mov	dph,a
      000190 E4               [12]  736 	clr	a
      000191 93               [24]  737 	movc	a,@a+dptr
      000192 FD               [12]  738 	mov	r5,a
      000193 7C 00            [12]  739 	mov	r4,#0x00
      000195 8D 82            [24]  740 	mov	dpl,r5
      000197 8C 83            [24]  741 	mov	dph,r4
      000199 12r00r00         [24]  742 	lcall	_putchar
                                    743 ;	sio.c:93: putchar(digits[(d >> 4) & 0xf]);
      00019C 8E 04            [24]  744 	mov	ar4,r6
      00019E EF               [12]  745 	mov	a,r7
      00019F C4               [12]  746 	swap	a
      0001A0 CC               [12]  747 	xch	a,r4
      0001A1 C4               [12]  748 	swap	a
      0001A2 54 0F            [12]  749 	anl	a,#0x0f
      0001A4 6C               [12]  750 	xrl	a,r4
      0001A5 CC               [12]  751 	xch	a,r4
      0001A6 54 0F            [12]  752 	anl	a,#0x0f
      0001A8 CC               [12]  753 	xch	a,r4
      0001A9 6C               [12]  754 	xrl	a,r4
      0001AA CC               [12]  755 	xch	a,r4
      0001AB 53 04 0F         [24]  756 	anl	ar4,#0x0f
      0001AE 7D 00            [12]  757 	mov	r5,#0x00
      0001B0 EC               [12]  758 	mov	a,r4
      0001B1 24r00            [12]  759 	add	a,#_digits
      0001B3 F5 82            [12]  760 	mov	dpl,a
      0001B5 ED               [12]  761 	mov	a,r5
      0001B6 34s00            [12]  762 	addc	a,#(_digits >> 8)
      0001B8 F5 83            [12]  763 	mov	dph,a
      0001BA E4               [12]  764 	clr	a
      0001BB 93               [24]  765 	movc	a,@a+dptr
      0001BC FD               [12]  766 	mov	r5,a
      0001BD 7C 00            [12]  767 	mov	r4,#0x00
      0001BF 8D 82            [24]  768 	mov	dpl,r5
      0001C1 8C 83            [24]  769 	mov	dph,r4
      0001C3 12r00r00         [24]  770 	lcall	_putchar
                                    771 ;	sio.c:94: putchar(digits[d & 0xf]);
      0001C6 53 06 0F         [24]  772 	anl	ar6,#0x0f
      0001C9 7F 00            [12]  773 	mov	r7,#0x00
      0001CB EE               [12]  774 	mov	a,r6
      0001CC 24r00            [12]  775 	add	a,#_digits
      0001CE F5 82            [12]  776 	mov	dpl,a
      0001D0 EF               [12]  777 	mov	a,r7
      0001D1 34s00            [12]  778 	addc	a,#(_digits >> 8)
      0001D3 F5 83            [12]  779 	mov	dph,a
      0001D5 E4               [12]  780 	clr	a
      0001D6 93               [24]  781 	movc	a,@a+dptr
      0001D7 FF               [12]  782 	mov	r7,a
      0001D8 7E 00            [12]  783 	mov	r6,#0x00
      0001DA 8F 82            [24]  784 	mov	dpl,r7
      0001DC 8E 83            [24]  785 	mov	dph,r6
                                    786 ;	sio.c:96: return;
                                    787 ;	sio.c:97: }
      0001DE 02r00r00         [24]  788 	ljmp	_putchar
                                    789 ;------------------------------------------------------------
                                    790 ;Allocation info for local variables in function 'print32x'
                                    791 ;------------------------------------------------------------
                                    792 ;d                         Allocated to registers r4 r5 r6 r7 
                                    793 ;------------------------------------------------------------
                                    794 ;	sio.c:99: void print32x(unsigned long d) {
                                    795 ;	-----------------------------------------
                                    796 ;	 function print32x
                                    797 ;	-----------------------------------------
      0001E1                        798 _print32x:
      0001E1 AC 82            [24]  799 	mov	r4,dpl
      0001E3 AD 83            [24]  800 	mov	r5,dph
      0001E5 AE F0            [24]  801 	mov	r6,b
                                    802 ;	sio.c:100: putchar(digits[(d >> 28) & 0xf]);
      0001E7 FF               [12]  803 	mov	r7,a
      0001E8 C4               [12]  804 	swap	a
      0001E9 54 0F            [12]  805 	anl	a,#0x0f
      0001EB F8               [12]  806 	mov	r0,a
      0001EC 53 00 0F         [24]  807 	anl	ar0,#0x0f
      0001EF E4               [12]  808 	clr	a
      0001F0 F9               [12]  809 	mov	r1,a
      0001F1 E8               [12]  810 	mov	a,r0
      0001F2 24r00            [12]  811 	add	a,#_digits
      0001F4 F5 82            [12]  812 	mov	dpl,a
      0001F6 E9               [12]  813 	mov	a,r1
      0001F7 34s00            [12]  814 	addc	a,#(_digits >> 8)
      0001F9 F5 83            [12]  815 	mov	dph,a
      0001FB E4               [12]  816 	clr	a
      0001FC 93               [24]  817 	movc	a,@a+dptr
      0001FD FB               [12]  818 	mov	r3,a
      0001FE 7A 00            [12]  819 	mov	r2,#0x00
      000200 8B 82            [24]  820 	mov	dpl,r3
      000202 8A 83            [24]  821 	mov	dph,r2
      000204 12r00r00         [24]  822 	lcall	_putchar
                                    823 ;	sio.c:101: putchar(digits[(d >> 24) & 0xf]);
      000207 8F 03            [24]  824 	mov	ar3,r7
      000209 53 03 0F         [24]  825 	anl	ar3,#0x0f
      00020C 7A 00            [12]  826 	mov	r2,#0x00
      00020E EB               [12]  827 	mov	a,r3
      00020F 24r00            [12]  828 	add	a,#_digits
      000211 F5 82            [12]  829 	mov	dpl,a
      000213 EA               [12]  830 	mov	a,r2
      000214 34s00            [12]  831 	addc	a,#(_digits >> 8)
      000216 F5 83            [12]  832 	mov	dph,a
      000218 E4               [12]  833 	clr	a
      000219 93               [24]  834 	movc	a,@a+dptr
      00021A FB               [12]  835 	mov	r3,a
      00021B 7A 00            [12]  836 	mov	r2,#0x00
      00021D 8B 82            [24]  837 	mov	dpl,r3
      00021F 8A 83            [24]  838 	mov	dph,r2
      000221 12r00r00         [24]  839 	lcall	_putchar
                                    840 ;	sio.c:102: putchar(digits[(d >> 20) & 0xf]);
      000224 8E 00            [24]  841 	mov	ar0,r6
      000226 EF               [12]  842 	mov	a,r7
      000227 C4               [12]  843 	swap	a
      000228 C8               [12]  844 	xch	a,r0
      000229 C4               [12]  845 	swap	a
      00022A 54 0F            [12]  846 	anl	a,#0x0f
      00022C 68               [12]  847 	xrl	a,r0
      00022D C8               [12]  848 	xch	a,r0
      00022E 54 0F            [12]  849 	anl	a,#0x0f
      000230 C8               [12]  850 	xch	a,r0
      000231 68               [12]  851 	xrl	a,r0
      000232 C8               [12]  852 	xch	a,r0
      000233 53 00 0F         [24]  853 	anl	ar0,#0x0f
      000236 E4               [12]  854 	clr	a
      000237 F9               [12]  855 	mov	r1,a
      000238 E8               [12]  856 	mov	a,r0
      000239 24r00            [12]  857 	add	a,#_digits
      00023B F5 82            [12]  858 	mov	dpl,a
      00023D E9               [12]  859 	mov	a,r1
      00023E 34s00            [12]  860 	addc	a,#(_digits >> 8)
      000240 F5 83            [12]  861 	mov	dph,a
      000242 E4               [12]  862 	clr	a
      000243 93               [24]  863 	movc	a,@a+dptr
      000244 FB               [12]  864 	mov	r3,a
      000245 7A 00            [12]  865 	mov	r2,#0x00
      000247 8B 82            [24]  866 	mov	dpl,r3
      000249 8A 83            [24]  867 	mov	dph,r2
      00024B 12r00r00         [24]  868 	lcall	_putchar
                                    869 ;	sio.c:103: putchar(digits[(d >> 16) & 0xf]);
      00024E 8E 03            [24]  870 	mov	ar3,r6
      000250 53 03 0F         [24]  871 	anl	ar3,#0x0f
      000253 7A 00            [12]  872 	mov	r2,#0x00
      000255 EB               [12]  873 	mov	a,r3
      000256 24r00            [12]  874 	add	a,#_digits
      000258 F5 82            [12]  875 	mov	dpl,a
      00025A EA               [12]  876 	mov	a,r2
      00025B 34s00            [12]  877 	addc	a,#(_digits >> 8)
      00025D F5 83            [12]  878 	mov	dph,a
      00025F E4               [12]  879 	clr	a
      000260 93               [24]  880 	movc	a,@a+dptr
      000261 FB               [12]  881 	mov	r3,a
      000262 7A 00            [12]  882 	mov	r2,#0x00
      000264 8B 82            [24]  883 	mov	dpl,r3
      000266 8A 83            [24]  884 	mov	dph,r2
      000268 12r00r00         [24]  885 	lcall	_putchar
                                    886 ;	sio.c:104: putchar(digits[(d >> 12) & 0xf]);
      00026B 8D 00            [24]  887 	mov	ar0,r5
      00026D EE               [12]  888 	mov	a,r6
      00026E C4               [12]  889 	swap	a
      00026F C8               [12]  890 	xch	a,r0
      000270 C4               [12]  891 	swap	a
      000271 54 0F            [12]  892 	anl	a,#0x0f
      000273 68               [12]  893 	xrl	a,r0
      000274 C8               [12]  894 	xch	a,r0
      000275 54 0F            [12]  895 	anl	a,#0x0f
      000277 C8               [12]  896 	xch	a,r0
      000278 68               [12]  897 	xrl	a,r0
      000279 C8               [12]  898 	xch	a,r0
      00027A F9               [12]  899 	mov	r1,a
      00027B EF               [12]  900 	mov	a,r7
      00027C C4               [12]  901 	swap	a
      00027D 54 F0            [12]  902 	anl	a,#0xf0
      00027F 49               [12]  903 	orl	a,r1
      000280 EF               [12]  904 	mov	a,r7
      000281 C4               [12]  905 	swap	a
      000282 54 0F            [12]  906 	anl	a,#0x0f
      000284 53 00 0F         [24]  907 	anl	ar0,#0x0f
      000287 E4               [12]  908 	clr	a
      000288 F9               [12]  909 	mov	r1,a
      000289 E8               [12]  910 	mov	a,r0
      00028A 24r00            [12]  911 	add	a,#_digits
      00028C F5 82            [12]  912 	mov	dpl,a
      00028E E9               [12]  913 	mov	a,r1
      00028F 34s00            [12]  914 	addc	a,#(_digits >> 8)
      000291 F5 83            [12]  915 	mov	dph,a
      000293 E4               [12]  916 	clr	a
      000294 93               [24]  917 	movc	a,@a+dptr
      000295 FB               [12]  918 	mov	r3,a
      000296 7A 00            [12]  919 	mov	r2,#0x00
      000298 8B 82            [24]  920 	mov	dpl,r3
      00029A 8A 83            [24]  921 	mov	dph,r2
      00029C 12r00r00         [24]  922 	lcall	_putchar
                                    923 ;	sio.c:105: putchar(digits[(d >> 8) & 0xf]);
      00029F 8D 03            [24]  924 	mov	ar3,r5
      0002A1 53 03 0F         [24]  925 	anl	ar3,#0x0f
      0002A4 7A 00            [12]  926 	mov	r2,#0x00
      0002A6 EB               [12]  927 	mov	a,r3
      0002A7 24r00            [12]  928 	add	a,#_digits
      0002A9 F5 82            [12]  929 	mov	dpl,a
      0002AB EA               [12]  930 	mov	a,r2
      0002AC 34s00            [12]  931 	addc	a,#(_digits >> 8)
      0002AE F5 83            [12]  932 	mov	dph,a
      0002B0 E4               [12]  933 	clr	a
      0002B1 93               [24]  934 	movc	a,@a+dptr
      0002B2 FB               [12]  935 	mov	r3,a
      0002B3 7A 00            [12]  936 	mov	r2,#0x00
      0002B5 8B 82            [24]  937 	mov	dpl,r3
      0002B7 8A 83            [24]  938 	mov	dph,r2
      0002B9 12r00r00         [24]  939 	lcall	_putchar
                                    940 ;	sio.c:106: putchar(digits[(d >> 4) & 0xf]);
      0002BC 8C 00            [24]  941 	mov	ar0,r4
      0002BE ED               [12]  942 	mov	a,r5
      0002BF C4               [12]  943 	swap	a
      0002C0 C8               [12]  944 	xch	a,r0
      0002C1 C4               [12]  945 	swap	a
      0002C2 54 0F            [12]  946 	anl	a,#0x0f
      0002C4 68               [12]  947 	xrl	a,r0
      0002C5 C8               [12]  948 	xch	a,r0
      0002C6 54 0F            [12]  949 	anl	a,#0x0f
      0002C8 C8               [12]  950 	xch	a,r0
      0002C9 68               [12]  951 	xrl	a,r0
      0002CA C8               [12]  952 	xch	a,r0
      0002CB F9               [12]  953 	mov	r1,a
      0002CC EE               [12]  954 	mov	a,r6
      0002CD C4               [12]  955 	swap	a
      0002CE 54 F0            [12]  956 	anl	a,#0xf0
      0002D0 49               [12]  957 	orl	a,r1
      0002D1 8E 02            [24]  958 	mov	ar2,r6
      0002D3 EF               [12]  959 	mov	a,r7
      0002D4 C4               [12]  960 	swap	a
      0002D5 CA               [12]  961 	xch	a,r2
      0002D6 C4               [12]  962 	swap	a
      0002D7 54 0F            [12]  963 	anl	a,#0x0f
      0002D9 6A               [12]  964 	xrl	a,r2
      0002DA CA               [12]  965 	xch	a,r2
      0002DB 54 0F            [12]  966 	anl	a,#0x0f
      0002DD CA               [12]  967 	xch	a,r2
      0002DE 6A               [12]  968 	xrl	a,r2
      0002DF CA               [12]  969 	xch	a,r2
      0002E0 53 00 0F         [24]  970 	anl	ar0,#0x0f
      0002E3 E4               [12]  971 	clr	a
      0002E4 F9               [12]  972 	mov	r1,a
      0002E5 E8               [12]  973 	mov	a,r0
      0002E6 24r00            [12]  974 	add	a,#_digits
      0002E8 F5 82            [12]  975 	mov	dpl,a
      0002EA E9               [12]  976 	mov	a,r1
      0002EB 34s00            [12]  977 	addc	a,#(_digits >> 8)
      0002ED F5 83            [12]  978 	mov	dph,a
      0002EF E4               [12]  979 	clr	a
      0002F0 93               [24]  980 	movc	a,@a+dptr
      0002F1 FB               [12]  981 	mov	r3,a
      0002F2 7A 00            [12]  982 	mov	r2,#0x00
      0002F4 8B 82            [24]  983 	mov	dpl,r3
      0002F6 8A 83            [24]  984 	mov	dph,r2
      0002F8 12r00r00         [24]  985 	lcall	_putchar
                                    986 ;	sio.c:107: putchar(digits[d & 0xf]);
      0002FB 53 04 0F         [24]  987 	anl	ar4,#0x0f
      0002FE E4               [12]  988 	clr	a
      0002FF FD               [12]  989 	mov	r5,a
      000300 EC               [12]  990 	mov	a,r4
      000301 24r00            [12]  991 	add	a,#_digits
      000303 F5 82            [12]  992 	mov	dpl,a
      000305 ED               [12]  993 	mov	a,r5
      000306 34s00            [12]  994 	addc	a,#(_digits >> 8)
      000308 F5 83            [12]  995 	mov	dph,a
      00030A E4               [12]  996 	clr	a
      00030B 93               [24]  997 	movc	a,@a+dptr
      00030C FF               [12]  998 	mov	r7,a
      00030D 7E 00            [12]  999 	mov	r6,#0x00
      00030F 8F 82            [24] 1000 	mov	dpl,r7
      000311 8E 83            [24] 1001 	mov	dph,r6
                                   1002 ;	sio.c:109: return;
                                   1003 ;	sio.c:110: }
      000313 02r00r00         [24] 1004 	ljmp	_putchar
                                   1005 	.area CSEG    (CODE)
                                   1006 	.area CONST   (CODE)
      000000                       1007 _digits:
      000000 30                    1008 	.db #0x30	; 48	'0'
      000001 31                    1009 	.db #0x31	; 49	'1'
      000002 32                    1010 	.db #0x32	; 50	'2'
      000003 33                    1011 	.db #0x33	; 51	'3'
      000004 34                    1012 	.db #0x34	; 52	'4'
      000005 35                    1013 	.db #0x35	; 53	'5'
      000006 36                    1014 	.db #0x36	; 54	'6'
      000007 37                    1015 	.db #0x37	; 55	'7'
      000008 38                    1016 	.db #0x38	; 56	'8'
      000009 39                    1017 	.db #0x39	; 57	'9'
      00000A 41                    1018 	.db #0x41	; 65	'A'
      00000B 42                    1019 	.db #0x42	; 66	'B'
      00000C 43                    1020 	.db #0x43	; 67	'C'
      00000D 44                    1021 	.db #0x44	; 68	'D'
      00000E 45                    1022 	.db #0x45	; 69	'E'
      00000F 46                    1023 	.db #0x46	; 70	'F'
                                   1024 	.area XINIT   (CODE)
                                   1025 	.area CABS    (ABS,CODE)
